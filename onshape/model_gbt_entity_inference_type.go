/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// GBTEntityInferenceType the model 'GBTEntityInferenceType'
type GBTEntityInferenceType string

// List of GBTEntityInferenceType
const (
	GBTEntityInferenceTypePartOrigin      GBTEntityInferenceType = "PART_ORIGIN"
	GBTEntityInferenceTypePoint           GBTEntityInferenceType = "POINT"
	GBTEntityInferenceTypeCentroid        GBTEntityInferenceType = "CENTROID"
	GBTEntityInferenceTypeCenter          GBTEntityInferenceType = "CENTER"
	GBTEntityInferenceTypeMidPoint        GBTEntityInferenceType = "MID_POINT"
	GBTEntityInferenceTypeTopAxisPoint    GBTEntityInferenceType = "TOP_AXIS_POINT"
	GBTEntityInferenceTypeMidAxisPoint    GBTEntityInferenceType = "MID_AXIS_POINT"
	GBTEntityInferenceTypeBottomAxisPoint GBTEntityInferenceType = "BOTTOM_AXIS_POINT"
	GBTEntityInferenceTypeOriginX         GBTEntityInferenceType = "ORIGIN_X"
	GBTEntityInferenceTypeOriginY         GBTEntityInferenceType = "ORIGIN_Y"
	GBTEntityInferenceTypeOriginZ         GBTEntityInferenceType = "ORIGIN_Z"
	GBTEntityInferenceTypeLoopCenter      GBTEntityInferenceType = "LOOP_CENTER"
	GBTEntityInferenceTypeVirtualSharp    GBTEntityInferenceType = "VIRTUAL_SHARP"
	GBTEntityInferenceTypeUnknown         GBTEntityInferenceType = "UNKNOWN"
)

// All allowed values of GBTEntityInferenceType enum
var AllowedGBTEntityInferenceTypeEnumValues = []GBTEntityInferenceType{
	"PART_ORIGIN",
	"POINT",
	"CENTROID",
	"CENTER",
	"MID_POINT",
	"TOP_AXIS_POINT",
	"MID_AXIS_POINT",
	"BOTTOM_AXIS_POINT",
	"ORIGIN_X",
	"ORIGIN_Y",
	"ORIGIN_Z",
	"LOOP_CENTER",
	"VIRTUAL_SHARP",
	"UNKNOWN",
}

func (v *GBTEntityInferenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GBTEntityInferenceType(value)
	for _, existing := range AllowedGBTEntityInferenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GBTEntityInferenceType", value)
}

// NewGBTEntityInferenceTypeFromValue returns a pointer to a valid GBTEntityInferenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGBTEntityInferenceTypeFromValue(v string) (*GBTEntityInferenceType, error) {
	ev := GBTEntityInferenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GBTEntityInferenceType: valid values are %v", v, AllowedGBTEntityInferenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GBTEntityInferenceType) IsValid() bool {
	for _, existing := range AllowedGBTEntityInferenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GBTEntityInferenceType value
func (v GBTEntityInferenceType) Ptr() *GBTEntityInferenceType {
	return &v
}

type NullableGBTEntityInferenceType struct {
	value *GBTEntityInferenceType
	isSet bool
}

func (v NullableGBTEntityInferenceType) Get() *GBTEntityInferenceType {
	return v.value
}

func (v *NullableGBTEntityInferenceType) Set(val *GBTEntityInferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableGBTEntityInferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableGBTEntityInferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGBTEntityInferenceType(val *GBTEntityInferenceType) *NullableGBTEntityInferenceType {
	return &NullableGBTEntityInferenceType{value: val, isSet: true}
}

func (v NullableGBTEntityInferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGBTEntityInferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

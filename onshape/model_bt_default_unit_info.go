/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTDefaultUnitInfo Specifies which unit should be used for each supported quantity type.
type BTDefaultUnitInfo struct {
	// The quantity type.
	Key *string `json:"key,omitempty"`
	// The unit that should be used.
	Value *string `json:"value,omitempty"`
}

// NewBTDefaultUnitInfo instantiates a new BTDefaultUnitInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTDefaultUnitInfo() *BTDefaultUnitInfo {
	this := BTDefaultUnitInfo{}
	return &this
}

// NewBTDefaultUnitInfoWithDefaults instantiates a new BTDefaultUnitInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTDefaultUnitInfoWithDefaults() *BTDefaultUnitInfo {
	this := BTDefaultUnitInfo{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *BTDefaultUnitInfo) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDefaultUnitInfo) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *BTDefaultUnitInfo) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *BTDefaultUnitInfo) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTDefaultUnitInfo) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDefaultUnitInfo) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BTDefaultUnitInfo) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *BTDefaultUnitInfo) SetValue(v string) {
	o.Value = &v
}

func (o BTDefaultUnitInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableBTDefaultUnitInfo struct {
	value *BTDefaultUnitInfo
	isSet bool
}

func (v NullableBTDefaultUnitInfo) Get() *BTDefaultUnitInfo {
	return v.value
}

func (v *NullableBTDefaultUnitInfo) Set(val *BTDefaultUnitInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTDefaultUnitInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTDefaultUnitInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTDefaultUnitInfo(val *BTDefaultUnitInfo) *NullableBTDefaultUnitInfo {
	return &NullableBTDefaultUnitInfo{value: val, isSet: true}
}

func (v NullableBTDefaultUnitInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTDefaultUnitInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

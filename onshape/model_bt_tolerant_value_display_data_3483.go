/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTTolerantValueDisplayData3483 struct for BTTolerantValueDisplayData3483
type BTTolerantValueDisplayData3483 struct {
	// Type of JSON object.
	BtType         *string                `json:"btType,omitempty"`
	FitClass       *string                `json:"fitClass,omitempty"`
	IsAngle        *bool                  `json:"isAngle,omitempty"`
	IsDefined      *bool                  `json:"isDefined,omitempty"`
	LowerTolerance *float64               `json:"lowerTolerance,omitempty"`
	NominalValue   *float64               `json:"nominalValue,omitempty"`
	Precision      *GBTTolerancePrecision `json:"precision,omitempty"`
	ToleranceType  *GBTToleranceType      `json:"toleranceType,omitempty"`
	UpperTolerance *float64               `json:"upperTolerance,omitempty"`
}

// NewBTTolerantValueDisplayData3483 instantiates a new BTTolerantValueDisplayData3483 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTTolerantValueDisplayData3483() *BTTolerantValueDisplayData3483 {
	this := BTTolerantValueDisplayData3483{}
	return &this
}

// NewBTTolerantValueDisplayData3483WithDefaults instantiates a new BTTolerantValueDisplayData3483 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTTolerantValueDisplayData3483WithDefaults() *BTTolerantValueDisplayData3483 {
	this := BTTolerantValueDisplayData3483{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTTolerantValueDisplayData3483) SetBtType(v string) {
	o.BtType = &v
}

// GetFitClass returns the FitClass field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetFitClass() string {
	if o == nil || o.FitClass == nil {
		var ret string
		return ret
	}
	return *o.FitClass
}

// GetFitClassOk returns a tuple with the FitClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetFitClassOk() (*string, bool) {
	if o == nil || o.FitClass == nil {
		return nil, false
	}
	return o.FitClass, true
}

// HasFitClass returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasFitClass() bool {
	if o != nil && o.FitClass != nil {
		return true
	}

	return false
}

// SetFitClass gets a reference to the given string and assigns it to the FitClass field.
func (o *BTTolerantValueDisplayData3483) SetFitClass(v string) {
	o.FitClass = &v
}

// GetIsAngle returns the IsAngle field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetIsAngle() bool {
	if o == nil || o.IsAngle == nil {
		var ret bool
		return ret
	}
	return *o.IsAngle
}

// GetIsAngleOk returns a tuple with the IsAngle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetIsAngleOk() (*bool, bool) {
	if o == nil || o.IsAngle == nil {
		return nil, false
	}
	return o.IsAngle, true
}

// HasIsAngle returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasIsAngle() bool {
	if o != nil && o.IsAngle != nil {
		return true
	}

	return false
}

// SetIsAngle gets a reference to the given bool and assigns it to the IsAngle field.
func (o *BTTolerantValueDisplayData3483) SetIsAngle(v bool) {
	o.IsAngle = &v
}

// GetIsDefined returns the IsDefined field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetIsDefined() bool {
	if o == nil || o.IsDefined == nil {
		var ret bool
		return ret
	}
	return *o.IsDefined
}

// GetIsDefinedOk returns a tuple with the IsDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetIsDefinedOk() (*bool, bool) {
	if o == nil || o.IsDefined == nil {
		return nil, false
	}
	return o.IsDefined, true
}

// HasIsDefined returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasIsDefined() bool {
	if o != nil && o.IsDefined != nil {
		return true
	}

	return false
}

// SetIsDefined gets a reference to the given bool and assigns it to the IsDefined field.
func (o *BTTolerantValueDisplayData3483) SetIsDefined(v bool) {
	o.IsDefined = &v
}

// GetLowerTolerance returns the LowerTolerance field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetLowerTolerance() float64 {
	if o == nil || o.LowerTolerance == nil {
		var ret float64
		return ret
	}
	return *o.LowerTolerance
}

// GetLowerToleranceOk returns a tuple with the LowerTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetLowerToleranceOk() (*float64, bool) {
	if o == nil || o.LowerTolerance == nil {
		return nil, false
	}
	return o.LowerTolerance, true
}

// HasLowerTolerance returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasLowerTolerance() bool {
	if o != nil && o.LowerTolerance != nil {
		return true
	}

	return false
}

// SetLowerTolerance gets a reference to the given float64 and assigns it to the LowerTolerance field.
func (o *BTTolerantValueDisplayData3483) SetLowerTolerance(v float64) {
	o.LowerTolerance = &v
}

// GetNominalValue returns the NominalValue field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetNominalValue() float64 {
	if o == nil || o.NominalValue == nil {
		var ret float64
		return ret
	}
	return *o.NominalValue
}

// GetNominalValueOk returns a tuple with the NominalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetNominalValueOk() (*float64, bool) {
	if o == nil || o.NominalValue == nil {
		return nil, false
	}
	return o.NominalValue, true
}

// HasNominalValue returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasNominalValue() bool {
	if o != nil && o.NominalValue != nil {
		return true
	}

	return false
}

// SetNominalValue gets a reference to the given float64 and assigns it to the NominalValue field.
func (o *BTTolerantValueDisplayData3483) SetNominalValue(v float64) {
	o.NominalValue = &v
}

// GetPrecision returns the Precision field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetPrecision() GBTTolerancePrecision {
	if o == nil || o.Precision == nil {
		var ret GBTTolerancePrecision
		return ret
	}
	return *o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetPrecisionOk() (*GBTTolerancePrecision, bool) {
	if o == nil || o.Precision == nil {
		return nil, false
	}
	return o.Precision, true
}

// HasPrecision returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasPrecision() bool {
	if o != nil && o.Precision != nil {
		return true
	}

	return false
}

// SetPrecision gets a reference to the given GBTTolerancePrecision and assigns it to the Precision field.
func (o *BTTolerantValueDisplayData3483) SetPrecision(v GBTTolerancePrecision) {
	o.Precision = &v
}

// GetToleranceType returns the ToleranceType field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetToleranceType() GBTToleranceType {
	if o == nil || o.ToleranceType == nil {
		var ret GBTToleranceType
		return ret
	}
	return *o.ToleranceType
}

// GetToleranceTypeOk returns a tuple with the ToleranceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetToleranceTypeOk() (*GBTToleranceType, bool) {
	if o == nil || o.ToleranceType == nil {
		return nil, false
	}
	return o.ToleranceType, true
}

// HasToleranceType returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasToleranceType() bool {
	if o != nil && o.ToleranceType != nil {
		return true
	}

	return false
}

// SetToleranceType gets a reference to the given GBTToleranceType and assigns it to the ToleranceType field.
func (o *BTTolerantValueDisplayData3483) SetToleranceType(v GBTToleranceType) {
	o.ToleranceType = &v
}

// GetUpperTolerance returns the UpperTolerance field value if set, zero value otherwise.
func (o *BTTolerantValueDisplayData3483) GetUpperTolerance() float64 {
	if o == nil || o.UpperTolerance == nil {
		var ret float64
		return ret
	}
	return *o.UpperTolerance
}

// GetUpperToleranceOk returns a tuple with the UpperTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTolerantValueDisplayData3483) GetUpperToleranceOk() (*float64, bool) {
	if o == nil || o.UpperTolerance == nil {
		return nil, false
	}
	return o.UpperTolerance, true
}

// HasUpperTolerance returns a boolean if a field has been set.
func (o *BTTolerantValueDisplayData3483) HasUpperTolerance() bool {
	if o != nil && o.UpperTolerance != nil {
		return true
	}

	return false
}

// SetUpperTolerance gets a reference to the given float64 and assigns it to the UpperTolerance field.
func (o *BTTolerantValueDisplayData3483) SetUpperTolerance(v float64) {
	o.UpperTolerance = &v
}

func (o BTTolerantValueDisplayData3483) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.FitClass != nil {
		toSerialize["fitClass"] = o.FitClass
	}
	if o.IsAngle != nil {
		toSerialize["isAngle"] = o.IsAngle
	}
	if o.IsDefined != nil {
		toSerialize["isDefined"] = o.IsDefined
	}
	if o.LowerTolerance != nil {
		toSerialize["lowerTolerance"] = o.LowerTolerance
	}
	if o.NominalValue != nil {
		toSerialize["nominalValue"] = o.NominalValue
	}
	if o.Precision != nil {
		toSerialize["precision"] = o.Precision
	}
	if o.ToleranceType != nil {
		toSerialize["toleranceType"] = o.ToleranceType
	}
	if o.UpperTolerance != nil {
		toSerialize["upperTolerance"] = o.UpperTolerance
	}
	return json.Marshal(toSerialize)
}

type NullableBTTolerantValueDisplayData3483 struct {
	value *BTTolerantValueDisplayData3483
	isSet bool
}

func (v NullableBTTolerantValueDisplayData3483) Get() *BTTolerantValueDisplayData3483 {
	return v.value
}

func (v *NullableBTTolerantValueDisplayData3483) Set(val *BTTolerantValueDisplayData3483) {
	v.value = val
	v.isSet = true
}

func (v NullableBTTolerantValueDisplayData3483) IsSet() bool {
	return v.isSet
}

func (v *NullableBTTolerantValueDisplayData3483) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTTolerantValueDisplayData3483(val *BTTolerantValueDisplayData3483) *NullableBTTolerantValueDisplayData3483 {
	return &NullableBTTolerantValueDisplayData3483{value: val, isSet: true}
}

func (v NullableBTTolerantValueDisplayData3483) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTTolerantValueDisplayData3483) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

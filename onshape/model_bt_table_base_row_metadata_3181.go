/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTTableBaseRowMetadata3181 - struct for BTTableBaseRowMetadata3181
type BTTableBaseRowMetadata3181 struct {
	implBTTableBaseRowMetadata3181 interface{}
}

// BTSMOtherJointTableRowMetadata2640AsBTTableBaseRowMetadata3181 is a convenience function that returns BTSMOtherJointTableRowMetadata2640 wrapped in BTTableBaseRowMetadata3181
func (o *BTSMOtherJointTableRowMetadata2640) AsBTTableBaseRowMetadata3181() *BTTableBaseRowMetadata3181 {
	return &BTTableBaseRowMetadata3181{o}
}

// BTSMBendTableRowMetadata1705AsBTTableBaseRowMetadata3181 is a convenience function that returns BTSMBendTableRowMetadata1705 wrapped in BTTableBaseRowMetadata3181
func (o *BTSMBendTableRowMetadata1705) AsBTTableBaseRowMetadata3181() *BTTableBaseRowMetadata3181 {
	return &BTTableBaseRowMetadata3181{o}
}

// BTBaseSMJointTableRowMetadata2232AsBTTableBaseRowMetadata3181 is a convenience function that returns BTBaseSMJointTableRowMetadata2232 wrapped in BTTableBaseRowMetadata3181
func (o *BTBaseSMJointTableRowMetadata2232) AsBTTableBaseRowMetadata3181() *BTTableBaseRowMetadata3181 {
	return &BTTableBaseRowMetadata3181{o}
}

// BTVariableTableRowMetadata3912AsBTTableBaseRowMetadata3181 is a convenience function that returns BTVariableTableRowMetadata3912 wrapped in BTTableBaseRowMetadata3181
func (o *BTVariableTableRowMetadata3912) AsBTTableBaseRowMetadata3181() *BTTableBaseRowMetadata3181 {
	return &BTTableBaseRowMetadata3181{o}
}

// BTBillOfMaterialsTableRowMetadata1300AsBTTableBaseRowMetadata3181 is a convenience function that returns BTBillOfMaterialsTableRowMetadata1300 wrapped in BTTableBaseRowMetadata3181
func (o *BTBillOfMaterialsTableRowMetadata1300) AsBTTableBaseRowMetadata3181() *BTTableBaseRowMetadata3181 {
	return &BTTableBaseRowMetadata3181{o}
}

// BTFSTableRowMetadata2262AsBTTableBaseRowMetadata3181 is a convenience function that returns BTFSTableRowMetadata2262 wrapped in BTTableBaseRowMetadata3181
func (o *BTFSTableRowMetadata2262) AsBTTableBaseRowMetadata3181() *BTTableBaseRowMetadata3181 {
	return &BTTableBaseRowMetadata3181{o}
}

// NewBTTableBaseRowMetadata3181 instantiates a new BTTableBaseRowMetadata3181 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTTableBaseRowMetadata3181() *BTTableBaseRowMetadata3181 {
	this := BTTableBaseRowMetadata3181{Newbase_BTTableBaseRowMetadata3181()}
	return &this
}

// NewBTTableBaseRowMetadata3181WithDefaults instantiates a new BTTableBaseRowMetadata3181 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTTableBaseRowMetadata3181WithDefaults() *BTTableBaseRowMetadata3181 {
	this := BTTableBaseRowMetadata3181{Newbase_BTTableBaseRowMetadata3181WithDefaults()}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTTableBaseRowMetadata3181) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableBaseRowMetadata3181) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTTableBaseRowMetadata3181) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTTableBaseRowMetadata3181) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetCrossHighlightDataIfAny returns the CrossHighlightDataIfAny field value if set, zero value otherwise.
func (o *BTTableBaseRowMetadata3181) GetCrossHighlightDataIfAny() BTTableBaseCrossHighlightData2609 {
	type getResult interface {
		GetCrossHighlightDataIfAny() BTTableBaseCrossHighlightData2609
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCrossHighlightDataIfAny()
	} else {
		var de BTTableBaseCrossHighlightData2609
		return de
	}
}

// GetCrossHighlightDataIfAnyOk returns a tuple with the CrossHighlightDataIfAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableBaseRowMetadata3181) GetCrossHighlightDataIfAnyOk() (*BTTableBaseCrossHighlightData2609, bool) {
	type getResult interface {
		GetCrossHighlightDataIfAnyOk() (*BTTableBaseCrossHighlightData2609, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCrossHighlightDataIfAnyOk()
	} else {
		return nil, false
	}
}

// HasCrossHighlightDataIfAny returns a boolean if a field has been set.
func (o *BTTableBaseRowMetadata3181) HasCrossHighlightDataIfAny() bool {
	type getResult interface {
		HasCrossHighlightDataIfAny() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasCrossHighlightDataIfAny()
	} else {
		return false
	}
}

// SetCrossHighlightDataIfAny gets a reference to the given BTTableBaseCrossHighlightData2609 and assigns it to the CrossHighlightDataIfAny field.
func (o *BTTableBaseRowMetadata3181) SetCrossHighlightDataIfAny(v BTTableBaseCrossHighlightData2609) {
	type getResult interface {
		SetCrossHighlightDataIfAny(v BTTableBaseCrossHighlightData2609)
	}

	o.GetActualInstance().(getResult).SetCrossHighlightDataIfAny(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTTableBaseRowMetadata3181) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTBaseSMJointTableRowMetadata-2232'
	if jsonDict["btType"] == "BTBaseSMJointTableRowMetadata-2232" {
		// try to unmarshal JSON data into BTBaseSMJointTableRowMetadata2232
		var qr *BTBaseSMJointTableRowMetadata2232
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTTableBaseRowMetadata3181 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTTableBaseRowMetadata3181 = nil
			return fmt.Errorf("failed to unmarshal BTTableBaseRowMetadata3181 as BTBaseSMJointTableRowMetadata2232: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTBillOfMaterialsTableRowMetadata-1300'
	if jsonDict["btType"] == "BTBillOfMaterialsTableRowMetadata-1300" {
		// try to unmarshal JSON data into BTBillOfMaterialsTableRowMetadata1300
		var qr *BTBillOfMaterialsTableRowMetadata1300
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTTableBaseRowMetadata3181 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTTableBaseRowMetadata3181 = nil
			return fmt.Errorf("failed to unmarshal BTTableBaseRowMetadata3181 as BTBillOfMaterialsTableRowMetadata1300: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTFSTableRowMetadata-2262'
	if jsonDict["btType"] == "BTFSTableRowMetadata-2262" {
		// try to unmarshal JSON data into BTFSTableRowMetadata2262
		var qr *BTFSTableRowMetadata2262
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTTableBaseRowMetadata3181 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTTableBaseRowMetadata3181 = nil
			return fmt.Errorf("failed to unmarshal BTTableBaseRowMetadata3181 as BTFSTableRowMetadata2262: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTVariableTableRowMetadata-3912'
	if jsonDict["btType"] == "BTVariableTableRowMetadata-3912" {
		// try to unmarshal JSON data into BTVariableTableRowMetadata3912
		var qr *BTVariableTableRowMetadata3912
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTTableBaseRowMetadata3181 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTTableBaseRowMetadata3181 = nil
			return fmt.Errorf("failed to unmarshal BTTableBaseRowMetadata3181 as BTVariableTableRowMetadata3912: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTSMBendTableRowMetadata-1705'
	if jsonDict["btType"] == "BTSMBendTableRowMetadata-1705" {
		// try to unmarshal JSON data into BTSMBendTableRowMetadata1705
		var qr *BTSMBendTableRowMetadata1705
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTTableBaseRowMetadata3181 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTTableBaseRowMetadata3181 = nil
			return fmt.Errorf("failed to unmarshal BTTableBaseRowMetadata3181 as BTSMBendTableRowMetadata1705: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTSMOtherJointTableRowMetadata-2640'
	if jsonDict["btType"] == "BTSMOtherJointTableRowMetadata-2640" {
		// try to unmarshal JSON data into BTSMOtherJointTableRowMetadata2640
		var qr *BTSMOtherJointTableRowMetadata2640
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTTableBaseRowMetadata3181 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTTableBaseRowMetadata3181 = nil
			return fmt.Errorf("failed to unmarshal BTTableBaseRowMetadata3181 as BTSMOtherJointTableRowMetadata2640: %s", err.Error())
		}
	}

	var qtx *base_BTTableBaseRowMetadata3181
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTTableBaseRowMetadata3181 = qtx
		return nil // data stored in dst.base_BTTableBaseRowMetadata3181, return on the first match
	} else {
		dst.implBTTableBaseRowMetadata3181 = nil
		return fmt.Errorf("failed to unmarshal BTTableBaseRowMetadata3181 as base_BTTableBaseRowMetadata3181: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTTableBaseRowMetadata3181) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTTableBaseRowMetadata3181) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTTableBaseRowMetadata3181
}

type NullableBTTableBaseRowMetadata3181 struct {
	value *BTTableBaseRowMetadata3181
	isSet bool
}

func (v NullableBTTableBaseRowMetadata3181) Get() *BTTableBaseRowMetadata3181 {
	return v.value
}

func (v *NullableBTTableBaseRowMetadata3181) Set(val *BTTableBaseRowMetadata3181) {
	v.value = val
	v.isSet = true
}

func (v NullableBTTableBaseRowMetadata3181) IsSet() bool {
	return v.isSet
}

func (v *NullableBTTableBaseRowMetadata3181) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTTableBaseRowMetadata3181(val *BTTableBaseRowMetadata3181) *NullableBTTableBaseRowMetadata3181 {
	return &NullableBTTableBaseRowMetadata3181{value: val, isSet: true}
}

func (v NullableBTTableBaseRowMetadata3181) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTTableBaseRowMetadata3181) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTTableBaseRowMetadata3181 struct {
	// Type of JSON object.
	BtType                  *string                            `json:"btType,omitempty"`
	CrossHighlightDataIfAny *BTTableBaseCrossHighlightData2609 `json:"crossHighlightDataIfAny,omitempty"`
}

// Newbase_BTTableBaseRowMetadata3181 instantiates a new base_BTTableBaseRowMetadata3181 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTTableBaseRowMetadata3181() *base_BTTableBaseRowMetadata3181 {
	this := base_BTTableBaseRowMetadata3181{}
	return &this
}

// Newbase_BTTableBaseRowMetadata3181WithDefaults instantiates a new base_BTTableBaseRowMetadata3181 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTTableBaseRowMetadata3181WithDefaults() *base_BTTableBaseRowMetadata3181 {
	this := base_BTTableBaseRowMetadata3181{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTTableBaseRowMetadata3181) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTTableBaseRowMetadata3181) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTTableBaseRowMetadata3181) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTTableBaseRowMetadata3181) SetBtType(v string) {
	o.BtType = &v
}

// GetCrossHighlightDataIfAny returns the CrossHighlightDataIfAny field value if set, zero value otherwise.
func (o *base_BTTableBaseRowMetadata3181) GetCrossHighlightDataIfAny() BTTableBaseCrossHighlightData2609 {
	if o == nil || o.CrossHighlightDataIfAny == nil {
		var ret BTTableBaseCrossHighlightData2609
		return ret
	}
	return *o.CrossHighlightDataIfAny
}

// GetCrossHighlightDataIfAnyOk returns a tuple with the CrossHighlightDataIfAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTTableBaseRowMetadata3181) GetCrossHighlightDataIfAnyOk() (*BTTableBaseCrossHighlightData2609, bool) {
	if o == nil || o.CrossHighlightDataIfAny == nil {
		return nil, false
	}
	return o.CrossHighlightDataIfAny, true
}

// HasCrossHighlightDataIfAny returns a boolean if a field has been set.
func (o *base_BTTableBaseRowMetadata3181) HasCrossHighlightDataIfAny() bool {
	if o != nil && o.CrossHighlightDataIfAny != nil {
		return true
	}

	return false
}

// SetCrossHighlightDataIfAny gets a reference to the given BTTableBaseCrossHighlightData2609 and assigns it to the CrossHighlightDataIfAny field.
func (o *base_BTTableBaseRowMetadata3181) SetCrossHighlightDataIfAny(v BTTableBaseCrossHighlightData2609) {
	o.CrossHighlightDataIfAny = &v
}

func (o base_BTTableBaseRowMetadata3181) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.CrossHighlightDataIfAny != nil {
		toSerialize["crossHighlightDataIfAny"] = o.CrossHighlightDataIfAny
	}
	return json.Marshal(toSerialize)
}

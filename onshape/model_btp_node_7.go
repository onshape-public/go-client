/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTPNode7 - struct for BTPNode7
type BTPNode7 struct {
	implBTPNode7 interface{}
}

// BTPAnnotation231AsBTPNode7 is a convenience function that returns BTPAnnotation231 wrapped in BTPNode7
func (o *BTPAnnotation231) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPBuiltinIdentifier233AsBTPNode7 is a convenience function that returns BTPBuiltinIdentifier233 wrapped in BTPNode7
func (o *BTPBuiltinIdentifier233) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPProcedureDeclarationBase266AsBTPNode7 is a convenience function that returns BTPProcedureDeclarationBase266 wrapped in BTPNode7
func (o *BTPProcedureDeclarationBase266) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPArgumentDeclaration232AsBTPNode7 is a convenience function that returns BTPArgumentDeclaration232 wrapped in BTPNode7
func (o *BTPArgumentDeclaration232) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPConversionFunction1362AsBTPNode7 is a convenience function that returns BTPConversionFunction1362 wrapped in BTPNode7
func (o *BTPConversionFunction1362) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPPropertyAccessor23AsBTPNode7 is a convenience function that returns BTPPropertyAccessor23 wrapped in BTPNode7
func (o *BTPPropertyAccessor23) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPLiteralMapEntry257AsBTPNode7 is a convenience function that returns BTPLiteralMapEntry257 wrapped in BTPNode7
func (o *BTPLiteralMapEntry257) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPTopLevelImport285AsBTPNode7 is a convenience function that returns BTPTopLevelImport285 wrapped in BTPNode7
func (o *BTPTopLevelImport285) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPTopLevelEnumDeclaration284AsBTPNode7 is a convenience function that returns BTPTopLevelEnumDeclaration284 wrapped in BTPNode7
func (o *BTPTopLevelEnumDeclaration284) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPModuleId235AsBTPNode7 is a convenience function that returns BTPModuleId235 wrapped in BTPNode7
func (o *BTPModuleId235) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPTopLevelUserTypeDeclaration288AsBTPNode7 is a convenience function that returns BTPTopLevelUserTypeDeclaration288 wrapped in BTPNode7
func (o *BTPTopLevelUserTypeDeclaration288) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPModule234AsBTPNode7 is a convenience function that returns BTPModule234 wrapped in BTPNode7
func (o *BTPModule234) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPStatement269AsBTPNode7 is a convenience function that returns BTPStatement269 wrapped in BTPNode7
func (o *BTPStatement269) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPFunctionOrPredicateDeclaration247AsBTPNode7 is a convenience function that returns BTPFunctionOrPredicateDeclaration247 wrapped in BTPNode7
func (o *BTPFunctionOrPredicateDeclaration247) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPOperatorDeclaration264AsBTPNode7 is a convenience function that returns BTPOperatorDeclaration264 wrapped in BTPNode7
func (o *BTPOperatorDeclaration264) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPLValue249AsBTPNode7 is a convenience function that returns BTPLValue249 wrapped in BTPNode7
func (o *BTPLValue249) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPTopLevelTypeDeclaration287AsBTPNode7 is a convenience function that returns BTPTopLevelTypeDeclaration287 wrapped in BTPNode7
func (o *BTPTopLevelTypeDeclaration287) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPTypeName290AsBTPNode7 is a convenience function that returns BTPTypeName290 wrapped in BTPNode7
func (o *BTPTypeName290) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPPredicateDeclaration265AsBTPNode7 is a convenience function that returns BTPPredicateDeclaration265 wrapped in BTPNode7
func (o *BTPPredicateDeclaration265) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPName261AsBTPNode7 is a convenience function that returns BTPName261 wrapped in BTPNode7
func (o *BTPName261) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPTopLevelConstantDeclaration283AsBTPNode7 is a convenience function that returns BTPTopLevelConstantDeclaration283 wrapped in BTPNode7
func (o *BTPTopLevelConstantDeclaration283) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// BTPTopLevelNode286AsBTPNode7 is a convenience function that returns BTPTopLevelNode286 wrapped in BTPNode7
func (o *BTPTopLevelNode286) AsBTPNode7() *BTPNode7 {
	return &BTPNode7{o}
}

// NewBTPNode7 instantiates a new BTPNode7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPNode7() *BTPNode7 {
	this := BTPNode7{Newbase_BTPNode7()}
	return &this
}

// NewBTPNode7WithDefaults instantiates a new BTPNode7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPNode7WithDefaults() *BTPNode7 {
	this := BTPNode7{Newbase_BTPNode7WithDefaults()}
	return &this
}

// GetAtomic returns the Atomic field value if set, zero value otherwise.
func (o *BTPNode7) GetAtomic() bool {
	type getResult interface {
		GetAtomic() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAtomic()
	} else {
		var de bool
		return de
	}
}

// GetAtomicOk returns a tuple with the Atomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetAtomicOk() (*bool, bool) {
	type getResult interface {
		GetAtomicOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAtomicOk()
	} else {
		return nil, false
	}
}

// HasAtomic returns a boolean if a field has been set.
func (o *BTPNode7) HasAtomic() bool {
	type getResult interface {
		HasAtomic() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasAtomic()
	} else {
		return false
	}
}

// SetAtomic gets a reference to the given bool and assigns it to the Atomic field.
func (o *BTPNode7) SetAtomic(v bool) {
	type getResult interface {
		SetAtomic(v bool)
	}

	o.GetActualInstance().(getResult).SetAtomic(v)
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPNode7) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPNode7) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPNode7) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetDocumentationType returns the DocumentationType field value if set, zero value otherwise.
func (o *BTPNode7) GetDocumentationType() GBTPDefinitionType {
	type getResult interface {
		GetDocumentationType() GBTPDefinitionType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationType()
	} else {
		var de GBTPDefinitionType
		return de
	}
}

// GetDocumentationTypeOk returns a tuple with the DocumentationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetDocumentationTypeOk() (*GBTPDefinitionType, bool) {
	type getResult interface {
		GetDocumentationTypeOk() (*GBTPDefinitionType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationTypeOk()
	} else {
		return nil, false
	}
}

// HasDocumentationType returns a boolean if a field has been set.
func (o *BTPNode7) HasDocumentationType() bool {
	type getResult interface {
		HasDocumentationType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDocumentationType()
	} else {
		return false
	}
}

// SetDocumentationType gets a reference to the given GBTPDefinitionType and assigns it to the DocumentationType field.
func (o *BTPNode7) SetDocumentationType(v GBTPDefinitionType) {
	type getResult interface {
		SetDocumentationType(v GBTPDefinitionType)
	}

	o.GetActualInstance().(getResult).SetDocumentationType(v)
}

// GetEndSourceLocation returns the EndSourceLocation field value if set, zero value otherwise.
func (o *BTPNode7) GetEndSourceLocation() int32 {
	type getResult interface {
		GetEndSourceLocation() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEndSourceLocation()
	} else {
		var de int32
		return de
	}
}

// GetEndSourceLocationOk returns a tuple with the EndSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetEndSourceLocationOk() (*int32, bool) {
	type getResult interface {
		GetEndSourceLocationOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEndSourceLocationOk()
	} else {
		return nil, false
	}
}

// HasEndSourceLocation returns a boolean if a field has been set.
func (o *BTPNode7) HasEndSourceLocation() bool {
	type getResult interface {
		HasEndSourceLocation() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEndSourceLocation()
	} else {
		return false
	}
}

// SetEndSourceLocation gets a reference to the given int32 and assigns it to the EndSourceLocation field.
func (o *BTPNode7) SetEndSourceLocation(v int32) {
	type getResult interface {
		SetEndSourceLocation(v int32)
	}

	o.GetActualInstance().(getResult).SetEndSourceLocation(v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTPNode7) GetNodeId() string {
	type getResult interface {
		GetNodeId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeId()
	} else {
		var de string
		return de
	}
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetNodeIdOk() (*string, bool) {
	type getResult interface {
		GetNodeIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeIdOk()
	} else {
		return nil, false
	}
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTPNode7) HasNodeId() bool {
	type getResult interface {
		HasNodeId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNodeId()
	} else {
		return false
	}
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTPNode7) SetNodeId(v string) {
	type getResult interface {
		SetNodeId(v string)
	}

	o.GetActualInstance().(getResult).SetNodeId(v)
}

// GetShortDescriptor returns the ShortDescriptor field value if set, zero value otherwise.
func (o *BTPNode7) GetShortDescriptor() string {
	type getResult interface {
		GetShortDescriptor() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetShortDescriptor()
	} else {
		var de string
		return de
	}
}

// GetShortDescriptorOk returns a tuple with the ShortDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetShortDescriptorOk() (*string, bool) {
	type getResult interface {
		GetShortDescriptorOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetShortDescriptorOk()
	} else {
		return nil, false
	}
}

// HasShortDescriptor returns a boolean if a field has been set.
func (o *BTPNode7) HasShortDescriptor() bool {
	type getResult interface {
		HasShortDescriptor() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasShortDescriptor()
	} else {
		return false
	}
}

// SetShortDescriptor gets a reference to the given string and assigns it to the ShortDescriptor field.
func (o *BTPNode7) SetShortDescriptor(v string) {
	type getResult interface {
		SetShortDescriptor(v string)
	}

	o.GetActualInstance().(getResult).SetShortDescriptor(v)
}

// GetSpaceAfter returns the SpaceAfter field value if set, zero value otherwise.
func (o *BTPNode7) GetSpaceAfter() BTPSpace10 {
	type getResult interface {
		GetSpaceAfter() BTPSpace10
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceAfter()
	} else {
		var de BTPSpace10
		return de
	}
}

// GetSpaceAfterOk returns a tuple with the SpaceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetSpaceAfterOk() (*BTPSpace10, bool) {
	type getResult interface {
		GetSpaceAfterOk() (*BTPSpace10, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceAfterOk()
	} else {
		return nil, false
	}
}

// HasSpaceAfter returns a boolean if a field has been set.
func (o *BTPNode7) HasSpaceAfter() bool {
	type getResult interface {
		HasSpaceAfter() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceAfter()
	} else {
		return false
	}
}

// SetSpaceAfter gets a reference to the given BTPSpace10 and assigns it to the SpaceAfter field.
func (o *BTPNode7) SetSpaceAfter(v BTPSpace10) {
	type getResult interface {
		SetSpaceAfter(v BTPSpace10)
	}

	o.GetActualInstance().(getResult).SetSpaceAfter(v)
}

// GetSpaceBefore returns the SpaceBefore field value if set, zero value otherwise.
func (o *BTPNode7) GetSpaceBefore() BTPSpace10 {
	type getResult interface {
		GetSpaceBefore() BTPSpace10
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceBefore()
	} else {
		var de BTPSpace10
		return de
	}
}

// GetSpaceBeforeOk returns a tuple with the SpaceBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetSpaceBeforeOk() (*BTPSpace10, bool) {
	type getResult interface {
		GetSpaceBeforeOk() (*BTPSpace10, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceBeforeOk()
	} else {
		return nil, false
	}
}

// HasSpaceBefore returns a boolean if a field has been set.
func (o *BTPNode7) HasSpaceBefore() bool {
	type getResult interface {
		HasSpaceBefore() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceBefore()
	} else {
		return false
	}
}

// SetSpaceBefore gets a reference to the given BTPSpace10 and assigns it to the SpaceBefore field.
func (o *BTPNode7) SetSpaceBefore(v BTPSpace10) {
	type getResult interface {
		SetSpaceBefore(v BTPSpace10)
	}

	o.GetActualInstance().(getResult).SetSpaceBefore(v)
}

// GetSpaceDefault returns the SpaceDefault field value if set, zero value otherwise.
func (o *BTPNode7) GetSpaceDefault() bool {
	type getResult interface {
		GetSpaceDefault() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceDefault()
	} else {
		var de bool
		return de
	}
}

// GetSpaceDefaultOk returns a tuple with the SpaceDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetSpaceDefaultOk() (*bool, bool) {
	type getResult interface {
		GetSpaceDefaultOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceDefaultOk()
	} else {
		return nil, false
	}
}

// HasSpaceDefault returns a boolean if a field has been set.
func (o *BTPNode7) HasSpaceDefault() bool {
	type getResult interface {
		HasSpaceDefault() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceDefault()
	} else {
		return false
	}
}

// SetSpaceDefault gets a reference to the given bool and assigns it to the SpaceDefault field.
func (o *BTPNode7) SetSpaceDefault(v bool) {
	type getResult interface {
		SetSpaceDefault(v bool)
	}

	o.GetActualInstance().(getResult).SetSpaceDefault(v)
}

// GetStartSourceLocation returns the StartSourceLocation field value if set, zero value otherwise.
func (o *BTPNode7) GetStartSourceLocation() int32 {
	type getResult interface {
		GetStartSourceLocation() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStartSourceLocation()
	} else {
		var de int32
		return de
	}
}

// GetStartSourceLocationOk returns a tuple with the StartSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPNode7) GetStartSourceLocationOk() (*int32, bool) {
	type getResult interface {
		GetStartSourceLocationOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStartSourceLocationOk()
	} else {
		return nil, false
	}
}

// HasStartSourceLocation returns a boolean if a field has been set.
func (o *BTPNode7) HasStartSourceLocation() bool {
	type getResult interface {
		HasStartSourceLocation() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasStartSourceLocation()
	} else {
		return false
	}
}

// SetStartSourceLocation gets a reference to the given int32 and assigns it to the StartSourceLocation field.
func (o *BTPNode7) SetStartSourceLocation(v int32) {
	type getResult interface {
		SetStartSourceLocation(v int32)
	}

	o.GetActualInstance().(getResult).SetStartSourceLocation(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTPNode7) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'BTPAnnotation-231'
	if jsonDict["btType"] == "BTPAnnotation-231" {
		// try to unmarshal JSON data into BTPAnnotation231
		var qr *BTPAnnotation231
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPAnnotation231: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPArgumentDeclaration-232'
	if jsonDict["btType"] == "BTPArgumentDeclaration-232" {
		// try to unmarshal JSON data into BTPArgumentDeclaration232
		var qr *BTPArgumentDeclaration232
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPArgumentDeclaration232: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPBuiltinIdentifier-233'
	if jsonDict["btType"] == "BTPBuiltinIdentifier-233" {
		// try to unmarshal JSON data into BTPBuiltinIdentifier233
		var qr *BTPBuiltinIdentifier233
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPBuiltinIdentifier233: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPConversionFunction-1362'
	if jsonDict["btType"] == "BTPConversionFunction-1362" {
		// try to unmarshal JSON data into BTPConversionFunction1362
		var qr *BTPConversionFunction1362
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPConversionFunction1362: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPFunctionOrPredicateDeclaration-247'
	if jsonDict["btType"] == "BTPFunctionOrPredicateDeclaration-247" {
		// try to unmarshal JSON data into BTPFunctionOrPredicateDeclaration247
		var qr *BTPFunctionOrPredicateDeclaration247
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPFunctionOrPredicateDeclaration247: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPLValue-249'
	if jsonDict["btType"] == "BTPLValue-249" {
		// try to unmarshal JSON data into BTPLValue249
		var qr *BTPLValue249
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPLValue249: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPLiteralMapEntry-257'
	if jsonDict["btType"] == "BTPLiteralMapEntry-257" {
		// try to unmarshal JSON data into BTPLiteralMapEntry257
		var qr *BTPLiteralMapEntry257
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPLiteralMapEntry257: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPModule-234'
	if jsonDict["btType"] == "BTPModule-234" {
		// try to unmarshal JSON data into BTPModule234
		var qr *BTPModule234
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPModule234: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPModuleId-235'
	if jsonDict["btType"] == "BTPModuleId-235" {
		// try to unmarshal JSON data into BTPModuleId235
		var qr *BTPModuleId235
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPModuleId235: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPName-261'
	if jsonDict["btType"] == "BTPName-261" {
		// try to unmarshal JSON data into BTPName261
		var qr *BTPName261
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPName261: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPOperatorDeclaration-264'
	if jsonDict["btType"] == "BTPOperatorDeclaration-264" {
		// try to unmarshal JSON data into BTPOperatorDeclaration264
		var qr *BTPOperatorDeclaration264
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPOperatorDeclaration264: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPPredicateDeclaration-265'
	if jsonDict["btType"] == "BTPPredicateDeclaration-265" {
		// try to unmarshal JSON data into BTPPredicateDeclaration265
		var qr *BTPPredicateDeclaration265
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPPredicateDeclaration265: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPProcedureDeclarationBase-266'
	if jsonDict["btType"] == "BTPProcedureDeclarationBase-266" {
		// try to unmarshal JSON data into BTPProcedureDeclarationBase266
		var qr *BTPProcedureDeclarationBase266
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPProcedureDeclarationBase266: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPPropertyAccessor-23'
	if jsonDict["btType"] == "BTPPropertyAccessor-23" {
		// try to unmarshal JSON data into BTPPropertyAccessor23
		var qr *BTPPropertyAccessor23
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPPropertyAccessor23: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatement-269'
	if jsonDict["btType"] == "BTPStatement-269" {
		// try to unmarshal JSON data into BTPStatement269
		var qr *BTPStatement269
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPStatement269: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPTopLevelConstantDeclaration-283'
	if jsonDict["btType"] == "BTPTopLevelConstantDeclaration-283" {
		// try to unmarshal JSON data into BTPTopLevelConstantDeclaration283
		var qr *BTPTopLevelConstantDeclaration283
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPTopLevelConstantDeclaration283: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPTopLevelEnumDeclaration-284'
	if jsonDict["btType"] == "BTPTopLevelEnumDeclaration-284" {
		// try to unmarshal JSON data into BTPTopLevelEnumDeclaration284
		var qr *BTPTopLevelEnumDeclaration284
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPTopLevelEnumDeclaration284: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPTopLevelImport-285'
	if jsonDict["btType"] == "BTPTopLevelImport-285" {
		// try to unmarshal JSON data into BTPTopLevelImport285
		var qr *BTPTopLevelImport285
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPTopLevelImport285: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPTopLevelNode-286'
	if jsonDict["btType"] == "BTPTopLevelNode-286" {
		// try to unmarshal JSON data into BTPTopLevelNode286
		var qr *BTPTopLevelNode286
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPTopLevelNode286: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPTopLevelTypeDeclaration-287'
	if jsonDict["btType"] == "BTPTopLevelTypeDeclaration-287" {
		// try to unmarshal JSON data into BTPTopLevelTypeDeclaration287
		var qr *BTPTopLevelTypeDeclaration287
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPTopLevelTypeDeclaration287: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPTopLevelUserTypeDeclaration-288'
	if jsonDict["btType"] == "BTPTopLevelUserTypeDeclaration-288" {
		// try to unmarshal JSON data into BTPTopLevelUserTypeDeclaration288
		var qr *BTPTopLevelUserTypeDeclaration288
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPTopLevelUserTypeDeclaration288: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPTypeName-290'
	if jsonDict["btType"] == "BTPTypeName-290" {
		// try to unmarshal JSON data into BTPTypeName290
		var qr *BTPTypeName290
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPNode7 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPNode7 = nil
			return fmt.Errorf("Failed to unmarshal BTPNode7 as BTPTypeName290: %s", err.Error())
		}
	}

	var qtx *base_BTPNode7
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTPNode7 = qtx
		return nil // data stored in dst.base_BTPNode7, return on the first match
	} else {
		dst.implBTPNode7 = nil
		return fmt.Errorf("Failed to unmarshal BTPNode7 as base_BTPNode7: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTPNode7) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTPNode7) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTPNode7
}

type NullableBTPNode7 struct {
	value *BTPNode7
	isSet bool
}

func (v NullableBTPNode7) Get() *BTPNode7 {
	return v.value
}

func (v *NullableBTPNode7) Set(val *BTPNode7) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPNode7) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPNode7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPNode7(val *BTPNode7) *NullableBTPNode7 {
	return &NullableBTPNode7{value: val, isSet: true}
}

func (v NullableBTPNode7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPNode7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTPNode7 struct {
	Atomic              *bool               `json:"atomic,omitempty"`
	BtType              *string             `json:"btType,omitempty"`
	DocumentationType   *GBTPDefinitionType `json:"documentationType,omitempty"`
	EndSourceLocation   *int32              `json:"endSourceLocation,omitempty"`
	NodeId              *string             `json:"nodeId,omitempty"`
	ShortDescriptor     *string             `json:"shortDescriptor,omitempty"`
	SpaceAfter          *BTPSpace10         `json:"spaceAfter,omitempty"`
	SpaceBefore         *BTPSpace10         `json:"spaceBefore,omitempty"`
	SpaceDefault        *bool               `json:"spaceDefault,omitempty"`
	StartSourceLocation *int32              `json:"startSourceLocation,omitempty"`
}

// Newbase_BTPNode7 instantiates a new base_BTPNode7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTPNode7() *base_BTPNode7 {
	this := base_BTPNode7{}
	return &this
}

// Newbase_BTPNode7WithDefaults instantiates a new base_BTPNode7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTPNode7WithDefaults() *base_BTPNode7 {
	this := base_BTPNode7{}
	return &this
}

// GetAtomic returns the Atomic field value if set, zero value otherwise.
func (o *base_BTPNode7) GetAtomic() bool {
	if o == nil || o.Atomic == nil {
		var ret bool
		return ret
	}
	return *o.Atomic
}

// GetAtomicOk returns a tuple with the Atomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetAtomicOk() (*bool, bool) {
	if o == nil || o.Atomic == nil {
		return nil, false
	}
	return o.Atomic, true
}

// HasAtomic returns a boolean if a field has been set.
func (o *base_BTPNode7) HasAtomic() bool {
	if o != nil && o.Atomic != nil {
		return true
	}

	return false
}

// SetAtomic gets a reference to the given bool and assigns it to the Atomic field.
func (o *base_BTPNode7) SetAtomic(v bool) {
	o.Atomic = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTPNode7) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTPNode7) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTPNode7) SetBtType(v string) {
	o.BtType = &v
}

// GetDocumentationType returns the DocumentationType field value if set, zero value otherwise.
func (o *base_BTPNode7) GetDocumentationType() GBTPDefinitionType {
	if o == nil || o.DocumentationType == nil {
		var ret GBTPDefinitionType
		return ret
	}
	return *o.DocumentationType
}

// GetDocumentationTypeOk returns a tuple with the DocumentationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetDocumentationTypeOk() (*GBTPDefinitionType, bool) {
	if o == nil || o.DocumentationType == nil {
		return nil, false
	}
	return o.DocumentationType, true
}

// HasDocumentationType returns a boolean if a field has been set.
func (o *base_BTPNode7) HasDocumentationType() bool {
	if o != nil && o.DocumentationType != nil {
		return true
	}

	return false
}

// SetDocumentationType gets a reference to the given GBTPDefinitionType and assigns it to the DocumentationType field.
func (o *base_BTPNode7) SetDocumentationType(v GBTPDefinitionType) {
	o.DocumentationType = &v
}

// GetEndSourceLocation returns the EndSourceLocation field value if set, zero value otherwise.
func (o *base_BTPNode7) GetEndSourceLocation() int32 {
	if o == nil || o.EndSourceLocation == nil {
		var ret int32
		return ret
	}
	return *o.EndSourceLocation
}

// GetEndSourceLocationOk returns a tuple with the EndSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetEndSourceLocationOk() (*int32, bool) {
	if o == nil || o.EndSourceLocation == nil {
		return nil, false
	}
	return o.EndSourceLocation, true
}

// HasEndSourceLocation returns a boolean if a field has been set.
func (o *base_BTPNode7) HasEndSourceLocation() bool {
	if o != nil && o.EndSourceLocation != nil {
		return true
	}

	return false
}

// SetEndSourceLocation gets a reference to the given int32 and assigns it to the EndSourceLocation field.
func (o *base_BTPNode7) SetEndSourceLocation(v int32) {
	o.EndSourceLocation = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *base_BTPNode7) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *base_BTPNode7) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *base_BTPNode7) SetNodeId(v string) {
	o.NodeId = &v
}

// GetShortDescriptor returns the ShortDescriptor field value if set, zero value otherwise.
func (o *base_BTPNode7) GetShortDescriptor() string {
	if o == nil || o.ShortDescriptor == nil {
		var ret string
		return ret
	}
	return *o.ShortDescriptor
}

// GetShortDescriptorOk returns a tuple with the ShortDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetShortDescriptorOk() (*string, bool) {
	if o == nil || o.ShortDescriptor == nil {
		return nil, false
	}
	return o.ShortDescriptor, true
}

// HasShortDescriptor returns a boolean if a field has been set.
func (o *base_BTPNode7) HasShortDescriptor() bool {
	if o != nil && o.ShortDescriptor != nil {
		return true
	}

	return false
}

// SetShortDescriptor gets a reference to the given string and assigns it to the ShortDescriptor field.
func (o *base_BTPNode7) SetShortDescriptor(v string) {
	o.ShortDescriptor = &v
}

// GetSpaceAfter returns the SpaceAfter field value if set, zero value otherwise.
func (o *base_BTPNode7) GetSpaceAfter() BTPSpace10 {
	if o == nil || o.SpaceAfter == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfter
}

// GetSpaceAfterOk returns a tuple with the SpaceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetSpaceAfterOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfter == nil {
		return nil, false
	}
	return o.SpaceAfter, true
}

// HasSpaceAfter returns a boolean if a field has been set.
func (o *base_BTPNode7) HasSpaceAfter() bool {
	if o != nil && o.SpaceAfter != nil {
		return true
	}

	return false
}

// SetSpaceAfter gets a reference to the given BTPSpace10 and assigns it to the SpaceAfter field.
func (o *base_BTPNode7) SetSpaceAfter(v BTPSpace10) {
	o.SpaceAfter = &v
}

// GetSpaceBefore returns the SpaceBefore field value if set, zero value otherwise.
func (o *base_BTPNode7) GetSpaceBefore() BTPSpace10 {
	if o == nil || o.SpaceBefore == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBefore
}

// GetSpaceBeforeOk returns a tuple with the SpaceBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetSpaceBeforeOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBefore == nil {
		return nil, false
	}
	return o.SpaceBefore, true
}

// HasSpaceBefore returns a boolean if a field has been set.
func (o *base_BTPNode7) HasSpaceBefore() bool {
	if o != nil && o.SpaceBefore != nil {
		return true
	}

	return false
}

// SetSpaceBefore gets a reference to the given BTPSpace10 and assigns it to the SpaceBefore field.
func (o *base_BTPNode7) SetSpaceBefore(v BTPSpace10) {
	o.SpaceBefore = &v
}

// GetSpaceDefault returns the SpaceDefault field value if set, zero value otherwise.
func (o *base_BTPNode7) GetSpaceDefault() bool {
	if o == nil || o.SpaceDefault == nil {
		var ret bool
		return ret
	}
	return *o.SpaceDefault
}

// GetSpaceDefaultOk returns a tuple with the SpaceDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetSpaceDefaultOk() (*bool, bool) {
	if o == nil || o.SpaceDefault == nil {
		return nil, false
	}
	return o.SpaceDefault, true
}

// HasSpaceDefault returns a boolean if a field has been set.
func (o *base_BTPNode7) HasSpaceDefault() bool {
	if o != nil && o.SpaceDefault != nil {
		return true
	}

	return false
}

// SetSpaceDefault gets a reference to the given bool and assigns it to the SpaceDefault field.
func (o *base_BTPNode7) SetSpaceDefault(v bool) {
	o.SpaceDefault = &v
}

// GetStartSourceLocation returns the StartSourceLocation field value if set, zero value otherwise.
func (o *base_BTPNode7) GetStartSourceLocation() int32 {
	if o == nil || o.StartSourceLocation == nil {
		var ret int32
		return ret
	}
	return *o.StartSourceLocation
}

// GetStartSourceLocationOk returns a tuple with the StartSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPNode7) GetStartSourceLocationOk() (*int32, bool) {
	if o == nil || o.StartSourceLocation == nil {
		return nil, false
	}
	return o.StartSourceLocation, true
}

// HasStartSourceLocation returns a boolean if a field has been set.
func (o *base_BTPNode7) HasStartSourceLocation() bool {
	if o != nil && o.StartSourceLocation != nil {
		return true
	}

	return false
}

// SetStartSourceLocation gets a reference to the given int32 and assigns it to the StartSourceLocation field.
func (o *base_BTPNode7) SetStartSourceLocation(v int32) {
	o.StartSourceLocation = &v
}

func (o base_BTPNode7) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Atomic != nil {
		toSerialize["atomic"] = o.Atomic
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.DocumentationType != nil {
		toSerialize["documentationType"] = o.DocumentationType
	}
	if o.EndSourceLocation != nil {
		toSerialize["endSourceLocation"] = o.EndSourceLocation
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.ShortDescriptor != nil {
		toSerialize["shortDescriptor"] = o.ShortDescriptor
	}
	if o.SpaceAfter != nil {
		toSerialize["spaceAfter"] = o.SpaceAfter
	}
	if o.SpaceBefore != nil {
		toSerialize["spaceBefore"] = o.SpaceBefore
	}
	if o.SpaceDefault != nil {
		toSerialize["spaceDefault"] = o.SpaceDefault
	}
	if o.StartSourceLocation != nil {
		toSerialize["startSourceLocation"] = o.StartSourceLocation
	}
	return json.Marshal(toSerialize)
}

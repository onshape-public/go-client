/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// Node struct for Node
type Node struct {
	Camera      *int32                            `json:"camera,omitempty"`
	Children    []int32                           `json:"children,omitempty"`
	Extensions  map[string]map[string]interface{} `json:"extensions,omitempty"`
	Extras      map[string]interface{}            `json:"extras,omitempty"`
	Matrix      []float32                         `json:"matrix,omitempty"`
	Mesh        *int32                            `json:"mesh,omitempty"`
	Name        *string                           `json:"name,omitempty"`
	Rotation    []float32                         `json:"rotation,omitempty"`
	Scale       []float32                         `json:"scale,omitempty"`
	Skin        *int32                            `json:"skin,omitempty"`
	Translation []float32                         `json:"translation,omitempty"`
	Weights     []float32                         `json:"weights,omitempty"`
}

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode() *Node {
	this := Node{}
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	return &this
}

// GetCamera returns the Camera field value if set, zero value otherwise.
func (o *Node) GetCamera() int32 {
	if o == nil || o.Camera == nil {
		var ret int32
		return ret
	}
	return *o.Camera
}

// GetCameraOk returns a tuple with the Camera field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCameraOk() (*int32, bool) {
	if o == nil || o.Camera == nil {
		return nil, false
	}
	return o.Camera, true
}

// HasCamera returns a boolean if a field has been set.
func (o *Node) HasCamera() bool {
	if o != nil && o.Camera != nil {
		return true
	}

	return false
}

// SetCamera gets a reference to the given int32 and assigns it to the Camera field.
func (o *Node) SetCamera(v int32) {
	o.Camera = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Node) GetChildren() []int32 {
	if o == nil || o.Children == nil {
		var ret []int32
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetChildrenOk() ([]int32, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Node) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []int32 and assigns it to the Children field.
func (o *Node) SetChildren(v []int32) {
	o.Children = v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Node) GetExtensions() map[string]map[string]interface{} {
	if o == nil || o.Extensions == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetExtensionsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Node) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given map[string]map[string]interface{} and assigns it to the Extensions field.
func (o *Node) SetExtensions(v map[string]map[string]interface{}) {
	o.Extensions = v
}

// GetExtras returns the Extras field value if set, zero value otherwise.
func (o *Node) GetExtras() map[string]interface{} {
	if o == nil || o.Extras == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Extras
}

// GetExtrasOk returns a tuple with the Extras field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetExtrasOk() (map[string]interface{}, bool) {
	if o == nil || o.Extras == nil {
		return nil, false
	}
	return o.Extras, true
}

// HasExtras returns a boolean if a field has been set.
func (o *Node) HasExtras() bool {
	if o != nil && o.Extras != nil {
		return true
	}

	return false
}

// SetExtras gets a reference to the given map[string]interface{} and assigns it to the Extras field.
func (o *Node) SetExtras(v map[string]interface{}) {
	o.Extras = v
}

// GetMatrix returns the Matrix field value if set, zero value otherwise.
func (o *Node) GetMatrix() []float32 {
	if o == nil || o.Matrix == nil {
		var ret []float32
		return ret
	}
	return o.Matrix
}

// GetMatrixOk returns a tuple with the Matrix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetMatrixOk() ([]float32, bool) {
	if o == nil || o.Matrix == nil {
		return nil, false
	}
	return o.Matrix, true
}

// HasMatrix returns a boolean if a field has been set.
func (o *Node) HasMatrix() bool {
	if o != nil && o.Matrix != nil {
		return true
	}

	return false
}

// SetMatrix gets a reference to the given []float32 and assigns it to the Matrix field.
func (o *Node) SetMatrix(v []float32) {
	o.Matrix = v
}

// GetMesh returns the Mesh field value if set, zero value otherwise.
func (o *Node) GetMesh() int32 {
	if o == nil || o.Mesh == nil {
		var ret int32
		return ret
	}
	return *o.Mesh
}

// GetMeshOk returns a tuple with the Mesh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetMeshOk() (*int32, bool) {
	if o == nil || o.Mesh == nil {
		return nil, false
	}
	return o.Mesh, true
}

// HasMesh returns a boolean if a field has been set.
func (o *Node) HasMesh() bool {
	if o != nil && o.Mesh != nil {
		return true
	}

	return false
}

// SetMesh gets a reference to the given int32 and assigns it to the Mesh field.
func (o *Node) SetMesh(v int32) {
	o.Mesh = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Node) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Node) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Node) SetName(v string) {
	o.Name = &v
}

// GetRotation returns the Rotation field value if set, zero value otherwise.
func (o *Node) GetRotation() []float32 {
	if o == nil || o.Rotation == nil {
		var ret []float32
		return ret
	}
	return o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetRotationOk() ([]float32, bool) {
	if o == nil || o.Rotation == nil {
		return nil, false
	}
	return o.Rotation, true
}

// HasRotation returns a boolean if a field has been set.
func (o *Node) HasRotation() bool {
	if o != nil && o.Rotation != nil {
		return true
	}

	return false
}

// SetRotation gets a reference to the given []float32 and assigns it to the Rotation field.
func (o *Node) SetRotation(v []float32) {
	o.Rotation = v
}

// GetScale returns the Scale field value if set, zero value otherwise.
func (o *Node) GetScale() []float32 {
	if o == nil || o.Scale == nil {
		var ret []float32
		return ret
	}
	return o.Scale
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetScaleOk() ([]float32, bool) {
	if o == nil || o.Scale == nil {
		return nil, false
	}
	return o.Scale, true
}

// HasScale returns a boolean if a field has been set.
func (o *Node) HasScale() bool {
	if o != nil && o.Scale != nil {
		return true
	}

	return false
}

// SetScale gets a reference to the given []float32 and assigns it to the Scale field.
func (o *Node) SetScale(v []float32) {
	o.Scale = v
}

// GetSkin returns the Skin field value if set, zero value otherwise.
func (o *Node) GetSkin() int32 {
	if o == nil || o.Skin == nil {
		var ret int32
		return ret
	}
	return *o.Skin
}

// GetSkinOk returns a tuple with the Skin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetSkinOk() (*int32, bool) {
	if o == nil || o.Skin == nil {
		return nil, false
	}
	return o.Skin, true
}

// HasSkin returns a boolean if a field has been set.
func (o *Node) HasSkin() bool {
	if o != nil && o.Skin != nil {
		return true
	}

	return false
}

// SetSkin gets a reference to the given int32 and assigns it to the Skin field.
func (o *Node) SetSkin(v int32) {
	o.Skin = &v
}

// GetTranslation returns the Translation field value if set, zero value otherwise.
func (o *Node) GetTranslation() []float32 {
	if o == nil || o.Translation == nil {
		var ret []float32
		return ret
	}
	return o.Translation
}

// GetTranslationOk returns a tuple with the Translation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetTranslationOk() ([]float32, bool) {
	if o == nil || o.Translation == nil {
		return nil, false
	}
	return o.Translation, true
}

// HasTranslation returns a boolean if a field has been set.
func (o *Node) HasTranslation() bool {
	if o != nil && o.Translation != nil {
		return true
	}

	return false
}

// SetTranslation gets a reference to the given []float32 and assigns it to the Translation field.
func (o *Node) SetTranslation(v []float32) {
	o.Translation = v
}

// GetWeights returns the Weights field value if set, zero value otherwise.
func (o *Node) GetWeights() []float32 {
	if o == nil || o.Weights == nil {
		var ret []float32
		return ret
	}
	return o.Weights
}

// GetWeightsOk returns a tuple with the Weights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetWeightsOk() ([]float32, bool) {
	if o == nil || o.Weights == nil {
		return nil, false
	}
	return o.Weights, true
}

// HasWeights returns a boolean if a field has been set.
func (o *Node) HasWeights() bool {
	if o != nil && o.Weights != nil {
		return true
	}

	return false
}

// SetWeights gets a reference to the given []float32 and assigns it to the Weights field.
func (o *Node) SetWeights(v []float32) {
	o.Weights = v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Camera != nil {
		toSerialize["camera"] = o.Camera
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.Extras != nil {
		toSerialize["extras"] = o.Extras
	}
	if o.Matrix != nil {
		toSerialize["matrix"] = o.Matrix
	}
	if o.Mesh != nil {
		toSerialize["mesh"] = o.Mesh
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Rotation != nil {
		toSerialize["rotation"] = o.Rotation
	}
	if o.Scale != nil {
		toSerialize["scale"] = o.Scale
	}
	if o.Skin != nil {
		toSerialize["skin"] = o.Skin
	}
	if o.Translation != nil {
		toSerialize["translation"] = o.Translation
	}
	if o.Weights != nil {
		toSerialize["weights"] = o.Weights
	}
	return json.Marshal(toSerialize)
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// GBTConstraintType the model 'GBTConstraintType'
type GBTConstraintType string

// List of GBTConstraintType
const (
	GBTConstraintTypeNone                GBTConstraintType = "NONE"
	GBTConstraintTypeCoincident          GBTConstraintType = "COINCIDENT"
	GBTConstraintTypeParallel            GBTConstraintType = "PARALLEL"
	GBTConstraintTypeVertical            GBTConstraintType = "VERTICAL"
	GBTConstraintTypeHorizontal          GBTConstraintType = "HORIZONTAL"
	GBTConstraintTypePerpendicular       GBTConstraintType = "PERPENDICULAR"
	GBTConstraintTypeConcentric          GBTConstraintType = "CONCENTRIC"
	GBTConstraintTypeMirror              GBTConstraintType = "MIRROR"
	GBTConstraintTypeMidpoint            GBTConstraintType = "MIDPOINT"
	GBTConstraintTypeTangent             GBTConstraintType = "TANGENT"
	GBTConstraintTypeEqual               GBTConstraintType = "EQUAL"
	GBTConstraintTypeLength              GBTConstraintType = "LENGTH"
	GBTConstraintTypeDistance            GBTConstraintType = "DISTANCE"
	GBTConstraintTypeAngle               GBTConstraintType = "ANGLE"
	GBTConstraintTypeRadius              GBTConstraintType = "RADIUS"
	GBTConstraintTypeNormal              GBTConstraintType = "NORMAL"
	GBTConstraintTypeFix                 GBTConstraintType = "FIX"
	GBTConstraintTypeProjected           GBTConstraintType = "PROJECTED"
	GBTConstraintTypeOffset              GBTConstraintType = "OFFSET"
	GBTConstraintTypeCircularPattern     GBTConstraintType = "CIRCULAR_PATTERN"
	GBTConstraintTypePierce              GBTConstraintType = "PIERCE"
	GBTConstraintTypeLinearPattern       GBTConstraintType = "LINEAR_PATTERN"
	GBTConstraintTypeMajorDiameter       GBTConstraintType = "MAJOR_DIAMETER"
	GBTConstraintTypeMinorDiameter       GBTConstraintType = "MINOR_DIAMETER"
	GBTConstraintTypeQuadrant            GBTConstraintType = "QUADRANT"
	GBTConstraintTypeDiameter            GBTConstraintType = "DIAMETER"
	GBTConstraintTypeSilhouetted         GBTConstraintType = "SILHOUETTED"
	GBTConstraintTypeCenterlineDimension GBTConstraintType = "CENTERLINE_DIMENSION"
	GBTConstraintTypeIntersected         GBTConstraintType = "INTERSECTED"
	GBTConstraintTypeRho                 GBTConstraintType = "RHO"
	GBTConstraintTypeEqualCurvature      GBTConstraintType = "EQUAL_CURVATURE"
	GBTConstraintTypeUnknown             GBTConstraintType = "UNKNOWN"
)

// All allowed values of GBTConstraintType enum
var AllowedGBTConstraintTypeEnumValues = []GBTConstraintType{
	"NONE",
	"COINCIDENT",
	"PARALLEL",
	"VERTICAL",
	"HORIZONTAL",
	"PERPENDICULAR",
	"CONCENTRIC",
	"MIRROR",
	"MIDPOINT",
	"TANGENT",
	"EQUAL",
	"LENGTH",
	"DISTANCE",
	"ANGLE",
	"RADIUS",
	"NORMAL",
	"FIX",
	"PROJECTED",
	"OFFSET",
	"CIRCULAR_PATTERN",
	"PIERCE",
	"LINEAR_PATTERN",
	"MAJOR_DIAMETER",
	"MINOR_DIAMETER",
	"QUADRANT",
	"DIAMETER",
	"SILHOUETTED",
	"CENTERLINE_DIMENSION",
	"INTERSECTED",
	"RHO",
	"EQUAL_CURVATURE",
	"UNKNOWN",
}

func (v *GBTConstraintType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GBTConstraintType(value)
	for _, existing := range AllowedGBTConstraintTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GBTConstraintType", value)
}

// NewGBTConstraintTypeFromValue returns a pointer to a valid GBTConstraintType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGBTConstraintTypeFromValue(v string) (*GBTConstraintType, error) {
	ev := GBTConstraintType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GBTConstraintType: valid values are %v", v, AllowedGBTConstraintTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GBTConstraintType) IsValid() bool {
	for _, existing := range AllowedGBTConstraintTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GBTConstraintType value
func (v GBTConstraintType) Ptr() *GBTConstraintType {
	return &v
}

type NullableGBTConstraintType struct {
	value *GBTConstraintType
	isSet bool
}

func (v NullableGBTConstraintType) Get() *GBTConstraintType {
	return v.value
}

func (v *NullableGBTConstraintType) Set(val *GBTConstraintType) {
	v.value = val
	v.isSet = true
}

func (v NullableGBTConstraintType) IsSet() bool {
	return v.isSet
}

func (v *NullableGBTConstraintType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGBTConstraintType(val *GBTConstraintType) *NullableGBTConstraintType {
	return &NullableGBTConstraintType{value: val, isSet: true}
}

func (v NullableGBTConstraintType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGBTConstraintType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

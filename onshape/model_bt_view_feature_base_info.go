/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTViewFeatureBaseInfo struct for BTViewFeatureBaseInfo
type BTViewFeatureBaseInfo struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewBTViewFeatureBaseInfo instantiates a new BTViewFeatureBaseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTViewFeatureBaseInfo() *BTViewFeatureBaseInfo {
	this := BTViewFeatureBaseInfo{}
	return &this
}

// NewBTViewFeatureBaseInfoWithDefaults instantiates a new BTViewFeatureBaseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTViewFeatureBaseInfoWithDefaults() *BTViewFeatureBaseInfo {
	this := BTViewFeatureBaseInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BTViewFeatureBaseInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTViewFeatureBaseInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BTViewFeatureBaseInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BTViewFeatureBaseInfo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTViewFeatureBaseInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTViewFeatureBaseInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BTViewFeatureBaseInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BTViewFeatureBaseInfo) SetName(v string) {
	o.Name = &v
}

func (o BTViewFeatureBaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableBTViewFeatureBaseInfo struct {
	value *BTViewFeatureBaseInfo
	isSet bool
}

func (v NullableBTViewFeatureBaseInfo) Get() *BTViewFeatureBaseInfo {
	return v.value
}

func (v *NullableBTViewFeatureBaseInfo) Set(val *BTViewFeatureBaseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTViewFeatureBaseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTViewFeatureBaseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTViewFeatureBaseInfo(val *BTViewFeatureBaseInfo) *NullableBTViewFeatureBaseInfo {
	return &NullableBTViewFeatureBaseInfo{value: val, isSet: true}
}

func (v NullableBTViewFeatureBaseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTViewFeatureBaseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

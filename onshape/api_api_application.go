/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// APIApplicationAPIService APIApplicationAPI service
type APIApplicationAPIService service

type ApiDeleteAppSettingsRequest struct {
	ctx        context.Context
	ApiService *APIApplicationAPIService
	uid        string
	cid        string
	key        *[]string
}

func (r ApiDeleteAppSettingsRequest) Key(key []string) ApiDeleteAppSettingsRequest {
	r.key = &key
	return r
}

func (r ApiDeleteAppSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAppSettingsExecute(r)
}

/*
DeleteAppSettings Delete a user's application preference settings.

This API is only usable with an OAuth token and only by the current user or admin.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid
	@param cid
	@return ApiDeleteAppSettingsRequest
*/
func (a *APIApplicationAPIService) DeleteAppSettings(ctx context.Context, uid string, cid string) ApiDeleteAppSettingsRequest {
	return ApiDeleteAppSettingsRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
		cid:        cid,
	}
}

// Execute executes the request
func (a *APIApplicationAPIService) DeleteAppSettingsExecute(r ApiDeleteAppSettingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApplicationAPIService.DeleteAppSettings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/applications/clients/{cid}/settings/users/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterToString(r.uid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", url.PathEscape(parameterToString(r.cid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		t := *r.key
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("key", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("key", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCompanyAppSettingsRequest struct {
	ctx        context.Context
	ApiService *APIApplicationAPIService
	cpid       string
	cid        string
	key        *[]string
}

func (r ApiDeleteCompanyAppSettingsRequest) Key(key []string) ApiDeleteCompanyAppSettingsRequest {
	r.key = &key
	return r
}

func (r ApiDeleteCompanyAppSettingsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteCompanyAppSettingsExecute(r)
}

/*
DeleteCompanyAppSettings Delete a company's application preference settings.

This API is only usable with an OAuth token and only by the current user or admin.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cpid
	@param cid
	@return ApiDeleteCompanyAppSettingsRequest
*/
func (a *APIApplicationAPIService) DeleteCompanyAppSettings(ctx context.Context, cpid string, cid string) ApiDeleteCompanyAppSettingsRequest {
	return ApiDeleteCompanyAppSettingsRequest{
		ApiService: a,
		ctx:        ctx,
		cpid:       cpid,
		cid:        cid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *APIApplicationAPIService) DeleteCompanyAppSettingsExecute(r ApiDeleteCompanyAppSettingsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApplicationAPIService.DeleteCompanyAppSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/applications/clients/{cid}/settings/companies/{cpid}"
	localVarPath = strings.Replace(localVarPath, "{"+"cpid"+"}", url.PathEscape(parameterToString(r.cpid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", url.PathEscape(parameterToString(r.cid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		t := *r.key
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("key", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("key", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string]interface{}
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApplicableExtensionsForClientRequest struct {
	ctx            context.Context
	ApiService     *APIApplicationAPIService
	uid            string
	cid            string
	validPurchases *bool
}

func (r ApiGetApplicableExtensionsForClientRequest) ValidPurchases(validPurchases bool) ApiGetApplicableExtensionsForClientRequest {
	r.validPurchases = &validPurchases
	return r
}

func (r ApiGetApplicableExtensionsForClientRequest) Execute() ([]BTAPIApplicationExtensionInfo, *http.Response, error) {
	return r.ApiService.GetApplicableExtensionsForClientExecute(r)
}

/*
GetApplicableExtensionsForClient Get a list of the client extensions the specified user has granted/accepted terms for.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid
	@param cid
	@return ApiGetApplicableExtensionsForClientRequest
*/
func (a *APIApplicationAPIService) GetApplicableExtensionsForClient(ctx context.Context, uid string, cid string) ApiGetApplicableExtensionsForClientRequest {
	return ApiGetApplicableExtensionsForClientRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
		cid:        cid,
	}
}

// Execute executes the request
//
//	@return []BTAPIApplicationExtensionInfo
func (a *APIApplicationAPIService) GetApplicableExtensionsForClientExecute(r ApiGetApplicableExtensionsForClientRequest) ([]BTAPIApplicationExtensionInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BTAPIApplicationExtensionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApplicationAPIService.GetApplicableExtensionsForClient")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/applications/extensions/user/{uid}/client/{cid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterToString(r.uid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", url.PathEscape(parameterToString(r.cid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.validPurchases != nil {
		localVarQueryParams.Add("validPurchases", parameterToString(*r.validPurchases, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v []BTAPIApplicationExtensionInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyAppSettingsRequest struct {
	ctx        context.Context
	ApiService *APIApplicationAPIService
	cpid       string
	cid        string
	documentId *string
	key        *[]string
}

// A document owned by the company. Read access to this document allows read access to its owning company&#39;s settings.
func (r ApiGetCompanyAppSettingsRequest) DocumentId(documentId string) ApiGetCompanyAppSettingsRequest {
	r.documentId = &documentId
	return r
}

func (r ApiGetCompanyAppSettingsRequest) Key(key []string) ApiGetCompanyAppSettingsRequest {
	r.key = &key
	return r
}

func (r ApiGetCompanyAppSettingsRequest) Execute() (*BTUserAppSettingsInfo, *http.Response, error) {
	return r.ApiService.GetCompanyAppSettingsExecute(r)
}

/*
GetCompanyAppSettings Get company-level preference settings for an application.

This API is only usable with an OAuth token and only by the current user or admin.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cpid
	@param cid
	@return ApiGetCompanyAppSettingsRequest
*/
func (a *APIApplicationAPIService) GetCompanyAppSettings(ctx context.Context, cpid string, cid string) ApiGetCompanyAppSettingsRequest {
	return ApiGetCompanyAppSettingsRequest{
		ApiService: a,
		ctx:        ctx,
		cpid:       cpid,
		cid:        cid,
	}
}

// Execute executes the request
//
//	@return BTUserAppSettingsInfo
func (a *APIApplicationAPIService) GetCompanyAppSettingsExecute(r ApiGetCompanyAppSettingsRequest) (*BTUserAppSettingsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BTUserAppSettingsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApplicationAPIService.GetCompanyAppSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/applications/clients/{cid}/settings/companies/{cpid}"
	localVarPath = strings.Replace(localVarPath, "{"+"cpid"+"}", url.PathEscape(parameterToString(r.cpid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", url.PathEscape(parameterToString(r.cid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.documentId != nil {
		localVarQueryParams.Add("documentId", parameterToString(*r.documentId, ""))
	}
	if r.key != nil {
		t := *r.key
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("key", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("key", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v BTUserAppSettingsInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserAppSettingsRequest struct {
	ctx        context.Context
	ApiService *APIApplicationAPIService
	uid        string
	cid        string
	key        *[]string
}

func (r ApiGetUserAppSettingsRequest) Key(key []string) ApiGetUserAppSettingsRequest {
	r.key = &key
	return r
}

func (r ApiGetUserAppSettingsRequest) Execute() (*BTUserAppSettingsInfo, *http.Response, error) {
	return r.ApiService.GetUserAppSettingsExecute(r)
}

/*
GetUserAppSettings Get user-level preference settings for an application.

This API is only usable with an OAuth token and only by the current user or admin.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid
	@param cid
	@return ApiGetUserAppSettingsRequest
*/
func (a *APIApplicationAPIService) GetUserAppSettings(ctx context.Context, uid string, cid string) ApiGetUserAppSettingsRequest {
	return ApiGetUserAppSettingsRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
		cid:        cid,
	}
}

// Execute executes the request
//
//	@return BTUserAppSettingsInfo
func (a *APIApplicationAPIService) GetUserAppSettingsExecute(r ApiGetUserAppSettingsRequest) (*BTUserAppSettingsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BTUserAppSettingsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApplicationAPIService.GetUserAppSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/applications/clients/{cid}/settings/users/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterToString(r.uid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", url.PathEscape(parameterToString(r.cid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		t := *r.key
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("key", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("key", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v BTUserAppSettingsInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAppCompanySettingsRequest struct {
	ctx                     context.Context
	ApiService              *APIApplicationAPIService
	cpid                    string
	cid                     string
	bTUserAppSettingsParams *BTUserAppSettingsParams
}

func (r ApiUpdateAppCompanySettingsRequest) BTUserAppSettingsParams(bTUserAppSettingsParams BTUserAppSettingsParams) ApiUpdateAppCompanySettingsRequest {
	r.bTUserAppSettingsParams = &bTUserAppSettingsParams
	return r
}

func (r ApiUpdateAppCompanySettingsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.UpdateAppCompanySettingsExecute(r)
}

/*
UpdateAppCompanySettings Update company preference settings for an application.

This API is only usable with an OAuth token and only by the current user or admin.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cpid
	@param cid
	@return ApiUpdateAppCompanySettingsRequest
*/
func (a *APIApplicationAPIService) UpdateAppCompanySettings(ctx context.Context, cpid string, cid string) ApiUpdateAppCompanySettingsRequest {
	return ApiUpdateAppCompanySettingsRequest{
		ApiService: a,
		ctx:        ctx,
		cpid:       cpid,
		cid:        cid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *APIApplicationAPIService) UpdateAppCompanySettingsExecute(r ApiUpdateAppCompanySettingsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApplicationAPIService.UpdateAppCompanySettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/applications/clients/{cid}/settings/companies/{cpid}"
	localVarPath = strings.Replace(localVarPath, "{"+"cpid"+"}", url.PathEscape(parameterToString(r.cpid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", url.PathEscape(parameterToString(r.cid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bTUserAppSettingsParams == nil {
		return localVarReturnValue, nil, reportError("bTUserAppSettingsParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTUserAppSettingsParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string]interface{}
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAppSettingsRequest struct {
	ctx                     context.Context
	ApiService              *APIApplicationAPIService
	uid                     string
	cid                     string
	bTUserAppSettingsParams *BTUserAppSettingsParams
}

func (r ApiUpdateAppSettingsRequest) BTUserAppSettingsParams(bTUserAppSettingsParams BTUserAppSettingsParams) ApiUpdateAppSettingsRequest {
	r.bTUserAppSettingsParams = &bTUserAppSettingsParams
	return r
}

func (r ApiUpdateAppSettingsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.UpdateAppSettingsExecute(r)
}

/*
UpdateAppSettings Update a user's application preference settings.

This API is only usable with an OAuth token and only by the current user or admin.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid
	@param cid
	@return ApiUpdateAppSettingsRequest
*/
func (a *APIApplicationAPIService) UpdateAppSettings(ctx context.Context, uid string, cid string) ApiUpdateAppSettingsRequest {
	return ApiUpdateAppSettingsRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
		cid:        cid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *APIApplicationAPIService) UpdateAppSettingsExecute(r ApiUpdateAppSettingsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApplicationAPIService.UpdateAppSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/applications/clients/{cid}/settings/users/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterToString(r.uid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", url.PathEscape(parameterToString(r.cid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bTUserAppSettingsParams == nil {
		return localVarReturnValue, nil, reportError("bTUserAppSettingsParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTUserAppSettingsParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string]interface{}
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := io.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

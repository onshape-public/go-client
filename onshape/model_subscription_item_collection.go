/*
Onshape REST API

The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.

API version: 1.171.24257-687de06de652
Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// SubscriptionItemCollection struct for SubscriptionItemCollection
type SubscriptionItemCollection struct {
	Count          *int32                            `json:"count,omitempty"`
	Data           []SubscriptionItem                `json:"data,omitempty"`
	HasMore        *bool                             `json:"hasMore,omitempty"`
	RequestOptions *RequestOptions                   `json:"requestOptions,omitempty"`
	RequestParams  map[string]map[string]interface{} `json:"requestParams,omitempty"`
	TotalCount     *int32                            `json:"totalCount,omitempty"`
	Url            *string                           `json:"url,omitempty"`
}

// NewSubscriptionItemCollection instantiates a new SubscriptionItemCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionItemCollection() *SubscriptionItemCollection {
	this := SubscriptionItemCollection{}
	return &this
}

// NewSubscriptionItemCollectionWithDefaults instantiates a new SubscriptionItemCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionItemCollectionWithDefaults() *SubscriptionItemCollection {
	this := SubscriptionItemCollection{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SubscriptionItemCollection) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionItemCollection) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SubscriptionItemCollection) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *SubscriptionItemCollection) SetCount(v int32) {
	o.Count = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SubscriptionItemCollection) GetData() []SubscriptionItem {
	if o == nil || o.Data == nil {
		var ret []SubscriptionItem
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionItemCollection) GetDataOk() ([]SubscriptionItem, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SubscriptionItemCollection) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []SubscriptionItem and assigns it to the Data field.
func (o *SubscriptionItemCollection) SetData(v []SubscriptionItem) {
	o.Data = v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *SubscriptionItemCollection) GetHasMore() bool {
	if o == nil || o.HasMore == nil {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionItemCollection) GetHasMoreOk() (*bool, bool) {
	if o == nil || o.HasMore == nil {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *SubscriptionItemCollection) HasHasMore() bool {
	if o != nil && o.HasMore != nil {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *SubscriptionItemCollection) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetRequestOptions returns the RequestOptions field value if set, zero value otherwise.
func (o *SubscriptionItemCollection) GetRequestOptions() RequestOptions {
	if o == nil || o.RequestOptions == nil {
		var ret RequestOptions
		return ret
	}
	return *o.RequestOptions
}

// GetRequestOptionsOk returns a tuple with the RequestOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionItemCollection) GetRequestOptionsOk() (*RequestOptions, bool) {
	if o == nil || o.RequestOptions == nil {
		return nil, false
	}
	return o.RequestOptions, true
}

// HasRequestOptions returns a boolean if a field has been set.
func (o *SubscriptionItemCollection) HasRequestOptions() bool {
	if o != nil && o.RequestOptions != nil {
		return true
	}

	return false
}

// SetRequestOptions gets a reference to the given RequestOptions and assigns it to the RequestOptions field.
func (o *SubscriptionItemCollection) SetRequestOptions(v RequestOptions) {
	o.RequestOptions = &v
}

// GetRequestParams returns the RequestParams field value if set, zero value otherwise.
func (o *SubscriptionItemCollection) GetRequestParams() map[string]map[string]interface{} {
	if o == nil || o.RequestParams == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.RequestParams
}

// GetRequestParamsOk returns a tuple with the RequestParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionItemCollection) GetRequestParamsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.RequestParams == nil {
		return nil, false
	}
	return o.RequestParams, true
}

// HasRequestParams returns a boolean if a field has been set.
func (o *SubscriptionItemCollection) HasRequestParams() bool {
	if o != nil && o.RequestParams != nil {
		return true
	}

	return false
}

// SetRequestParams gets a reference to the given map[string]map[string]interface{} and assigns it to the RequestParams field.
func (o *SubscriptionItemCollection) SetRequestParams(v map[string]map[string]interface{}) {
	o.RequestParams = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *SubscriptionItemCollection) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionItemCollection) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *SubscriptionItemCollection) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *SubscriptionItemCollection) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SubscriptionItemCollection) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionItemCollection) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SubscriptionItemCollection) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SubscriptionItemCollection) SetUrl(v string) {
	o.Url = &v
}

func (o SubscriptionItemCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.HasMore != nil {
		toSerialize["hasMore"] = o.HasMore
	}
	if o.RequestOptions != nil {
		toSerialize["requestOptions"] = o.RequestOptions
	}
	if o.RequestParams != nil {
		toSerialize["requestParams"] = o.RequestParams
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionItemCollection struct {
	value *SubscriptionItemCollection
	isSet bool
}

func (v NullableSubscriptionItemCollection) Get() *SubscriptionItemCollection {
	return v.value
}

func (v *NullableSubscriptionItemCollection) Set(val *SubscriptionItemCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionItemCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionItemCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionItemCollection(val *SubscriptionItemCollection) *NullableSubscriptionItemCollection {
	return &NullableSubscriptionItemCollection{value: val, isSet: true}
}

func (v NullableSubscriptionItemCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionItemCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

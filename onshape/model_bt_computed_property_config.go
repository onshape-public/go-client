/*
Onshape REST API

The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.

API version: 1.150.5633-5ed6b38daa6b
Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTComputedPropertyConfig struct for BTComputedPropertyConfig
type BTComputedPropertyConfig struct {
	JsonType string `json:"jsonType"`
}

// NewBTComputedPropertyConfig instantiates a new BTComputedPropertyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTComputedPropertyConfig(jsonType string) *BTComputedPropertyConfig {
	this := BTComputedPropertyConfig{}
	this.JsonType = jsonType
	return &this
}

// NewBTComputedPropertyConfigWithDefaults instantiates a new BTComputedPropertyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTComputedPropertyConfigWithDefaults() *BTComputedPropertyConfig {
	this := BTComputedPropertyConfig{}
	return &this
}

// GetJsonType returns the JsonType field value
func (o *BTComputedPropertyConfig) GetJsonType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JsonType
}

// GetJsonTypeOk returns a tuple with the JsonType field value
// and a boolean to check if the value has been set.
func (o *BTComputedPropertyConfig) GetJsonTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JsonType, true
}

// SetJsonType sets field value
func (o *BTComputedPropertyConfig) SetJsonType(v string) {
	o.JsonType = v
}

func (o BTComputedPropertyConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["jsonType"] = o.JsonType
	}
	return json.Marshal(toSerialize)
}

type NullableBTComputedPropertyConfig struct {
	value *BTComputedPropertyConfig
	isSet bool
}

func (v NullableBTComputedPropertyConfig) Get() *BTComputedPropertyConfig {
	return v.value
}

func (v *NullableBTComputedPropertyConfig) Set(val *BTComputedPropertyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBTComputedPropertyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBTComputedPropertyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTComputedPropertyConfig(val *BTComputedPropertyConfig) *NullableBTComputedPropertyConfig {
	return &NullableBTComputedPropertyConfig{value: val, isSet: true}
}

func (v NullableBTComputedPropertyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTComputedPropertyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

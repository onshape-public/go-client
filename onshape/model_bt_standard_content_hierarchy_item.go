/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTStandardContentHierarchyItem Describes a single instance of standard content.
type BTStandardContentHierarchyItem struct {
	// Category for the corresponding standard content.
	Category *string `json:"category,omitempty"`
	// Class for the corresponding standard content.
	Class *string `json:"class,omitempty"`
	// Component for the corresponding standard content.
	Component *string `json:"component,omitempty"`
	// Document ID for the corresponding standard content.
	Id *string `json:"id,omitempty"`
	// Standard for the corresponding standard content.
	Standard *string `json:"standard,omitempty"`
}

// NewBTStandardContentHierarchyItem instantiates a new BTStandardContentHierarchyItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTStandardContentHierarchyItem() *BTStandardContentHierarchyItem {
	this := BTStandardContentHierarchyItem{}
	return &this
}

// NewBTStandardContentHierarchyItemWithDefaults instantiates a new BTStandardContentHierarchyItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTStandardContentHierarchyItemWithDefaults() *BTStandardContentHierarchyItem {
	this := BTStandardContentHierarchyItem{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *BTStandardContentHierarchyItem) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTStandardContentHierarchyItem) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *BTStandardContentHierarchyItem) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *BTStandardContentHierarchyItem) SetCategory(v string) {
	o.Category = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *BTStandardContentHierarchyItem) GetClass() string {
	if o == nil || o.Class == nil {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTStandardContentHierarchyItem) GetClassOk() (*string, bool) {
	if o == nil || o.Class == nil {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *BTStandardContentHierarchyItem) HasClass() bool {
	if o != nil && o.Class != nil {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *BTStandardContentHierarchyItem) SetClass(v string) {
	o.Class = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *BTStandardContentHierarchyItem) GetComponent() string {
	if o == nil || o.Component == nil {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTStandardContentHierarchyItem) GetComponentOk() (*string, bool) {
	if o == nil || o.Component == nil {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *BTStandardContentHierarchyItem) HasComponent() bool {
	if o != nil && o.Component != nil {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *BTStandardContentHierarchyItem) SetComponent(v string) {
	o.Component = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BTStandardContentHierarchyItem) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTStandardContentHierarchyItem) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BTStandardContentHierarchyItem) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BTStandardContentHierarchyItem) SetId(v string) {
	o.Id = &v
}

// GetStandard returns the Standard field value if set, zero value otherwise.
func (o *BTStandardContentHierarchyItem) GetStandard() string {
	if o == nil || o.Standard == nil {
		var ret string
		return ret
	}
	return *o.Standard
}

// GetStandardOk returns a tuple with the Standard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTStandardContentHierarchyItem) GetStandardOk() (*string, bool) {
	if o == nil || o.Standard == nil {
		return nil, false
	}
	return o.Standard, true
}

// HasStandard returns a boolean if a field has been set.
func (o *BTStandardContentHierarchyItem) HasStandard() bool {
	if o != nil && o.Standard != nil {
		return true
	}

	return false
}

// SetStandard gets a reference to the given string and assigns it to the Standard field.
func (o *BTStandardContentHierarchyItem) SetStandard(v string) {
	o.Standard = &v
}

func (o BTStandardContentHierarchyItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Class != nil {
		toSerialize["class"] = o.Class
	}
	if o.Component != nil {
		toSerialize["component"] = o.Component
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Standard != nil {
		toSerialize["standard"] = o.Standard
	}
	return json.Marshal(toSerialize)
}

type NullableBTStandardContentHierarchyItem struct {
	value *BTStandardContentHierarchyItem
	isSet bool
}

func (v NullableBTStandardContentHierarchyItem) Get() *BTStandardContentHierarchyItem {
	return v.value
}

func (v *NullableBTStandardContentHierarchyItem) Set(val *BTStandardContentHierarchyItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBTStandardContentHierarchyItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBTStandardContentHierarchyItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTStandardContentHierarchyItem(val *BTStandardContentHierarchyItem) *NullableBTStandardContentHierarchyItem {
	return &NullableBTStandardContentHierarchyItem{value: val, isSet: true}
}

func (v NullableBTStandardContentHierarchyItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTStandardContentHierarchyItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

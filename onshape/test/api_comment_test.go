/*
Onshape REST API

Testing CommentApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_CommentApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CommentApiService AddAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string

		resp, httpRes, err := apiClient.CommentApi.AddAttachment(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService CreateComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CommentApi.CreateComment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService DeleteAttachments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string

		resp, httpRes, err := apiClient.CommentApi.DeleteAttachments(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService DeleteComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string

		resp, httpRes, err := apiClient.CommentApi.DeleteComment(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService GetAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var fdid string
		var ext string

		resp, httpRes, err := apiClient.CommentApi.GetAttachment(context.Background(), cid, fdid, ext).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService GetComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string

		resp, httpRes, err := apiClient.CommentApi.GetComment(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService GetComments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CommentApi.GetComments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService Reopen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string

		resp, httpRes, err := apiClient.CommentApi.Reopen(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService Resolve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string

		resp, httpRes, err := apiClient.CommentApi.Resolve(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentApiService UpdateComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string

		resp, httpRes, err := apiClient.CommentApi.UpdateComment(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

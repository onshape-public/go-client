/*
Onshape REST API

Testing PartStudioApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_PartStudioApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PartStudioApiService AddPartStudioFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.AddPartStudioFeature(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService ComparePartStudios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.ComparePartStudios(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService CreatePartStudio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.PartStudioApi.CreatePartStudio(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService CreatePartStudioTranslation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wv string
		var wvid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.CreatePartStudioTranslation(context.Background(), did, wv, wvid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService DeletePartStudioFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string
		var fid string

		resp, httpRes, err := apiClient.PartStudioApi.DeletePartStudioFeature(context.Background(), did, wid, eid, fid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService EvalFeatureScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.EvalFeatureScript(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService ExportParasolid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		httpRes, err := apiClient.PartStudioApi.ExportParasolid(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService ExportPartStudioGltf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.ExportPartStudioGltf(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService ExportPartStudioStl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		httpRes, err := apiClient.PartStudioApi.ExportPartStudioStl(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetFeatureScriptRepresentation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetFeatureScriptRepresentation(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetFeatureScriptTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetFeatureScriptTable(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioBodyDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioBodyDetails(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioBoundingBoxes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioBoundingBoxes(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioEdges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioEdges(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioFaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioFaces(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioFeatureSpecs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioFeatureSpecs(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioFeatures(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioMassProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioMassProperties(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioNamedViews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioNamedViews(context.Background(), did, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService GetPartStudioShadedViews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.GetPartStudioShadedViews(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService TranslateIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.TranslateIds(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService UpdateFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.UpdateFeatures(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService UpdatePartStudioFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string
		var fid string

		resp, httpRes, err := apiClient.PartStudioApi.UpdatePartStudioFeature(context.Background(), did, wid, eid, fid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartStudioApiService UpdateRollback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.PartStudioApi.UpdateRollback(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
Onshape REST API

Testing WebhookApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_WebhookApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WebhookApiService CreateWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WebhookApi.CreateWebhook(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhookApiService GetWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookid string

		resp, httpRes, err := apiClient.WebhookApi.GetWebhook(context.Background(), webhookid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhookApiService GetWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WebhookApi.GetWebhooks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhookApiService PingWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookid string

		resp, httpRes, err := apiClient.WebhookApi.PingWebhook(context.Background(), webhookid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhookApiService UnregisterWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookid string

		resp, httpRes, err := apiClient.WebhookApi.UnregisterWebhook(context.Background(), webhookid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhookApiService UpdateWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookid string

		resp, httpRes, err := apiClient.WebhookApi.UpdateWebhook(context.Background(), webhookid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
Onshape REST API

Testing AssemblyApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_AssemblyApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AssemblyApiService AddFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.AddFeature(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService CreateAssembly", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.AssemblyApi.CreateAssembly(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService CreateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.CreateInstance(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService DeleteFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string
		var fid string

		resp, httpRes, err := apiClient.AssemblyApi.DeleteFeature(context.Background(), did, wid, eid, fid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService DeleteInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wid string
		var nid string

		resp, httpRes, err := apiClient.AssemblyApi.DeleteInstance(context.Background(), did, eid, wid, nid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetAssemblyBoundingBoxes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetAssemblyBoundingBoxes(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetAssemblyDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetAssemblyDefinition(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetAssemblyMassProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetAssemblyMassProperties(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetAssemblyShadedViews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetAssemblyShadedViews(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetBillOfMaterials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetBillOfMaterials(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetExplodedViews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetExplodedViews(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetFeatureSpecs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetFeatureSpecs(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetFeatures(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetNamedPositions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetNamedPositions(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetNamedViews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetNamedViews(context.Background(), did, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService GetOrCreateBillOfMaterialsElement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.GetOrCreateBillOfMaterialsElement(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService InsertTransformedInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wid string

		resp, httpRes, err := apiClient.AssemblyApi.InsertTransformedInstances(context.Background(), did, eid, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService Modify", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.Modify(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService TransformOccurrences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wid string

		resp, httpRes, err := apiClient.AssemblyApi.TransformOccurrences(context.Background(), did, eid, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService TranslateFormat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wv string
		var wvid string
		var eid string

		resp, httpRes, err := apiClient.AssemblyApi.TranslateFormat(context.Background(), did, wv, wvid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssemblyApiService UpdateFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string
		var fid string

		resp, httpRes, err := apiClient.AssemblyApi.UpdateFeature(context.Background(), did, wid, eid, fid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
Onshape REST API

Testing RevisionApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_RevisionApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RevisionApiService DeleteRevisionHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var pnum string
		var et string

		resp, httpRes, err := apiClient.RevisionApi.DeleteRevisionHistory(context.Background(), cid, pnum, et).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionApiService EnumerateRevisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string

		resp, httpRes, err := apiClient.RevisionApi.EnumerateRevisions(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionApiService GetAllInDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.RevisionApi.GetAllInDocument(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionApiService GetAllInDocumentVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var vid string

		resp, httpRes, err := apiClient.RevisionApi.GetAllInDocumentVersion(context.Background(), did, vid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionApiService GetLatestInDocumentOrCompany", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cd string
		var cdid string
		var pnum string

		resp, httpRes, err := apiClient.RevisionApi.GetLatestInDocumentOrCompany(context.Background(), cd, cdid, pnum).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionApiService GetRevisionByPartNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var pnum string

		resp, httpRes, err := apiClient.RevisionApi.GetRevisionByPartNumber(context.Background(), cid, pnum).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionApiService GetRevisionHistoryInCompanyByElementId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var did string
		var wv string
		var wvid string
		var eid string

		resp, httpRes, err := apiClient.RevisionApi.GetRevisionHistoryInCompanyByElementId(context.Background(), cid, did, wv, wvid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionApiService GetRevisionHistoryInCompanyByPartId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var did string
		var wv string
		var wvid string
		var eid string
		var pid string

		resp, httpRes, err := apiClient.RevisionApi.GetRevisionHistoryInCompanyByPartId(context.Background(), cid, did, wv, wvid, eid, pid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionApiService GetRevisionHistoryInCompanyByPartNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var pnum string

		resp, httpRes, err := apiClient.RevisionApi.GetRevisionHistoryInCompanyByPartNumber(context.Background(), cid, pnum).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

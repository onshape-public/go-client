/*
Onshape REST API

Testing APIApplicationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_APIApplicationApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test APIApplicationApiService DeleteAppSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string
		var cid string

		httpRes, err := apiClient.APIApplicationApi.DeleteAppSettings(context.Background(), uid, cid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIApplicationApiService DeleteCompanyAppSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cpid string
		var cid string

		resp, httpRes, err := apiClient.APIApplicationApi.DeleteCompanyAppSettings(context.Background(), cpid, cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIApplicationApiService GetApplicableExtensionsForClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string
		var cid string

		resp, httpRes, err := apiClient.APIApplicationApi.GetApplicableExtensionsForClient(context.Background(), uid, cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIApplicationApiService GetCompanyAppSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cpid string
		var cid string

		resp, httpRes, err := apiClient.APIApplicationApi.GetCompanyAppSettings(context.Background(), cpid, cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIApplicationApiService GetUserAppSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string
		var cid string

		resp, httpRes, err := apiClient.APIApplicationApi.GetUserAppSettings(context.Background(), uid, cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIApplicationApiService UpdateAppCompanySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cpid string
		var cid string

		resp, httpRes, err := apiClient.APIApplicationApi.UpdateAppCompanySettings(context.Background(), cpid, cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIApplicationApiService UpdateAppSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string
		var cid string

		resp, httpRes, err := apiClient.APIApplicationApi.UpdateAppSettings(context.Background(), uid, cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

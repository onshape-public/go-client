/*
Onshape REST API

Testing DocumentApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_DocumentApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DocumentApiService CopyWorkspace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.DocumentApi.CopyWorkspace(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService CreateDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DocumentApi.CreateDocument(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService CreateVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.CreateVersion(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService CreateWorkspace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.CreateWorkspace(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService DeleteDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.DeleteDocument(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService DeleteWorkspace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.DocumentApi.DeleteWorkspace(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService DownloadExternalData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var fid string

		resp, httpRes, err := apiClient.DocumentApi.DownloadExternalData(context.Background(), did, fid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService Export2Json", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wv string
		var wvid string
		var eid string

		resp, httpRes, err := apiClient.DocumentApi.Export2Json(context.Background(), did, wv, wvid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetCurrentMicroversion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wv string
		var wvid string

		resp, httpRes, err := apiClient.DocumentApi.GetCurrentMicroversion(context.Background(), did, wv, wvid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.GetDocument(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetDocumentAcl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.GetDocumentAcl(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetDocumentHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wm string
		var wmid string

		resp, httpRes, err := apiClient.DocumentApi.GetDocumentHistory(context.Background(), did, wm, wmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetDocumentPermissionSet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.GetDocumentPermissionSet(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetDocumentVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.GetDocumentVersions(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetDocumentWorkspaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.GetDocumentWorkspaces(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetDocuments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DocumentApi.GetDocuments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetElementsInDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string

		resp, httpRes, err := apiClient.DocumentApi.GetElementsInDocument(context.Background(), did, wvm, wvmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetInsertables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wv string
		var wvid string

		resp, httpRes, err := apiClient.DocumentApi.GetInsertables(context.Background(), did, wv, wvid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetUnitInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string

		resp, httpRes, err := apiClient.DocumentApi.GetUnitInfo(context.Background(), did, wvm, wvmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService GetVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var vid string

		resp, httpRes, err := apiClient.DocumentApi.GetVersion(context.Background(), did, vid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService MergeIntoWorkspace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.DocumentApi.MergeIntoWorkspace(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService MergePreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.DocumentApi.MergePreview(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService MoveElementsToDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.DocumentApi.MoveElementsToDocument(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService RestoreFromHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var vm string
		var vmid string

		resp, httpRes, err := apiClient.DocumentApi.RestoreFromHistory(context.Background(), did, wid, vm, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService RevertUnchangedToRevisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.DocumentApi.RevertUnchangedToRevisions(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService Search", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DocumentApi.Search(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService ShareDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.ShareDocument(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService ShareWithSupport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.ShareWithSupport(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService SyncApplicationElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.DocumentApi.SyncApplicationElements(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService UnShareDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string

		resp, httpRes, err := apiClient.DocumentApi.UnShareDocument(context.Background(), did, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService UnshareFromSupport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.UnshareFromSupport(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService UpdateDocumentAttributes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string

		resp, httpRes, err := apiClient.DocumentApi.UpdateDocumentAttributes(context.Background(), did).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DocumentApiService UpdateExternalReferencesToLatestDocuments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.DocumentApi.UpdateExternalReferencesToLatestDocuments(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

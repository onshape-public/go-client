/*
Onshape REST API

Testing AppElementApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_AppElementApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppElementApiService AbortTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wid string
		var tid string

		resp, httpRes, err := apiClient.AppElementApi.AbortTransaction(context.Background(), did, eid, wid, tid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService BulkCreateElement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.AppElementApi.BulkCreateElement(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService CommitTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.AppElementApi.CommitTransactions(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService CompareAppElementJson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AppElementApi.CompareAppElementJson(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService CreateElement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.AppElementApi.CreateElement(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService CreateReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string

		resp, httpRes, err := apiClient.AppElementApi.CreateReference(context.Background(), did, eid, wvm, wvmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService DeleteAppElementContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string
		var sid string

		resp, httpRes, err := apiClient.AppElementApi.DeleteAppElementContent(context.Background(), did, eid, wvm, wvmid, sid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService DeleteBlobSubelement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string
		var bid string

		resp, httpRes, err := apiClient.AppElementApi.DeleteBlobSubelement(context.Background(), did, wid, eid, bid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService DeleteReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string
		var rid string

		resp, httpRes, err := apiClient.AppElementApi.DeleteReference(context.Background(), did, eid, wvm, wvmid, rid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService DownloadBlobSubelement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var vm string
		var vmid string
		var eid string
		var bid string

		resp, httpRes, err := apiClient.AppElementApi.DownloadBlobSubelement(context.Background(), did, vm, vmid, eid, bid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService DownloadBlobSubelementWorkspace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string
		var bid string

		resp, httpRes, err := apiClient.AppElementApi.DownloadBlobSubelementWorkspace(context.Background(), did, wid, eid, bid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService GetAppElementHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string

		resp, httpRes, err := apiClient.AppElementApi.GetAppElementHistory(context.Background(), did, eid, wvm, wvmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService GetBlobSubelementIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string

		resp, httpRes, err := apiClient.AppElementApi.GetBlobSubelementIds(context.Background(), did, eid, wvm, wvmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService GetElementTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wid string

		resp, httpRes, err := apiClient.AppElementApi.GetElementTransactions(context.Background(), did, eid, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService GetJson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AppElementApi.GetJson(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService GetJsonPaths", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string

		resp, httpRes, err := apiClient.AppElementApi.GetJsonPaths(context.Background(), did, eid, wvm, wvmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService GetSubElementContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AppElementApi.GetSubElementContent(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService GetSubelementIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string

		resp, httpRes, err := apiClient.AppElementApi.GetSubelementIds(context.Background(), did, eid, wvm, wvmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService ResolveReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string
		var rid string

		resp, httpRes, err := apiClient.AppElementApi.ResolveReference(context.Background(), did, eid, wvm, wvmid, rid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService ResolveReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wvm string
		var wvmid string
		var eid string

		resp, httpRes, err := apiClient.AppElementApi.ResolveReferences(context.Background(), did, wvm, wvmid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService StartTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wid string

		resp, httpRes, err := apiClient.AppElementApi.StartTransaction(context.Background(), did, eid, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService UpdateAppElement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string

		resp, httpRes, err := apiClient.AppElementApi.UpdateAppElement(context.Background(), did, eid, wvm, wvmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService UpdateReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var eid string
		var wvm string
		var wvmid string
		var rid string

		resp, httpRes, err := apiClient.AppElementApi.UpdateReference(context.Background(), did, eid, wvm, wvmid, rid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppElementApiService UploadBlobSubelement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string
		var bid string

		resp, httpRes, err := apiClient.AppElementApi.UploadBlobSubelement(context.Background(), did, wid, eid, bid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

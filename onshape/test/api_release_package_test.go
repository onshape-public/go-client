/*
Onshape REST API

Testing ReleasePackageApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_ReleasePackageApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReleasePackageApiService CreateObsoletionPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var wfid string

		resp, httpRes, err := apiClient.ReleasePackageApi.CreateObsoletionPackage(context.Background(), wfid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePackageApiService CreateReleasePackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var wfid string

		resp, httpRes, err := apiClient.ReleasePackageApi.CreateReleasePackage(context.Background(), wfid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePackageApiService GetCompanyReleaseWorkflow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReleasePackageApi.GetCompanyReleaseWorkflow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePackageApiService GetReleasePackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpid string

		resp, httpRes, err := apiClient.ReleasePackageApi.GetReleasePackage(context.Background(), rpid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleasePackageApiService UpdateReleasePackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpid string

		resp, httpRes, err := apiClient.ReleasePackageApi.UpdateReleasePackage(context.Background(), rpid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

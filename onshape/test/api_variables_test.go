/*
Onshape REST API

Testing VariablesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onshape

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onshape_VariablesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VariablesApiService CreateVariableStudio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string

		resp, httpRes, err := apiClient.VariablesApi.CreateVariableStudio(context.Background(), did, wid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VariablesApiService GetVariableStudioReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wv string
		var wvid string
		var eid string

		resp, httpRes, err := apiClient.VariablesApi.GetVariableStudioReferences(context.Background(), did, wv, wvid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VariablesApiService GetVariableStudioScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wv string
		var wvid string
		var eid string

		resp, httpRes, err := apiClient.VariablesApi.GetVariableStudioScope(context.Background(), did, wv, wvid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VariablesApiService GetVariables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wv string
		var wvid string
		var eid string

		resp, httpRes, err := apiClient.VariablesApi.GetVariables(context.Background(), did, wv, wvid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VariablesApiService SetVariableStudioReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.VariablesApi.SetVariableStudioReferences(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VariablesApiService SetVariableStudioScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.VariablesApi.SetVariableStudioScope(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VariablesApiService SetVariables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var did string
		var wid string
		var eid string

		resp, httpRes, err := apiClient.VariablesApi.SetVariables(context.Background(), did, wid, eid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

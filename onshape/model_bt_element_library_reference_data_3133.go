/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTElementLibraryReferenceData3133 struct for BTElementLibraryReferenceData3133
type BTElementLibraryReferenceData3133 struct {
	BtType                      *string      `json:"btType,omitempty"`
	ElementLibraryId            *string      `json:"elementLibraryId,omitempty"`
	ElementLibraryIdRaw         *BTObjectId  `json:"elementLibraryIdRaw,omitempty"`
	ElementLibrarySelectionPath []BTObjectId `json:"elementLibrarySelectionPath,omitempty"`
	ElementLibraryVersion       *string      `json:"elementLibraryVersion,omitempty"`
	ElementLibraryVersionRaw    *BTObjectId  `json:"elementLibraryVersionRaw,omitempty"`
}

// NewBTElementLibraryReferenceData3133 instantiates a new BTElementLibraryReferenceData3133 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTElementLibraryReferenceData3133() *BTElementLibraryReferenceData3133 {
	this := BTElementLibraryReferenceData3133{}
	return &this
}

// NewBTElementLibraryReferenceData3133WithDefaults instantiates a new BTElementLibraryReferenceData3133 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTElementLibraryReferenceData3133WithDefaults() *BTElementLibraryReferenceData3133 {
	this := BTElementLibraryReferenceData3133{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTElementLibraryReferenceData3133) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementLibraryReferenceData3133) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTElementLibraryReferenceData3133) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTElementLibraryReferenceData3133) SetBtType(v string) {
	o.BtType = &v
}

// GetElementLibraryId returns the ElementLibraryId field value if set, zero value otherwise.
func (o *BTElementLibraryReferenceData3133) GetElementLibraryId() string {
	if o == nil || o.ElementLibraryId == nil {
		var ret string
		return ret
	}
	return *o.ElementLibraryId
}

// GetElementLibraryIdOk returns a tuple with the ElementLibraryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementLibraryReferenceData3133) GetElementLibraryIdOk() (*string, bool) {
	if o == nil || o.ElementLibraryId == nil {
		return nil, false
	}
	return o.ElementLibraryId, true
}

// HasElementLibraryId returns a boolean if a field has been set.
func (o *BTElementLibraryReferenceData3133) HasElementLibraryId() bool {
	if o != nil && o.ElementLibraryId != nil {
		return true
	}

	return false
}

// SetElementLibraryId gets a reference to the given string and assigns it to the ElementLibraryId field.
func (o *BTElementLibraryReferenceData3133) SetElementLibraryId(v string) {
	o.ElementLibraryId = &v
}

// GetElementLibraryIdRaw returns the ElementLibraryIdRaw field value if set, zero value otherwise.
func (o *BTElementLibraryReferenceData3133) GetElementLibraryIdRaw() BTObjectId {
	if o == nil || o.ElementLibraryIdRaw == nil {
		var ret BTObjectId
		return ret
	}
	return *o.ElementLibraryIdRaw
}

// GetElementLibraryIdRawOk returns a tuple with the ElementLibraryIdRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementLibraryReferenceData3133) GetElementLibraryIdRawOk() (*BTObjectId, bool) {
	if o == nil || o.ElementLibraryIdRaw == nil {
		return nil, false
	}
	return o.ElementLibraryIdRaw, true
}

// HasElementLibraryIdRaw returns a boolean if a field has been set.
func (o *BTElementLibraryReferenceData3133) HasElementLibraryIdRaw() bool {
	if o != nil && o.ElementLibraryIdRaw != nil {
		return true
	}

	return false
}

// SetElementLibraryIdRaw gets a reference to the given BTObjectId and assigns it to the ElementLibraryIdRaw field.
func (o *BTElementLibraryReferenceData3133) SetElementLibraryIdRaw(v BTObjectId) {
	o.ElementLibraryIdRaw = &v
}

// GetElementLibrarySelectionPath returns the ElementLibrarySelectionPath field value if set, zero value otherwise.
func (o *BTElementLibraryReferenceData3133) GetElementLibrarySelectionPath() []BTObjectId {
	if o == nil || o.ElementLibrarySelectionPath == nil {
		var ret []BTObjectId
		return ret
	}
	return o.ElementLibrarySelectionPath
}

// GetElementLibrarySelectionPathOk returns a tuple with the ElementLibrarySelectionPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementLibraryReferenceData3133) GetElementLibrarySelectionPathOk() ([]BTObjectId, bool) {
	if o == nil || o.ElementLibrarySelectionPath == nil {
		return nil, false
	}
	return o.ElementLibrarySelectionPath, true
}

// HasElementLibrarySelectionPath returns a boolean if a field has been set.
func (o *BTElementLibraryReferenceData3133) HasElementLibrarySelectionPath() bool {
	if o != nil && o.ElementLibrarySelectionPath != nil {
		return true
	}

	return false
}

// SetElementLibrarySelectionPath gets a reference to the given []BTObjectId and assigns it to the ElementLibrarySelectionPath field.
func (o *BTElementLibraryReferenceData3133) SetElementLibrarySelectionPath(v []BTObjectId) {
	o.ElementLibrarySelectionPath = v
}

// GetElementLibraryVersion returns the ElementLibraryVersion field value if set, zero value otherwise.
func (o *BTElementLibraryReferenceData3133) GetElementLibraryVersion() string {
	if o == nil || o.ElementLibraryVersion == nil {
		var ret string
		return ret
	}
	return *o.ElementLibraryVersion
}

// GetElementLibraryVersionOk returns a tuple with the ElementLibraryVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementLibraryReferenceData3133) GetElementLibraryVersionOk() (*string, bool) {
	if o == nil || o.ElementLibraryVersion == nil {
		return nil, false
	}
	return o.ElementLibraryVersion, true
}

// HasElementLibraryVersion returns a boolean if a field has been set.
func (o *BTElementLibraryReferenceData3133) HasElementLibraryVersion() bool {
	if o != nil && o.ElementLibraryVersion != nil {
		return true
	}

	return false
}

// SetElementLibraryVersion gets a reference to the given string and assigns it to the ElementLibraryVersion field.
func (o *BTElementLibraryReferenceData3133) SetElementLibraryVersion(v string) {
	o.ElementLibraryVersion = &v
}

// GetElementLibraryVersionRaw returns the ElementLibraryVersionRaw field value if set, zero value otherwise.
func (o *BTElementLibraryReferenceData3133) GetElementLibraryVersionRaw() BTObjectId {
	if o == nil || o.ElementLibraryVersionRaw == nil {
		var ret BTObjectId
		return ret
	}
	return *o.ElementLibraryVersionRaw
}

// GetElementLibraryVersionRawOk returns a tuple with the ElementLibraryVersionRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementLibraryReferenceData3133) GetElementLibraryVersionRawOk() (*BTObjectId, bool) {
	if o == nil || o.ElementLibraryVersionRaw == nil {
		return nil, false
	}
	return o.ElementLibraryVersionRaw, true
}

// HasElementLibraryVersionRaw returns a boolean if a field has been set.
func (o *BTElementLibraryReferenceData3133) HasElementLibraryVersionRaw() bool {
	if o != nil && o.ElementLibraryVersionRaw != nil {
		return true
	}

	return false
}

// SetElementLibraryVersionRaw gets a reference to the given BTObjectId and assigns it to the ElementLibraryVersionRaw field.
func (o *BTElementLibraryReferenceData3133) SetElementLibraryVersionRaw(v BTObjectId) {
	o.ElementLibraryVersionRaw = &v
}

func (o BTElementLibraryReferenceData3133) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.ElementLibraryId != nil {
		toSerialize["elementLibraryId"] = o.ElementLibraryId
	}
	if o.ElementLibraryIdRaw != nil {
		toSerialize["elementLibraryIdRaw"] = o.ElementLibraryIdRaw
	}
	if o.ElementLibrarySelectionPath != nil {
		toSerialize["elementLibrarySelectionPath"] = o.ElementLibrarySelectionPath
	}
	if o.ElementLibraryVersion != nil {
		toSerialize["elementLibraryVersion"] = o.ElementLibraryVersion
	}
	if o.ElementLibraryVersionRaw != nil {
		toSerialize["elementLibraryVersionRaw"] = o.ElementLibraryVersionRaw
	}
	return json.Marshal(toSerialize)
}

type NullableBTElementLibraryReferenceData3133 struct {
	value *BTElementLibraryReferenceData3133
	isSet bool
}

func (v NullableBTElementLibraryReferenceData3133) Get() *BTElementLibraryReferenceData3133 {
	return v.value
}

func (v *NullableBTElementLibraryReferenceData3133) Set(val *BTElementLibraryReferenceData3133) {
	v.value = val
	v.isSet = true
}

func (v NullableBTElementLibraryReferenceData3133) IsSet() bool {
	return v.isSet
}

func (v *NullableBTElementLibraryReferenceData3133) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTElementLibraryReferenceData3133(val *BTElementLibraryReferenceData3133) *NullableBTElementLibraryReferenceData3133 {
	return &NullableBTElementLibraryReferenceData3133{value: val, isSet: true}
}

func (v NullableBTElementLibraryReferenceData3133) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTElementLibraryReferenceData3133) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTDatumTableRowMetadata3060 struct for BTDatumTableRowMetadata3060
type BTDatumTableRowMetadata3060 struct {
	BTTableBaseRowMetadata3181
	BtType                  *string                            `json:"btType,omitempty"`
	CrossHighlightDataIfAny *BTTableBaseCrossHighlightData2609 `json:"crossHighlightDataIfAny,omitempty"`
	AnnotationId            *string                            `json:"annotationId,omitempty"`
}

// NewBTDatumTableRowMetadata3060 instantiates a new BTDatumTableRowMetadata3060 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTDatumTableRowMetadata3060() *BTDatumTableRowMetadata3060 {
	this := BTDatumTableRowMetadata3060{}
	return &this
}

// NewBTDatumTableRowMetadata3060WithDefaults instantiates a new BTDatumTableRowMetadata3060 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTDatumTableRowMetadata3060WithDefaults() *BTDatumTableRowMetadata3060 {
	this := BTDatumTableRowMetadata3060{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTDatumTableRowMetadata3060) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDatumTableRowMetadata3060) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTDatumTableRowMetadata3060) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTDatumTableRowMetadata3060) SetBtType(v string) {
	o.BtType = &v
}

// GetCrossHighlightDataIfAny returns the CrossHighlightDataIfAny field value if set, zero value otherwise.
func (o *BTDatumTableRowMetadata3060) GetCrossHighlightDataIfAny() BTTableBaseCrossHighlightData2609 {
	if o == nil || o.CrossHighlightDataIfAny == nil {
		var ret BTTableBaseCrossHighlightData2609
		return ret
	}
	return *o.CrossHighlightDataIfAny
}

// GetCrossHighlightDataIfAnyOk returns a tuple with the CrossHighlightDataIfAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDatumTableRowMetadata3060) GetCrossHighlightDataIfAnyOk() (*BTTableBaseCrossHighlightData2609, bool) {
	if o == nil || o.CrossHighlightDataIfAny == nil {
		return nil, false
	}
	return o.CrossHighlightDataIfAny, true
}

// HasCrossHighlightDataIfAny returns a boolean if a field has been set.
func (o *BTDatumTableRowMetadata3060) HasCrossHighlightDataIfAny() bool {
	if o != nil && o.CrossHighlightDataIfAny != nil {
		return true
	}

	return false
}

// SetCrossHighlightDataIfAny gets a reference to the given BTTableBaseCrossHighlightData2609 and assigns it to the CrossHighlightDataIfAny field.
func (o *BTDatumTableRowMetadata3060) SetCrossHighlightDataIfAny(v BTTableBaseCrossHighlightData2609) {
	o.CrossHighlightDataIfAny = &v
}

// GetAnnotationId returns the AnnotationId field value if set, zero value otherwise.
func (o *BTDatumTableRowMetadata3060) GetAnnotationId() string {
	if o == nil || o.AnnotationId == nil {
		var ret string
		return ret
	}
	return *o.AnnotationId
}

// GetAnnotationIdOk returns a tuple with the AnnotationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDatumTableRowMetadata3060) GetAnnotationIdOk() (*string, bool) {
	if o == nil || o.AnnotationId == nil {
		return nil, false
	}
	return o.AnnotationId, true
}

// HasAnnotationId returns a boolean if a field has been set.
func (o *BTDatumTableRowMetadata3060) HasAnnotationId() bool {
	if o != nil && o.AnnotationId != nil {
		return true
	}

	return false
}

// SetAnnotationId gets a reference to the given string and assigns it to the AnnotationId field.
func (o *BTDatumTableRowMetadata3060) SetAnnotationId(v string) {
	o.AnnotationId = &v
}

func (o BTDatumTableRowMetadata3060) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTTableBaseRowMetadata3181, errBTTableBaseRowMetadata3181 := json.Marshal(o.BTTableBaseRowMetadata3181)
	if errBTTableBaseRowMetadata3181 != nil {
		return []byte{}, errBTTableBaseRowMetadata3181
	}
	errBTTableBaseRowMetadata3181 = json.Unmarshal([]byte(serializedBTTableBaseRowMetadata3181), &toSerialize)
	if errBTTableBaseRowMetadata3181 != nil {
		return []byte{}, errBTTableBaseRowMetadata3181
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.CrossHighlightDataIfAny != nil {
		toSerialize["crossHighlightDataIfAny"] = o.CrossHighlightDataIfAny
	}
	if o.AnnotationId != nil {
		toSerialize["annotationId"] = o.AnnotationId
	}
	return json.Marshal(toSerialize)
}

type NullableBTDatumTableRowMetadata3060 struct {
	value *BTDatumTableRowMetadata3060
	isSet bool
}

func (v NullableBTDatumTableRowMetadata3060) Get() *BTDatumTableRowMetadata3060 {
	return v.value
}

func (v *NullableBTDatumTableRowMetadata3060) Set(val *BTDatumTableRowMetadata3060) {
	v.value = val
	v.isSet = true
}

func (v NullableBTDatumTableRowMetadata3060) IsSet() bool {
	return v.isSet
}

func (v *NullableBTDatumTableRowMetadata3060) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTDatumTableRowMetadata3060(val *BTDatumTableRowMetadata3060) *NullableBTDatumTableRowMetadata3060 {
	return &NullableBTDatumTableRowMetadata3060{value: val, isSet: true}
}

func (v NullableBTDatumTableRowMetadata3060) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTDatumTableRowMetadata3060) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

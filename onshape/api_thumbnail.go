/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"context"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// ThumbnailApiService ThumbnailApi service
type ThumbnailApiService service

type ApiDeleteApplicationThumbnailsRequest struct {
	ctx            context.Context
	ApiService     *ThumbnailApiService
	did            string
	wv             string
	wvid           string
	eid            string
	linkDocumentId *string
}

// The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
func (r ApiDeleteApplicationThumbnailsRequest) LinkDocumentId(linkDocumentId string) ApiDeleteApplicationThumbnailsRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

func (r ApiDeleteApplicationThumbnailsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteApplicationThumbnailsExecute(r)
}

/*
DeleteApplicationThumbnails Delete an element's thumbnail.

Deletes an application element's thumbnail and images for the given document, workspace or version, and element combination.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did The id of the document in which to perform the operation.
	@param wv Indicates which of workspace (w) or version (v) id is specified below.
	@param wvid The id of the workspace, version in which the operation should be performed.
	@param eid The id of the element in which to perform the operation.
	@return ApiDeleteApplicationThumbnailsRequest
*/
func (a *ThumbnailApiService) DeleteApplicationThumbnails(ctx context.Context, did string, wv string, wvid string, eid string) ApiDeleteApplicationThumbnailsRequest {
	return ApiDeleteApplicationThumbnailsRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		wv:         wv,
		wvid:       wvid,
		eid:        eid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ThumbnailApiService) DeleteApplicationThumbnailsExecute(r ApiDeleteApplicationThumbnailsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.DeleteApplicationThumbnails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wv"+"}", url.PathEscape(parameterToString(r.wv, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvid"+"}", url.PathEscape(parameterToString(r.wvid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", url.PathEscape(parameterToString(r.eid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string]interface{}
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDocumentThumbnailRequest struct {
	ctx        context.Context
	ApiService *ThumbnailApiService
	did        string
	wid        string
}

func (r ApiGetDocumentThumbnailRequest) Execute() (*BTThumbnailInfo, *http.Response, error) {
	return r.ApiService.GetDocumentThumbnailExecute(r)
}

/*
GetDocumentThumbnail Get the thumbnail info for a workspace.

* By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace.
* See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did
	@param wid
	@return ApiGetDocumentThumbnailRequest
*/
func (a *ThumbnailApiService) GetDocumentThumbnail(ctx context.Context, did string, wid string) ApiGetDocumentThumbnailRequest {
	return ApiGetDocumentThumbnailRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		wid:        wid,
	}
}

// Execute executes the request
//
//	@return BTThumbnailInfo
func (a *ThumbnailApiService) GetDocumentThumbnailExecute(r ApiGetDocumentThumbnailRequest) (*BTThumbnailInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BTThumbnailInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetDocumentThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}/w/{wid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", url.PathEscape(parameterToString(r.wid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v BTThumbnailInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDocumentThumbnailWithSizeRequest struct {
	ctx              context.Context
	ApiService       *ThumbnailApiService
	did              string
	wid              string
	sz               string
	t                *string
	skipDefaultImage *string
}

// Cache Control key. If specified, the response header returned will tell the client to use cached thumbnails.
func (r ApiGetDocumentThumbnailWithSizeRequest) T(t string) ApiGetDocumentThumbnailWithSizeRequest {
	r.t = &t
	return r
}

// Controls the return of the default image, if thumbnail is not available
func (r ApiGetDocumentThumbnailWithSizeRequest) SkipDefaultImage(skipDefaultImage string) ApiGetDocumentThumbnailWithSizeRequest {
	r.skipDefaultImage = &skipDefaultImage
	return r
}

func (r ApiGetDocumentThumbnailWithSizeRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDocumentThumbnailWithSizeExecute(r)
}

/*
GetDocumentThumbnailWithSize Get the thumbnail image with the given size for a document.

* By default, returns thumbnail image for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace.
* See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did
	@param wid
	@param sz the generated thumbnail size in pixels, widthxheigth
	@return ApiGetDocumentThumbnailWithSizeRequest
*/
func (a *ThumbnailApiService) GetDocumentThumbnailWithSize(ctx context.Context, did string, wid string, sz string) ApiGetDocumentThumbnailWithSizeRequest {
	return ApiGetDocumentThumbnailWithSizeRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		wid:        wid,
		sz:         sz,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ThumbnailApiService) GetDocumentThumbnailWithSizeExecute(r ApiGetDocumentThumbnailWithSizeRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetDocumentThumbnailWithSize")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}/w/{wid}/s/{sz}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", url.PathEscape(parameterToString(r.wid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sz"+"}", url.PathEscape(parameterToString(r.sz, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.t != nil {
		localVarQueryParams.Add("t", parameterToString(*r.t, ""))
	}
	if r.skipDefaultImage != nil {
		localVarQueryParams.Add("skipDefaultImage", parameterToString(*r.skipDefaultImage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "image/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string]interface{}
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetElementThumbnailRequest struct {
	ctx            context.Context
	ApiService     *ThumbnailApiService
	did            string
	wv             string
	wvid           string
	eid            string
	linkDocumentId *string
}

// The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
func (r ApiGetElementThumbnailRequest) LinkDocumentId(linkDocumentId string) ApiGetElementThumbnailRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

func (r ApiGetElementThumbnailRequest) Execute() (*BTThumbnailInfo, *http.Response, error) {
	return r.ApiService.GetElementThumbnailExecute(r)
}

/*
GetElementThumbnail Get the thumbnail info structure for an element.

Returns thumbnail info for the given document, workspace or version, and element.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did The id of the document in which to perform the operation.
	@param wv Indicates which of workspace (w) or version (v) id is specified below.
	@param wvid The id of the workspace, version in which the operation should be performed.
	@param eid The id of the element in which to perform the operation.
	@return ApiGetElementThumbnailRequest
*/
func (a *ThumbnailApiService) GetElementThumbnail(ctx context.Context, did string, wv string, wvid string, eid string) ApiGetElementThumbnailRequest {
	return ApiGetElementThumbnailRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		wv:         wv,
		wvid:       wvid,
		eid:        eid,
	}
}

// Execute executes the request
//
//	@return BTThumbnailInfo
func (a *ThumbnailApiService) GetElementThumbnailExecute(r ApiGetElementThumbnailRequest) (*BTThumbnailInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BTThumbnailInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetElementThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wv"+"}", url.PathEscape(parameterToString(r.wv, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvid"+"}", url.PathEscape(parameterToString(r.wvid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", url.PathEscape(parameterToString(r.eid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v BTThumbnailInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetElementThumbnailWithApiConfigurationRequest struct {
	ctx                context.Context
	ApiService         *ThumbnailApiService
	did                string
	wid                string
	eid                string
	cid                string
	sz                 string
	t                  *string
	skipDefaultImage   *string
	rejectEmpty        *bool
	requireConfigMatch *bool
}

// Cache Control key. If specified, the response header returned will tell the client to use cached thumbnails.
func (r ApiGetElementThumbnailWithApiConfigurationRequest) T(t string) ApiGetElementThumbnailWithApiConfigurationRequest {
	r.t = &t
	return r
}

// Controls the return of the default image, if thumbnail is not available
func (r ApiGetElementThumbnailWithApiConfigurationRequest) SkipDefaultImage(skipDefaultImage string) ApiGetElementThumbnailWithApiConfigurationRequest {
	r.skipDefaultImage = &skipDefaultImage
	return r
}

func (r ApiGetElementThumbnailWithApiConfigurationRequest) RejectEmpty(rejectEmpty bool) ApiGetElementThumbnailWithApiConfigurationRequest {
	r.rejectEmpty = &rejectEmpty
	return r
}

func (r ApiGetElementThumbnailWithApiConfigurationRequest) RequireConfigMatch(requireConfigMatch bool) ApiGetElementThumbnailWithApiConfigurationRequest {
	r.requireConfigMatch = &requireConfigMatch
	return r
}

func (r ApiGetElementThumbnailWithApiConfigurationRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetElementThumbnailWithApiConfigurationExecute(r)
}

/*
GetElementThumbnailWithApiConfiguration Get the thumbnail image with the given configuration for an element.

Returns the thumbnail image for an element at a specified version, with the given configuration.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did
	@param wid
	@param eid
	@param cid
	@param sz the generated thumbnail size in pixels, widthxheigth
	@return ApiGetElementThumbnailWithApiConfigurationRequest
*/
func (a *ThumbnailApiService) GetElementThumbnailWithApiConfiguration(ctx context.Context, did string, wid string, eid string, cid string, sz string) ApiGetElementThumbnailWithApiConfigurationRequest {
	return ApiGetElementThumbnailWithApiConfigurationRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		wid:        wid,
		eid:        eid,
		cid:        cid,
		sz:         sz,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ThumbnailApiService) GetElementThumbnailWithApiConfigurationExecute(r ApiGetElementThumbnailWithApiConfigurationRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetElementThumbnailWithApiConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}/w/{wid}/e/{eid}/ac/{cid}/s/{sz}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", url.PathEscape(parameterToString(r.wid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", url.PathEscape(parameterToString(r.eid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", url.PathEscape(parameterToString(r.cid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sz"+"}", url.PathEscape(parameterToString(r.sz, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.t != nil {
		localVarQueryParams.Add("t", parameterToString(*r.t, ""))
	}
	if r.skipDefaultImage != nil {
		localVarQueryParams.Add("skipDefaultImage", parameterToString(*r.skipDefaultImage, ""))
	}
	if r.rejectEmpty != nil {
		localVarQueryParams.Add("rejectEmpty", parameterToString(*r.rejectEmpty, ""))
	}
	if r.requireConfigMatch != nil {
		localVarQueryParams.Add("requireConfigMatch", parameterToString(*r.requireConfigMatch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "image/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string]interface{}
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetElementThumbnailWithSizeRequest struct {
	ctx              context.Context
	ApiService       *ThumbnailApiService
	did              string
	wv               string
	wvid             string
	eid              string
	sz               string
	linkDocumentId   *string
	t                *string
	skipDefaultImage *string
	rejectEmpty      *bool
}

// The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
func (r ApiGetElementThumbnailWithSizeRequest) LinkDocumentId(linkDocumentId string) ApiGetElementThumbnailWithSizeRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

// Cache Control key. If specified, the response header returned will tell the client to use cached thumbnails.
func (r ApiGetElementThumbnailWithSizeRequest) T(t string) ApiGetElementThumbnailWithSizeRequest {
	r.t = &t
	return r
}

// Controls the return of the default image, if thumbnail is not available
func (r ApiGetElementThumbnailWithSizeRequest) SkipDefaultImage(skipDefaultImage string) ApiGetElementThumbnailWithSizeRequest {
	r.skipDefaultImage = &skipDefaultImage
	return r
}

func (r ApiGetElementThumbnailWithSizeRequest) RejectEmpty(rejectEmpty bool) ApiGetElementThumbnailWithSizeRequest {
	r.rejectEmpty = &rejectEmpty
	return r
}

func (r ApiGetElementThumbnailWithSizeRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetElementThumbnailWithSizeExecute(r)
}

/*
GetElementThumbnailWithSize Get the thumbnail image with the given size for an element.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did The id of the document in which to perform the operation.
	@param wv Indicates which of workspace (w) or version (v) id is specified below.
	@param wvid The id of the workspace, version in which the operation should be performed.
	@param eid The id of the element in which to perform the operation.
	@param sz the generated thumbnail size in pixels, widthxheigth
	@return ApiGetElementThumbnailWithSizeRequest
*/
func (a *ThumbnailApiService) GetElementThumbnailWithSize(ctx context.Context, did string, wv string, wvid string, eid string, sz string) ApiGetElementThumbnailWithSizeRequest {
	return ApiGetElementThumbnailWithSizeRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		wv:         wv,
		wvid:       wvid,
		eid:        eid,
		sz:         sz,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ThumbnailApiService) GetElementThumbnailWithSizeExecute(r ApiGetElementThumbnailWithSizeRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetElementThumbnailWithSize")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}/s/{sz}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wv"+"}", url.PathEscape(parameterToString(r.wv, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvid"+"}", url.PathEscape(parameterToString(r.wvid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", url.PathEscape(parameterToString(r.eid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sz"+"}", url.PathEscape(parameterToString(r.sz, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	if r.t != nil {
		localVarQueryParams.Add("t", parameterToString(*r.t, ""))
	}
	if r.skipDefaultImage != nil {
		localVarQueryParams.Add("skipDefaultImage", parameterToString(*r.skipDefaultImage, ""))
	}
	if r.rejectEmpty != nil {
		localVarQueryParams.Add("rejectEmpty", parameterToString(*r.rejectEmpty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "image/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string]interface{}
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetThumbnailForDocumentRequest struct {
	ctx        context.Context
	ApiService *ThumbnailApiService
	did        string
}

func (r ApiGetThumbnailForDocumentRequest) Execute() (*BTThumbnailInfo, *http.Response, error) {
	return r.ApiService.GetThumbnailForDocumentExecute(r)
}

/*
GetThumbnailForDocument Get the thumbnail info for a document in the default workspace.

* By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace.
* The default workspace may vary by user; the image served depends on the signed-in user.
* See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did
	@return ApiGetThumbnailForDocumentRequest
*/
func (a *ThumbnailApiService) GetThumbnailForDocument(ctx context.Context, did string) ApiGetThumbnailForDocumentRequest {
	return ApiGetThumbnailForDocumentRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
	}
}

// Execute executes the request
//
//	@return BTThumbnailInfo
func (a *ThumbnailApiService) GetThumbnailForDocumentExecute(r ApiGetThumbnailForDocumentRequest) (*BTThumbnailInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BTThumbnailInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetThumbnailForDocument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v BTThumbnailInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetThumbnailForDocumentAndVersionRequest struct {
	ctx            context.Context
	ApiService     *ThumbnailApiService
	did            string
	vid            string
	linkDocumentId *string
}

func (r ApiGetThumbnailForDocumentAndVersionRequest) LinkDocumentId(linkDocumentId string) ApiGetThumbnailForDocumentAndVersionRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

func (r ApiGetThumbnailForDocumentAndVersionRequest) Execute() (*BTThumbnailInfo, *http.Response, error) {
	return r.ApiService.GetThumbnailForDocumentAndVersionExecute(r)
}

/*
GetThumbnailForDocumentAndVersion Get the thumbnail info for a version of a document.

* By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace.
* See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did
	@param vid
	@return ApiGetThumbnailForDocumentAndVersionRequest
*/
func (a *ThumbnailApiService) GetThumbnailForDocumentAndVersion(ctx context.Context, did string, vid string) ApiGetThumbnailForDocumentAndVersionRequest {
	return ApiGetThumbnailForDocumentAndVersionRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		vid:        vid,
	}
}

// Execute executes the request
//
//	@return BTThumbnailInfo
func (a *ThumbnailApiService) GetThumbnailForDocumentAndVersionExecute(r ApiGetThumbnailForDocumentAndVersionRequest) (*BTThumbnailInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BTThumbnailInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetThumbnailForDocumentAndVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}/v/{vid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vid"+"}", url.PathEscape(parameterToString(r.vid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v BTThumbnailInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetThumbnailForDocumentAndVersionOldRequest struct {
	ctx        context.Context
	ApiService *ThumbnailApiService
	did        string
	vid        string
}

func (r ApiGetThumbnailForDocumentAndVersionOldRequest) Execute() (*BTThumbnailInfo, *http.Response, error) {
	return r.ApiService.GetThumbnailForDocumentAndVersionOldExecute(r)
}

/*
GetThumbnailForDocumentAndVersionOld This endpoint will be deprecated soon. Use `getThumbnailForDocumentAndVersion` instead.

This API exists for historical reasons. It uses `/document/` in the path, rather than the standard `/d/` to specify the document.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did
	@param vid
	@return ApiGetThumbnailForDocumentAndVersionOldRequest
*/
func (a *ThumbnailApiService) GetThumbnailForDocumentAndVersionOld(ctx context.Context, did string, vid string) ApiGetThumbnailForDocumentAndVersionOldRequest {
	return ApiGetThumbnailForDocumentAndVersionOldRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		vid:        vid,
	}
}

// Execute executes the request
//
//	@return BTThumbnailInfo
func (a *ThumbnailApiService) GetThumbnailForDocumentAndVersionOldExecute(r ApiGetThumbnailForDocumentAndVersionOldRequest) (*BTThumbnailInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BTThumbnailInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetThumbnailForDocumentAndVersionOld")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/document/{did}/version/{vid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vid"+"}", url.PathEscape(parameterToString(r.vid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v BTThumbnailInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetThumbnailForDocumentOldRequest struct {
	ctx        context.Context
	ApiService *ThumbnailApiService
	did        string
}

func (r ApiGetThumbnailForDocumentOldRequest) Execute() (*BTThumbnailInfo, *http.Response, error) {
	return r.ApiService.GetThumbnailForDocumentOldExecute(r)
}

/*
GetThumbnailForDocumentOld This endpoint will be deprecated soon. Use `getThumbnailForDocument` instead.

This API exists for historical reasons. It uses `/document/` in the path, rather than the standard `/d/` to specify the document.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did
	@return ApiGetThumbnailForDocumentOldRequest
*/
func (a *ThumbnailApiService) GetThumbnailForDocumentOld(ctx context.Context, did string) ApiGetThumbnailForDocumentOldRequest {
	return ApiGetThumbnailForDocumentOldRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
	}
}

// Execute executes the request
//
//	@return BTThumbnailInfo
func (a *ThumbnailApiService) GetThumbnailForDocumentOldExecute(r ApiGetThumbnailForDocumentOldRequest) (*BTThumbnailInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BTThumbnailInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.GetThumbnailForDocumentOld")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/document/{did}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v BTThumbnailInfo
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetApplicationElementThumbnailRequest struct {
	ctx                                      context.Context
	ApiService                               *ThumbnailApiService
	did                                      string
	wv                                       string
	wvid                                     string
	eid                                      string
	bTApplicationElementThumbnailParamsArray *BTApplicationElementThumbnailParamsArray
	linkDocumentId                           *string
	overwrite                                *bool
}

func (r ApiSetApplicationElementThumbnailRequest) BTApplicationElementThumbnailParamsArray(bTApplicationElementThumbnailParamsArray BTApplicationElementThumbnailParamsArray) ApiSetApplicationElementThumbnailRequest {
	r.bTApplicationElementThumbnailParamsArray = &bTApplicationElementThumbnailParamsArray
	return r
}

// The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
func (r ApiSetApplicationElementThumbnailRequest) LinkDocumentId(linkDocumentId string) ApiSetApplicationElementThumbnailRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

func (r ApiSetApplicationElementThumbnailRequest) Overwrite(overwrite bool) ApiSetApplicationElementThumbnailRequest {
	r.overwrite = &overwrite
	return r
}

func (r ApiSetApplicationElementThumbnailRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SetApplicationElementThumbnailExecute(r)
}

/*
SetApplicationElementThumbnail Set the thumbnail image for an application element.

* Allows 3rd-party applications to set thumbnails for their elements.
* Application elements can have both primary and secondary thumbnails. A primary thumbnail represents the top-level of the element. A secondary thumbnail can represent sub-components of the element (e.g., a drawing sheet).
* To update one or more thumbnails, you must set the overwrite query param to `true` and supply the entire set of thumbnails. All previous thumbnails will be deleted prior to updating the element with the latest images.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param did The id of the document in which to perform the operation.
	@param wv Indicates which of workspace (w) or version (v) id is specified below.
	@param wvid The id of the workspace, version in which the operation should be performed.
	@param eid The id of the element in which to perform the operation.
	@return ApiSetApplicationElementThumbnailRequest
*/
func (a *ThumbnailApiService) SetApplicationElementThumbnail(ctx context.Context, did string, wv string, wvid string, eid string) ApiSetApplicationElementThumbnailRequest {
	return ApiSetApplicationElementThumbnailRequest{
		ApiService: a,
		ctx:        ctx,
		did:        did,
		wv:         wv,
		wvid:       wvid,
		eid:        eid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ThumbnailApiService) SetApplicationElementThumbnailExecute(r ApiSetApplicationElementThumbnailRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailApiService.SetApplicationElementThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", url.PathEscape(parameterToString(r.did, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wv"+"}", url.PathEscape(parameterToString(r.wv, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvid"+"}", url.PathEscape(parameterToString(r.wvid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", url.PathEscape(parameterToString(r.eid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bTApplicationElementThumbnailParamsArray == nil {
		return localVarReturnValue, nil, reportError("bTApplicationElementThumbnailParamsArray is required and must be specified")
	}

	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	if r.overwrite != nil {
		localVarQueryParams.Add("overwrite", parameterToString(*r.overwrite, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTApplicationElementThumbnailParamsArray
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string]interface{}
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// Versions struct for Versions
type Versions struct {
	AvailableVersions []BTApiVersion `json:"availableVersions,omitempty"`
	SpecifiedVersion  *BTApiVersion  `json:"specifiedVersion,omitempty"`
}

// NewVersions instantiates a new Versions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersions() *Versions {
	this := Versions{}
	return &this
}

// NewVersionsWithDefaults instantiates a new Versions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionsWithDefaults() *Versions {
	this := Versions{}
	return &this
}

// GetAvailableVersions returns the AvailableVersions field value if set, zero value otherwise.
func (o *Versions) GetAvailableVersions() []BTApiVersion {
	if o == nil || o.AvailableVersions == nil {
		var ret []BTApiVersion
		return ret
	}
	return o.AvailableVersions
}

// GetAvailableVersionsOk returns a tuple with the AvailableVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versions) GetAvailableVersionsOk() ([]BTApiVersion, bool) {
	if o == nil || o.AvailableVersions == nil {
		return nil, false
	}
	return o.AvailableVersions, true
}

// HasAvailableVersions returns a boolean if a field has been set.
func (o *Versions) HasAvailableVersions() bool {
	if o != nil && o.AvailableVersions != nil {
		return true
	}

	return false
}

// SetAvailableVersions gets a reference to the given []BTApiVersion and assigns it to the AvailableVersions field.
func (o *Versions) SetAvailableVersions(v []BTApiVersion) {
	o.AvailableVersions = v
}

// GetSpecifiedVersion returns the SpecifiedVersion field value if set, zero value otherwise.
func (o *Versions) GetSpecifiedVersion() BTApiVersion {
	if o == nil || o.SpecifiedVersion == nil {
		var ret BTApiVersion
		return ret
	}
	return *o.SpecifiedVersion
}

// GetSpecifiedVersionOk returns a tuple with the SpecifiedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versions) GetSpecifiedVersionOk() (*BTApiVersion, bool) {
	if o == nil || o.SpecifiedVersion == nil {
		return nil, false
	}
	return o.SpecifiedVersion, true
}

// HasSpecifiedVersion returns a boolean if a field has been set.
func (o *Versions) HasSpecifiedVersion() bool {
	if o != nil && o.SpecifiedVersion != nil {
		return true
	}

	return false
}

// SetSpecifiedVersion gets a reference to the given BTApiVersion and assigns it to the SpecifiedVersion field.
func (o *Versions) SetSpecifiedVersion(v BTApiVersion) {
	o.SpecifiedVersion = &v
}

func (o Versions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailableVersions != nil {
		toSerialize["availableVersions"] = o.AvailableVersions
	}
	if o.SpecifiedVersion != nil {
		toSerialize["specifiedVersion"] = o.SpecifiedVersion
	}
	return json.Marshal(toSerialize)
}

type NullableVersions struct {
	value *Versions
	isSet bool
}

func (v NullableVersions) Get() *Versions {
	return v.value
}

func (v *NullableVersions) Set(val *Versions) {
	v.value = val
	v.isSet = true
}

func (v NullableVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersions(val *Versions) *NullableVersions {
	return &NullableVersions{value: val, isSet: true}
}

func (v NullableVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

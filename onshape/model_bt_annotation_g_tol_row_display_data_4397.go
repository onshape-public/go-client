/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTAnnotationGTolRowDisplayData4397 struct for BTAnnotationGTolRowDisplayData4397
type BTAnnotationGTolRowDisplayData4397 struct {
	// Type of JSON object.
	BtType         *string                `json:"btType,omitempty"`
	ConstraintType *GBTGTolConstraintType `json:"constraintType,omitempty"`
	References     []string               `json:"references,omitempty"`
	Tolerance      *float64               `json:"tolerance,omitempty"`
}

// NewBTAnnotationGTolRowDisplayData4397 instantiates a new BTAnnotationGTolRowDisplayData4397 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTAnnotationGTolRowDisplayData4397() *BTAnnotationGTolRowDisplayData4397 {
	this := BTAnnotationGTolRowDisplayData4397{}
	return &this
}

// NewBTAnnotationGTolRowDisplayData4397WithDefaults instantiates a new BTAnnotationGTolRowDisplayData4397 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTAnnotationGTolRowDisplayData4397WithDefaults() *BTAnnotationGTolRowDisplayData4397 {
	this := BTAnnotationGTolRowDisplayData4397{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTAnnotationGTolRowDisplayData4397) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationGTolRowDisplayData4397) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTAnnotationGTolRowDisplayData4397) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTAnnotationGTolRowDisplayData4397) SetBtType(v string) {
	o.BtType = &v
}

// GetConstraintType returns the ConstraintType field value if set, zero value otherwise.
func (o *BTAnnotationGTolRowDisplayData4397) GetConstraintType() GBTGTolConstraintType {
	if o == nil || o.ConstraintType == nil {
		var ret GBTGTolConstraintType
		return ret
	}
	return *o.ConstraintType
}

// GetConstraintTypeOk returns a tuple with the ConstraintType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationGTolRowDisplayData4397) GetConstraintTypeOk() (*GBTGTolConstraintType, bool) {
	if o == nil || o.ConstraintType == nil {
		return nil, false
	}
	return o.ConstraintType, true
}

// HasConstraintType returns a boolean if a field has been set.
func (o *BTAnnotationGTolRowDisplayData4397) HasConstraintType() bool {
	if o != nil && o.ConstraintType != nil {
		return true
	}

	return false
}

// SetConstraintType gets a reference to the given GBTGTolConstraintType and assigns it to the ConstraintType field.
func (o *BTAnnotationGTolRowDisplayData4397) SetConstraintType(v GBTGTolConstraintType) {
	o.ConstraintType = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *BTAnnotationGTolRowDisplayData4397) GetReferences() []string {
	if o == nil || o.References == nil {
		var ret []string
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationGTolRowDisplayData4397) GetReferencesOk() ([]string, bool) {
	if o == nil || o.References == nil {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *BTAnnotationGTolRowDisplayData4397) HasReferences() bool {
	if o != nil && o.References != nil {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []string and assigns it to the References field.
func (o *BTAnnotationGTolRowDisplayData4397) SetReferences(v []string) {
	o.References = v
}

// GetTolerance returns the Tolerance field value if set, zero value otherwise.
func (o *BTAnnotationGTolRowDisplayData4397) GetTolerance() float64 {
	if o == nil || o.Tolerance == nil {
		var ret float64
		return ret
	}
	return *o.Tolerance
}

// GetToleranceOk returns a tuple with the Tolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationGTolRowDisplayData4397) GetToleranceOk() (*float64, bool) {
	if o == nil || o.Tolerance == nil {
		return nil, false
	}
	return o.Tolerance, true
}

// HasTolerance returns a boolean if a field has been set.
func (o *BTAnnotationGTolRowDisplayData4397) HasTolerance() bool {
	if o != nil && o.Tolerance != nil {
		return true
	}

	return false
}

// SetTolerance gets a reference to the given float64 and assigns it to the Tolerance field.
func (o *BTAnnotationGTolRowDisplayData4397) SetTolerance(v float64) {
	o.Tolerance = &v
}

func (o BTAnnotationGTolRowDisplayData4397) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.ConstraintType != nil {
		toSerialize["constraintType"] = o.ConstraintType
	}
	if o.References != nil {
		toSerialize["references"] = o.References
	}
	if o.Tolerance != nil {
		toSerialize["tolerance"] = o.Tolerance
	}
	return json.Marshal(toSerialize)
}

type NullableBTAnnotationGTolRowDisplayData4397 struct {
	value *BTAnnotationGTolRowDisplayData4397
	isSet bool
}

func (v NullableBTAnnotationGTolRowDisplayData4397) Get() *BTAnnotationGTolRowDisplayData4397 {
	return v.value
}

func (v *NullableBTAnnotationGTolRowDisplayData4397) Set(val *BTAnnotationGTolRowDisplayData4397) {
	v.value = val
	v.isSet = true
}

func (v NullableBTAnnotationGTolRowDisplayData4397) IsSet() bool {
	return v.isSet
}

func (v *NullableBTAnnotationGTolRowDisplayData4397) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTAnnotationGTolRowDisplayData4397(val *BTAnnotationGTolRowDisplayData4397) *NullableBTAnnotationGTolRowDisplayData4397 {
	return &NullableBTAnnotationGTolRowDisplayData4397{value: val, isSet: true}
}

func (v NullableBTAnnotationGTolRowDisplayData4397) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTAnnotationGTolRowDisplayData4397) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

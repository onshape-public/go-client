/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTAnnotationDeleteDisplayData1815 struct for BTAnnotationDeleteDisplayData1815
type BTAnnotationDeleteDisplayData1815 struct {
	BTAnnotationDisplayData3225
	AnnotationPlane *BTCoordinateSystem387 `json:"annotationPlane,omitempty"`
	BasePlane       *BTCoordinateSystem387 `json:"basePlane,omitempty"`
	BtType          *string                `json:"btType,omitempty"`
	DeterministicId *string                `json:"deterministicId,omitempty"`
	DxdySegments    []BTVector2d1812       `json:"dxdySegments,omitempty"`
	IsDeletion      *bool                  `json:"isDeletion,omitempty"`
}

// NewBTAnnotationDeleteDisplayData1815 instantiates a new BTAnnotationDeleteDisplayData1815 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTAnnotationDeleteDisplayData1815() *BTAnnotationDeleteDisplayData1815 {
	this := BTAnnotationDeleteDisplayData1815{}
	return &this
}

// NewBTAnnotationDeleteDisplayData1815WithDefaults instantiates a new BTAnnotationDeleteDisplayData1815 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTAnnotationDeleteDisplayData1815WithDefaults() *BTAnnotationDeleteDisplayData1815 {
	this := BTAnnotationDeleteDisplayData1815{}
	return &this
}

// GetAnnotationPlane returns the AnnotationPlane field value if set, zero value otherwise.
func (o *BTAnnotationDeleteDisplayData1815) GetAnnotationPlane() BTCoordinateSystem387 {
	if o == nil || o.AnnotationPlane == nil {
		var ret BTCoordinateSystem387
		return ret
	}
	return *o.AnnotationPlane
}

// GetAnnotationPlaneOk returns a tuple with the AnnotationPlane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDeleteDisplayData1815) GetAnnotationPlaneOk() (*BTCoordinateSystem387, bool) {
	if o == nil || o.AnnotationPlane == nil {
		return nil, false
	}
	return o.AnnotationPlane, true
}

// HasAnnotationPlane returns a boolean if a field has been set.
func (o *BTAnnotationDeleteDisplayData1815) HasAnnotationPlane() bool {
	if o != nil && o.AnnotationPlane != nil {
		return true
	}

	return false
}

// SetAnnotationPlane gets a reference to the given BTCoordinateSystem387 and assigns it to the AnnotationPlane field.
func (o *BTAnnotationDeleteDisplayData1815) SetAnnotationPlane(v BTCoordinateSystem387) {
	o.AnnotationPlane = &v
}

// GetBasePlane returns the BasePlane field value if set, zero value otherwise.
func (o *BTAnnotationDeleteDisplayData1815) GetBasePlane() BTCoordinateSystem387 {
	if o == nil || o.BasePlane == nil {
		var ret BTCoordinateSystem387
		return ret
	}
	return *o.BasePlane
}

// GetBasePlaneOk returns a tuple with the BasePlane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDeleteDisplayData1815) GetBasePlaneOk() (*BTCoordinateSystem387, bool) {
	if o == nil || o.BasePlane == nil {
		return nil, false
	}
	return o.BasePlane, true
}

// HasBasePlane returns a boolean if a field has been set.
func (o *BTAnnotationDeleteDisplayData1815) HasBasePlane() bool {
	if o != nil && o.BasePlane != nil {
		return true
	}

	return false
}

// SetBasePlane gets a reference to the given BTCoordinateSystem387 and assigns it to the BasePlane field.
func (o *BTAnnotationDeleteDisplayData1815) SetBasePlane(v BTCoordinateSystem387) {
	o.BasePlane = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTAnnotationDeleteDisplayData1815) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDeleteDisplayData1815) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTAnnotationDeleteDisplayData1815) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTAnnotationDeleteDisplayData1815) SetBtType(v string) {
	o.BtType = &v
}

// GetDeterministicId returns the DeterministicId field value if set, zero value otherwise.
func (o *BTAnnotationDeleteDisplayData1815) GetDeterministicId() string {
	if o == nil || o.DeterministicId == nil {
		var ret string
		return ret
	}
	return *o.DeterministicId
}

// GetDeterministicIdOk returns a tuple with the DeterministicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDeleteDisplayData1815) GetDeterministicIdOk() (*string, bool) {
	if o == nil || o.DeterministicId == nil {
		return nil, false
	}
	return o.DeterministicId, true
}

// HasDeterministicId returns a boolean if a field has been set.
func (o *BTAnnotationDeleteDisplayData1815) HasDeterministicId() bool {
	if o != nil && o.DeterministicId != nil {
		return true
	}

	return false
}

// SetDeterministicId gets a reference to the given string and assigns it to the DeterministicId field.
func (o *BTAnnotationDeleteDisplayData1815) SetDeterministicId(v string) {
	o.DeterministicId = &v
}

// GetDxdySegments returns the DxdySegments field value if set, zero value otherwise.
func (o *BTAnnotationDeleteDisplayData1815) GetDxdySegments() []BTVector2d1812 {
	if o == nil || o.DxdySegments == nil {
		var ret []BTVector2d1812
		return ret
	}
	return o.DxdySegments
}

// GetDxdySegmentsOk returns a tuple with the DxdySegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDeleteDisplayData1815) GetDxdySegmentsOk() ([]BTVector2d1812, bool) {
	if o == nil || o.DxdySegments == nil {
		return nil, false
	}
	return o.DxdySegments, true
}

// HasDxdySegments returns a boolean if a field has been set.
func (o *BTAnnotationDeleteDisplayData1815) HasDxdySegments() bool {
	if o != nil && o.DxdySegments != nil {
		return true
	}

	return false
}

// SetDxdySegments gets a reference to the given []BTVector2d1812 and assigns it to the DxdySegments field.
func (o *BTAnnotationDeleteDisplayData1815) SetDxdySegments(v []BTVector2d1812) {
	o.DxdySegments = v
}

// GetIsDeletion returns the IsDeletion field value if set, zero value otherwise.
func (o *BTAnnotationDeleteDisplayData1815) GetIsDeletion() bool {
	if o == nil || o.IsDeletion == nil {
		var ret bool
		return ret
	}
	return *o.IsDeletion
}

// GetIsDeletionOk returns a tuple with the IsDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDeleteDisplayData1815) GetIsDeletionOk() (*bool, bool) {
	if o == nil || o.IsDeletion == nil {
		return nil, false
	}
	return o.IsDeletion, true
}

// HasIsDeletion returns a boolean if a field has been set.
func (o *BTAnnotationDeleteDisplayData1815) HasIsDeletion() bool {
	if o != nil && o.IsDeletion != nil {
		return true
	}

	return false
}

// SetIsDeletion gets a reference to the given bool and assigns it to the IsDeletion field.
func (o *BTAnnotationDeleteDisplayData1815) SetIsDeletion(v bool) {
	o.IsDeletion = &v
}

func (o BTAnnotationDeleteDisplayData1815) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTAnnotationDisplayData3225, errBTAnnotationDisplayData3225 := json.Marshal(o.BTAnnotationDisplayData3225)
	if errBTAnnotationDisplayData3225 != nil {
		return []byte{}, errBTAnnotationDisplayData3225
	}
	errBTAnnotationDisplayData3225 = json.Unmarshal([]byte(serializedBTAnnotationDisplayData3225), &toSerialize)
	if errBTAnnotationDisplayData3225 != nil {
		return []byte{}, errBTAnnotationDisplayData3225
	}
	if o.AnnotationPlane != nil {
		toSerialize["annotationPlane"] = o.AnnotationPlane
	}
	if o.BasePlane != nil {
		toSerialize["basePlane"] = o.BasePlane
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.DeterministicId != nil {
		toSerialize["deterministicId"] = o.DeterministicId
	}
	if o.DxdySegments != nil {
		toSerialize["dxdySegments"] = o.DxdySegments
	}
	if o.IsDeletion != nil {
		toSerialize["isDeletion"] = o.IsDeletion
	}
	return json.Marshal(toSerialize)
}

type NullableBTAnnotationDeleteDisplayData1815 struct {
	value *BTAnnotationDeleteDisplayData1815
	isSet bool
}

func (v NullableBTAnnotationDeleteDisplayData1815) Get() *BTAnnotationDeleteDisplayData1815 {
	return v.value
}

func (v *NullableBTAnnotationDeleteDisplayData1815) Set(val *BTAnnotationDeleteDisplayData1815) {
	v.value = val
	v.isSet = true
}

func (v NullableBTAnnotationDeleteDisplayData1815) IsSet() bool {
	return v.isSet
}

func (v *NullableBTAnnotationDeleteDisplayData1815) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTAnnotationDeleteDisplayData1815(val *BTAnnotationDeleteDisplayData1815) *NullableBTAnnotationDeleteDisplayData1815 {
	return &NullableBTAnnotationDeleteDisplayData1815{value: val, isSet: true}
}

func (v NullableBTAnnotationDeleteDisplayData1815) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTAnnotationDeleteDisplayData1815) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

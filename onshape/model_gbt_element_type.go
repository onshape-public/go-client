/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// GBTElementType the model 'GBTElementType'
type GBTElementType string

// List of GBTElementType
const (
	GBTElementTypePartstudio      GBTElementType = "PARTSTUDIO"
	GBTElementTypeAssembly        GBTElementType = "ASSEMBLY"
	GBTElementTypeDrawing         GBTElementType = "DRAWING"
	GBTElementTypeFeaturestudio   GBTElementType = "FEATURESTUDIO"
	GBTElementTypeBlob            GBTElementType = "BLOB"
	GBTElementTypeApplication     GBTElementType = "APPLICATION"
	GBTElementTypeTable           GBTElementType = "TABLE"
	GBTElementTypeBillofmaterials GBTElementType = "BILLOFMATERIALS"
	GBTElementTypeVariablestudio  GBTElementType = "VARIABLESTUDIO"
	GBTElementTypePublicationitem GBTElementType = "PUBLICATIONITEM"
	GBTElementTypeUnknown         GBTElementType = "UNKNOWN"
)

// All allowed values of GBTElementType enum
var AllowedGBTElementTypeEnumValues = []GBTElementType{
	"PARTSTUDIO",
	"ASSEMBLY",
	"DRAWING",
	"FEATURESTUDIO",
	"BLOB",
	"APPLICATION",
	"TABLE",
	"BILLOFMATERIALS",
	"VARIABLESTUDIO",
	"PUBLICATIONITEM",
	"UNKNOWN",
}

func (v *GBTElementType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GBTElementType(value)
	for _, existing := range AllowedGBTElementTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GBTElementType", value)
}

// NewGBTElementTypeFromValue returns a pointer to a valid GBTElementType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGBTElementTypeFromValue(v string) (*GBTElementType, error) {
	ev := GBTElementType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GBTElementType: valid values are %v", v, AllowedGBTElementTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GBTElementType) IsValid() bool {
	for _, existing := range AllowedGBTElementTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GBTElementType value
func (v GBTElementType) Ptr() *GBTElementType {
	return &v
}

type NullableGBTElementType struct {
	value *GBTElementType
	isSet bool
}

func (v NullableGBTElementType) Get() *GBTElementType {
	return v.value
}

func (v *NullableGBTElementType) Set(val *GBTElementType) {
	v.value = val
	v.isSet = true
}

func (v NullableGBTElementType) IsSet() bool {
	return v.isSet
}

func (v *NullableGBTElementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGBTElementType(val *GBTElementType) *NullableGBTElementType {
	return &NullableGBTElementType{value: val, isSet: true}
}

func (v NullableGBTElementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGBTElementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

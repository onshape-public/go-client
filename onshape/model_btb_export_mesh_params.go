/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTBExportMeshParams Options for an element export to mesh format.
type BTBExportMeshParams struct {
	// Determines the maximum angular deviation, between the analytical surface and its triangulation. Lower values result in a finer geometry and higher values result in coarser geometry.
	AngularTolerance *float64 `json:"angularTolerance,omitempty"`
	// Determines the maximum distance deviation, between the analytical surface and its triangulation. Lower values result in a finer geometry and higher values result in coarser geometry.
	DistanceTolerance *float64 `json:"distanceTolerance,omitempty"`
	// Determines the maximum of a triangle edge length. Lower values result in a finer geometry and higher values result in coarser geometry.
	MaximumChordLength *float64             `json:"maximumChordLength,omitempty"`
	Resolution         *GBTExportResolution `json:"resolution,omitempty"`
	Unit               *GBTExportUnit       `json:"unit,omitempty"`
}

// NewBTBExportMeshParams instantiates a new BTBExportMeshParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTBExportMeshParams() *BTBExportMeshParams {
	this := BTBExportMeshParams{}
	var angularTolerance float64 = 0.001
	this.AngularTolerance = &angularTolerance
	var distanceTolerance float64 = 0.001
	this.DistanceTolerance = &distanceTolerance
	var maximumChordLength float64 = 0.01
	this.MaximumChordLength = &maximumChordLength
	var resolution GBTExportResolution = GBTExportResolutionFine
	this.Resolution = &resolution
	var unit GBTExportUnit = GBTExportUnitMeter
	this.Unit = &unit
	return &this
}

// NewBTBExportMeshParamsWithDefaults instantiates a new BTBExportMeshParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTBExportMeshParamsWithDefaults() *BTBExportMeshParams {
	this := BTBExportMeshParams{}
	var angularTolerance float64 = 0.001
	this.AngularTolerance = &angularTolerance
	var distanceTolerance float64 = 0.001
	this.DistanceTolerance = &distanceTolerance
	var maximumChordLength float64 = 0.01
	this.MaximumChordLength = &maximumChordLength
	var resolution GBTExportResolution = GBTExportResolutionFine
	this.Resolution = &resolution
	var unit GBTExportUnit = GBTExportUnitMeter
	this.Unit = &unit
	return &this
}

// GetAngularTolerance returns the AngularTolerance field value if set, zero value otherwise.
func (o *BTBExportMeshParams) GetAngularTolerance() float64 {
	if o == nil || o.AngularTolerance == nil {
		var ret float64
		return ret
	}
	return *o.AngularTolerance
}

// GetAngularToleranceOk returns a tuple with the AngularTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTBExportMeshParams) GetAngularToleranceOk() (*float64, bool) {
	if o == nil || o.AngularTolerance == nil {
		return nil, false
	}
	return o.AngularTolerance, true
}

// HasAngularTolerance returns a boolean if a field has been set.
func (o *BTBExportMeshParams) HasAngularTolerance() bool {
	if o != nil && o.AngularTolerance != nil {
		return true
	}

	return false
}

// SetAngularTolerance gets a reference to the given float64 and assigns it to the AngularTolerance field.
func (o *BTBExportMeshParams) SetAngularTolerance(v float64) {
	o.AngularTolerance = &v
}

// GetDistanceTolerance returns the DistanceTolerance field value if set, zero value otherwise.
func (o *BTBExportMeshParams) GetDistanceTolerance() float64 {
	if o == nil || o.DistanceTolerance == nil {
		var ret float64
		return ret
	}
	return *o.DistanceTolerance
}

// GetDistanceToleranceOk returns a tuple with the DistanceTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTBExportMeshParams) GetDistanceToleranceOk() (*float64, bool) {
	if o == nil || o.DistanceTolerance == nil {
		return nil, false
	}
	return o.DistanceTolerance, true
}

// HasDistanceTolerance returns a boolean if a field has been set.
func (o *BTBExportMeshParams) HasDistanceTolerance() bool {
	if o != nil && o.DistanceTolerance != nil {
		return true
	}

	return false
}

// SetDistanceTolerance gets a reference to the given float64 and assigns it to the DistanceTolerance field.
func (o *BTBExportMeshParams) SetDistanceTolerance(v float64) {
	o.DistanceTolerance = &v
}

// GetMaximumChordLength returns the MaximumChordLength field value if set, zero value otherwise.
func (o *BTBExportMeshParams) GetMaximumChordLength() float64 {
	if o == nil || o.MaximumChordLength == nil {
		var ret float64
		return ret
	}
	return *o.MaximumChordLength
}

// GetMaximumChordLengthOk returns a tuple with the MaximumChordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTBExportMeshParams) GetMaximumChordLengthOk() (*float64, bool) {
	if o == nil || o.MaximumChordLength == nil {
		return nil, false
	}
	return o.MaximumChordLength, true
}

// HasMaximumChordLength returns a boolean if a field has been set.
func (o *BTBExportMeshParams) HasMaximumChordLength() bool {
	if o != nil && o.MaximumChordLength != nil {
		return true
	}

	return false
}

// SetMaximumChordLength gets a reference to the given float64 and assigns it to the MaximumChordLength field.
func (o *BTBExportMeshParams) SetMaximumChordLength(v float64) {
	o.MaximumChordLength = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *BTBExportMeshParams) GetResolution() GBTExportResolution {
	if o == nil || o.Resolution == nil {
		var ret GBTExportResolution
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTBExportMeshParams) GetResolutionOk() (*GBTExportResolution, bool) {
	if o == nil || o.Resolution == nil {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *BTBExportMeshParams) HasResolution() bool {
	if o != nil && o.Resolution != nil {
		return true
	}

	return false
}

// SetResolution gets a reference to the given GBTExportResolution and assigns it to the Resolution field.
func (o *BTBExportMeshParams) SetResolution(v GBTExportResolution) {
	o.Resolution = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *BTBExportMeshParams) GetUnit() GBTExportUnit {
	if o == nil || o.Unit == nil {
		var ret GBTExportUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTBExportMeshParams) GetUnitOk() (*GBTExportUnit, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *BTBExportMeshParams) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given GBTExportUnit and assigns it to the Unit field.
func (o *BTBExportMeshParams) SetUnit(v GBTExportUnit) {
	o.Unit = &v
}

func (o BTBExportMeshParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AngularTolerance != nil {
		toSerialize["angularTolerance"] = o.AngularTolerance
	}
	if o.DistanceTolerance != nil {
		toSerialize["distanceTolerance"] = o.DistanceTolerance
	}
	if o.MaximumChordLength != nil {
		toSerialize["maximumChordLength"] = o.MaximumChordLength
	}
	if o.Resolution != nil {
		toSerialize["resolution"] = o.Resolution
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableBTBExportMeshParams struct {
	value *BTBExportMeshParams
	isSet bool
}

func (v NullableBTBExportMeshParams) Get() *BTBExportMeshParams {
	return v.value
}

func (v *NullableBTBExportMeshParams) Set(val *BTBExportMeshParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBTBExportMeshParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBTBExportMeshParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTBExportMeshParams(val *BTBExportMeshParams) *NullableBTBExportMeshParams {
	return &NullableBTBExportMeshParams{value: val, isSet: true}
}

func (v NullableBTBExportMeshParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTBExportMeshParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

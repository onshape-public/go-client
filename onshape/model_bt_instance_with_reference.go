/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTInstanceWithReference struct for BTInstanceWithReference
type BTInstanceWithReference struct {
	Configuration                           []BTMParameter1                             `json:"configuration,omitempty"`
	CustomData                              *map[string]BTReferenceCustomData1551       `json:"customData,omitempty"`
	DocumentId                              *string                                     `json:"documentId,omitempty"`
	ElementId                               *string                                     `json:"elementId,omitempty"`
	ElementReference                        *BTElementReference725                      `json:"elementReference,omitempty"`
	ExternalDocumentWithVersion             *BTDocumentWithVersionId                    `json:"externalDocumentWithVersion,omitempty"`
	ExternalDocumentWithVersionAndElementId *BTDocumentWithVersionAndElementId          `json:"externalDocumentWithVersionAndElementId,omitempty"`
	Locked                                  *bool                                       `json:"locked,omitempty"`
	LockedState                             *BTInstanceWithReference                    `json:"lockedState,omitempty"`
	MicroversionId                          *BTMicroversionId366                        `json:"microversionId,omitempty"`
	NodeId                                  *string                                     `json:"nodeId,omitempty"`
	ReferenceParameter                      *BTMParameterReferenceWithConfiguration3028 `json:"referenceParameter,omitempty"`
	StandardContent                         *bool                                       `json:"standardContent,omitempty"`
	StandardContentParametersId             *string                                     `json:"standardContentParametersId,omitempty"`
	ValidRevisionReference                  *bool                                       `json:"validRevisionReference,omitempty"`
	VersionId                               *string                                     `json:"versionId,omitempty"`
	VersionIdIfExternal                     *string                                     `json:"versionIdIfExternal,omitempty"`
}

// NewBTInstanceWithReference instantiates a new BTInstanceWithReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTInstanceWithReference() *BTInstanceWithReference {
	this := BTInstanceWithReference{}
	return &this
}

// NewBTInstanceWithReferenceWithDefaults instantiates a new BTInstanceWithReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTInstanceWithReferenceWithDefaults() *BTInstanceWithReference {
	this := BTInstanceWithReference{}
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetConfiguration() []BTMParameter1 {
	if o == nil || o.Configuration == nil {
		var ret []BTMParameter1
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetConfigurationOk() ([]BTMParameter1, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given []BTMParameter1 and assigns it to the Configuration field.
func (o *BTInstanceWithReference) SetConfiguration(v []BTMParameter1) {
	o.Configuration = v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetCustomData() map[string]BTReferenceCustomData1551 {
	if o == nil || o.CustomData == nil {
		var ret map[string]BTReferenceCustomData1551
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetCustomDataOk() (*map[string]BTReferenceCustomData1551, bool) {
	if o == nil || o.CustomData == nil {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasCustomData() bool {
	if o != nil && o.CustomData != nil {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]BTReferenceCustomData1551 and assigns it to the CustomData field.
func (o *BTInstanceWithReference) SetCustomData(v map[string]BTReferenceCustomData1551) {
	o.CustomData = &v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetDocumentId() string {
	if o == nil || o.DocumentId == nil {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetDocumentIdOk() (*string, bool) {
	if o == nil || o.DocumentId == nil {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasDocumentId() bool {
	if o != nil && o.DocumentId != nil {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *BTInstanceWithReference) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetElementId() string {
	if o == nil || o.ElementId == nil {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetElementIdOk() (*string, bool) {
	if o == nil || o.ElementId == nil {
		return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasElementId() bool {
	if o != nil && o.ElementId != nil {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *BTInstanceWithReference) SetElementId(v string) {
	o.ElementId = &v
}

// GetElementReference returns the ElementReference field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetElementReference() BTElementReference725 {
	if o == nil || o.ElementReference == nil {
		var ret BTElementReference725
		return ret
	}
	return *o.ElementReference
}

// GetElementReferenceOk returns a tuple with the ElementReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetElementReferenceOk() (*BTElementReference725, bool) {
	if o == nil || o.ElementReference == nil {
		return nil, false
	}
	return o.ElementReference, true
}

// HasElementReference returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasElementReference() bool {
	if o != nil && o.ElementReference != nil {
		return true
	}

	return false
}

// SetElementReference gets a reference to the given BTElementReference725 and assigns it to the ElementReference field.
func (o *BTInstanceWithReference) SetElementReference(v BTElementReference725) {
	o.ElementReference = &v
}

// GetExternalDocumentWithVersion returns the ExternalDocumentWithVersion field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetExternalDocumentWithVersion() BTDocumentWithVersionId {
	if o == nil || o.ExternalDocumentWithVersion == nil {
		var ret BTDocumentWithVersionId
		return ret
	}
	return *o.ExternalDocumentWithVersion
}

// GetExternalDocumentWithVersionOk returns a tuple with the ExternalDocumentWithVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetExternalDocumentWithVersionOk() (*BTDocumentWithVersionId, bool) {
	if o == nil || o.ExternalDocumentWithVersion == nil {
		return nil, false
	}
	return o.ExternalDocumentWithVersion, true
}

// HasExternalDocumentWithVersion returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasExternalDocumentWithVersion() bool {
	if o != nil && o.ExternalDocumentWithVersion != nil {
		return true
	}

	return false
}

// SetExternalDocumentWithVersion gets a reference to the given BTDocumentWithVersionId and assigns it to the ExternalDocumentWithVersion field.
func (o *BTInstanceWithReference) SetExternalDocumentWithVersion(v BTDocumentWithVersionId) {
	o.ExternalDocumentWithVersion = &v
}

// GetExternalDocumentWithVersionAndElementId returns the ExternalDocumentWithVersionAndElementId field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetExternalDocumentWithVersionAndElementId() BTDocumentWithVersionAndElementId {
	if o == nil || o.ExternalDocumentWithVersionAndElementId == nil {
		var ret BTDocumentWithVersionAndElementId
		return ret
	}
	return *o.ExternalDocumentWithVersionAndElementId
}

// GetExternalDocumentWithVersionAndElementIdOk returns a tuple with the ExternalDocumentWithVersionAndElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetExternalDocumentWithVersionAndElementIdOk() (*BTDocumentWithVersionAndElementId, bool) {
	if o == nil || o.ExternalDocumentWithVersionAndElementId == nil {
		return nil, false
	}
	return o.ExternalDocumentWithVersionAndElementId, true
}

// HasExternalDocumentWithVersionAndElementId returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasExternalDocumentWithVersionAndElementId() bool {
	if o != nil && o.ExternalDocumentWithVersionAndElementId != nil {
		return true
	}

	return false
}

// SetExternalDocumentWithVersionAndElementId gets a reference to the given BTDocumentWithVersionAndElementId and assigns it to the ExternalDocumentWithVersionAndElementId field.
func (o *BTInstanceWithReference) SetExternalDocumentWithVersionAndElementId(v BTDocumentWithVersionAndElementId) {
	o.ExternalDocumentWithVersionAndElementId = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *BTInstanceWithReference) SetLocked(v bool) {
	o.Locked = &v
}

// GetLockedState returns the LockedState field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetLockedState() BTInstanceWithReference {
	if o == nil || o.LockedState == nil {
		var ret BTInstanceWithReference
		return ret
	}
	return *o.LockedState
}

// GetLockedStateOk returns a tuple with the LockedState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetLockedStateOk() (*BTInstanceWithReference, bool) {
	if o == nil || o.LockedState == nil {
		return nil, false
	}
	return o.LockedState, true
}

// HasLockedState returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasLockedState() bool {
	if o != nil && o.LockedState != nil {
		return true
	}

	return false
}

// SetLockedState gets a reference to the given BTInstanceWithReference and assigns it to the LockedState field.
func (o *BTInstanceWithReference) SetLockedState(v BTInstanceWithReference) {
	o.LockedState = &v
}

// GetMicroversionId returns the MicroversionId field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetMicroversionId() BTMicroversionId366 {
	if o == nil || o.MicroversionId == nil {
		var ret BTMicroversionId366
		return ret
	}
	return *o.MicroversionId
}

// GetMicroversionIdOk returns a tuple with the MicroversionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetMicroversionIdOk() (*BTMicroversionId366, bool) {
	if o == nil || o.MicroversionId == nil {
		return nil, false
	}
	return o.MicroversionId, true
}

// HasMicroversionId returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasMicroversionId() bool {
	if o != nil && o.MicroversionId != nil {
		return true
	}

	return false
}

// SetMicroversionId gets a reference to the given BTMicroversionId366 and assigns it to the MicroversionId field.
func (o *BTInstanceWithReference) SetMicroversionId(v BTMicroversionId366) {
	o.MicroversionId = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTInstanceWithReference) SetNodeId(v string) {
	o.NodeId = &v
}

// GetReferenceParameter returns the ReferenceParameter field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetReferenceParameter() BTMParameterReferenceWithConfiguration3028 {
	if o == nil || o.ReferenceParameter == nil {
		var ret BTMParameterReferenceWithConfiguration3028
		return ret
	}
	return *o.ReferenceParameter
}

// GetReferenceParameterOk returns a tuple with the ReferenceParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetReferenceParameterOk() (*BTMParameterReferenceWithConfiguration3028, bool) {
	if o == nil || o.ReferenceParameter == nil {
		return nil, false
	}
	return o.ReferenceParameter, true
}

// HasReferenceParameter returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasReferenceParameter() bool {
	if o != nil && o.ReferenceParameter != nil {
		return true
	}

	return false
}

// SetReferenceParameter gets a reference to the given BTMParameterReferenceWithConfiguration3028 and assigns it to the ReferenceParameter field.
func (o *BTInstanceWithReference) SetReferenceParameter(v BTMParameterReferenceWithConfiguration3028) {
	o.ReferenceParameter = &v
}

// GetStandardContent returns the StandardContent field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetStandardContent() bool {
	if o == nil || o.StandardContent == nil {
		var ret bool
		return ret
	}
	return *o.StandardContent
}

// GetStandardContentOk returns a tuple with the StandardContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetStandardContentOk() (*bool, bool) {
	if o == nil || o.StandardContent == nil {
		return nil, false
	}
	return o.StandardContent, true
}

// HasStandardContent returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasStandardContent() bool {
	if o != nil && o.StandardContent != nil {
		return true
	}

	return false
}

// SetStandardContent gets a reference to the given bool and assigns it to the StandardContent field.
func (o *BTInstanceWithReference) SetStandardContent(v bool) {
	o.StandardContent = &v
}

// GetStandardContentParametersId returns the StandardContentParametersId field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetStandardContentParametersId() string {
	if o == nil || o.StandardContentParametersId == nil {
		var ret string
		return ret
	}
	return *o.StandardContentParametersId
}

// GetStandardContentParametersIdOk returns a tuple with the StandardContentParametersId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetStandardContentParametersIdOk() (*string, bool) {
	if o == nil || o.StandardContentParametersId == nil {
		return nil, false
	}
	return o.StandardContentParametersId, true
}

// HasStandardContentParametersId returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasStandardContentParametersId() bool {
	if o != nil && o.StandardContentParametersId != nil {
		return true
	}

	return false
}

// SetStandardContentParametersId gets a reference to the given string and assigns it to the StandardContentParametersId field.
func (o *BTInstanceWithReference) SetStandardContentParametersId(v string) {
	o.StandardContentParametersId = &v
}

// GetValidRevisionReference returns the ValidRevisionReference field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetValidRevisionReference() bool {
	if o == nil || o.ValidRevisionReference == nil {
		var ret bool
		return ret
	}
	return *o.ValidRevisionReference
}

// GetValidRevisionReferenceOk returns a tuple with the ValidRevisionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetValidRevisionReferenceOk() (*bool, bool) {
	if o == nil || o.ValidRevisionReference == nil {
		return nil, false
	}
	return o.ValidRevisionReference, true
}

// HasValidRevisionReference returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasValidRevisionReference() bool {
	if o != nil && o.ValidRevisionReference != nil {
		return true
	}

	return false
}

// SetValidRevisionReference gets a reference to the given bool and assigns it to the ValidRevisionReference field.
func (o *BTInstanceWithReference) SetValidRevisionReference(v bool) {
	o.ValidRevisionReference = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetVersionId() string {
	if o == nil || o.VersionId == nil {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetVersionIdOk() (*string, bool) {
	if o == nil || o.VersionId == nil {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasVersionId() bool {
	if o != nil && o.VersionId != nil {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *BTInstanceWithReference) SetVersionId(v string) {
	o.VersionId = &v
}

// GetVersionIdIfExternal returns the VersionIdIfExternal field value if set, zero value otherwise.
func (o *BTInstanceWithReference) GetVersionIdIfExternal() string {
	if o == nil || o.VersionIdIfExternal == nil {
		var ret string
		return ret
	}
	return *o.VersionIdIfExternal
}

// GetVersionIdIfExternalOk returns a tuple with the VersionIdIfExternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTInstanceWithReference) GetVersionIdIfExternalOk() (*string, bool) {
	if o == nil || o.VersionIdIfExternal == nil {
		return nil, false
	}
	return o.VersionIdIfExternal, true
}

// HasVersionIdIfExternal returns a boolean if a field has been set.
func (o *BTInstanceWithReference) HasVersionIdIfExternal() bool {
	if o != nil && o.VersionIdIfExternal != nil {
		return true
	}

	return false
}

// SetVersionIdIfExternal gets a reference to the given string and assigns it to the VersionIdIfExternal field.
func (o *BTInstanceWithReference) SetVersionIdIfExternal(v string) {
	o.VersionIdIfExternal = &v
}

func (o BTInstanceWithReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	if o.CustomData != nil {
		toSerialize["customData"] = o.CustomData
	}
	if o.DocumentId != nil {
		toSerialize["documentId"] = o.DocumentId
	}
	if o.ElementId != nil {
		toSerialize["elementId"] = o.ElementId
	}
	if o.ElementReference != nil {
		toSerialize["elementReference"] = o.ElementReference
	}
	if o.ExternalDocumentWithVersion != nil {
		toSerialize["externalDocumentWithVersion"] = o.ExternalDocumentWithVersion
	}
	if o.ExternalDocumentWithVersionAndElementId != nil {
		toSerialize["externalDocumentWithVersionAndElementId"] = o.ExternalDocumentWithVersionAndElementId
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.LockedState != nil {
		toSerialize["lockedState"] = o.LockedState
	}
	if o.MicroversionId != nil {
		toSerialize["microversionId"] = o.MicroversionId
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.ReferenceParameter != nil {
		toSerialize["referenceParameter"] = o.ReferenceParameter
	}
	if o.StandardContent != nil {
		toSerialize["standardContent"] = o.StandardContent
	}
	if o.StandardContentParametersId != nil {
		toSerialize["standardContentParametersId"] = o.StandardContentParametersId
	}
	if o.ValidRevisionReference != nil {
		toSerialize["validRevisionReference"] = o.ValidRevisionReference
	}
	if o.VersionId != nil {
		toSerialize["versionId"] = o.VersionId
	}
	if o.VersionIdIfExternal != nil {
		toSerialize["versionIdIfExternal"] = o.VersionIdIfExternal
	}
	return json.Marshal(toSerialize)
}

type NullableBTInstanceWithReference struct {
	value *BTInstanceWithReference
	isSet bool
}

func (v NullableBTInstanceWithReference) Get() *BTInstanceWithReference {
	return v.value
}

func (v *NullableBTInstanceWithReference) Set(val *BTInstanceWithReference) {
	v.value = val
	v.isSet = true
}

func (v NullableBTInstanceWithReference) IsSet() bool {
	return v.isSet
}

func (v *NullableBTInstanceWithReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTInstanceWithReference(val *BTInstanceWithReference) *NullableBTInstanceWithReference {
	return &NullableBTInstanceWithReference{value: val, isSet: true}
}

func (v NullableBTInstanceWithReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTInstanceWithReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

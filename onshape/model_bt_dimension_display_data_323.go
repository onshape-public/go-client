/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTDimensionDisplayData323 - struct for BTDimensionDisplayData323
type BTDimensionDisplayData323 struct {
	implBTDimensionDisplayData323 interface{}
}

// BTBezierDegreeDimensionDisplayData2597AsBTDimensionDisplayData323 is a convenience function that returns BTBezierDegreeDimensionDisplayData2597 wrapped in BTDimensionDisplayData323
func (o *BTBezierDegreeDimensionDisplayData2597) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTCountDimensionDisplayData1778AsBTDimensionDisplayData323 is a convenience function that returns BTCountDimensionDisplayData1778 wrapped in BTDimensionDisplayData323
func (o *BTCountDimensionDisplayData1778) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTRadialDimensionDisplayData348AsBTDimensionDisplayData323 is a convenience function that returns BTRadialDimensionDisplayData348 wrapped in BTDimensionDisplayData323
func (o *BTRadialDimensionDisplayData348) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTCenterlineDimensionDisplayData1798AsBTDimensionDisplayData323 is a convenience function that returns BTCenterlineDimensionDisplayData1798 wrapped in BTDimensionDisplayData323
func (o *BTCenterlineDimensionDisplayData1798) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTAngularDimensionDisplayData320AsBTDimensionDisplayData323 is a convenience function that returns BTAngularDimensionDisplayData320 wrapped in BTDimensionDisplayData323
func (o *BTAngularDimensionDisplayData320) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTLinearDimensionDisplayData330AsBTDimensionDisplayData323 is a convenience function that returns BTLinearDimensionDisplayData330 wrapped in BTDimensionDisplayData323
func (o *BTLinearDimensionDisplayData330) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTRhoDimensionDisplayData2892AsBTDimensionDisplayData323 is a convenience function that returns BTRhoDimensionDisplayData2892 wrapped in BTDimensionDisplayData323
func (o *BTRhoDimensionDisplayData2892) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTArcLengthDimensionDisplayData1018AsBTDimensionDisplayData323 is a convenience function that returns BTArcLengthDimensionDisplayData1018 wrapped in BTDimensionDisplayData323
func (o *BTArcLengthDimensionDisplayData1018) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTCurveLengthDimensionDisplayData322AsBTDimensionDisplayData323 is a convenience function that returns BTCurveLengthDimensionDisplayData322 wrapped in BTDimensionDisplayData323
func (o *BTCurveLengthDimensionDisplayData322) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// BTEllipseDiameterDimensionDisplayData1301AsBTDimensionDisplayData323 is a convenience function that returns BTEllipseDiameterDimensionDisplayData1301 wrapped in BTDimensionDisplayData323
func (o *BTEllipseDiameterDimensionDisplayData1301) AsBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	return &BTDimensionDisplayData323{o}
}

// NewBTDimensionDisplayData323 instantiates a new BTDimensionDisplayData323 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTDimensionDisplayData323() *BTDimensionDisplayData323 {
	this := BTDimensionDisplayData323{Newbase_BTDimensionDisplayData323()}
	return &this
}

// NewBTDimensionDisplayData323WithDefaults instantiates a new BTDimensionDisplayData323 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTDimensionDisplayData323WithDefaults() *BTDimensionDisplayData323 {
	this := BTDimensionDisplayData323{Newbase_BTDimensionDisplayData323WithDefaults()}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTDimensionDisplayData323) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetCoordinateSystem returns the CoordinateSystem field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetCoordinateSystem() BTMatrix3x3340 {
	type getResult interface {
		GetCoordinateSystem() BTMatrix3x3340
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCoordinateSystem()
	} else {
		var de BTMatrix3x3340
		return de
	}
}

// GetCoordinateSystemOk returns a tuple with the CoordinateSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetCoordinateSystemOk() (*BTMatrix3x3340, bool) {
	type getResult interface {
		GetCoordinateSystemOk() (*BTMatrix3x3340, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCoordinateSystemOk()
	} else {
		return nil, false
	}
}

// HasCoordinateSystem returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasCoordinateSystem() bool {
	type getResult interface {
		HasCoordinateSystem() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasCoordinateSystem()
	} else {
		return false
	}
}

// SetCoordinateSystem gets a reference to the given BTMatrix3x3340 and assigns it to the CoordinateSystem field.
func (o *BTDimensionDisplayData323) SetCoordinateSystem(v BTMatrix3x3340) {
	type getResult interface {
		SetCoordinateSystem(v BTMatrix3x3340)
	}

	o.GetActualInstance().(getResult).SetCoordinateSystem(v)
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetFeatureId() string {
	type getResult interface {
		GetFeatureId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureId()
	} else {
		var de string
		return de
	}
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetFeatureIdOk() (*string, bool) {
	type getResult interface {
		GetFeatureIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureIdOk()
	} else {
		return nil, false
	}
}

// HasFeatureId returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasFeatureId() bool {
	type getResult interface {
		HasFeatureId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFeatureId()
	} else {
		return false
	}
}

// SetFeatureId gets a reference to the given string and assigns it to the FeatureId field.
func (o *BTDimensionDisplayData323) SetFeatureId(v string) {
	type getResult interface {
		SetFeatureId(v string)
	}

	o.GetActualInstance().(getResult).SetFeatureId(v)
}

// GetHasMaximumLimit_ returns the HasMaximumLimit_ field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetHasMaximumLimit_() bool {
	type getResult interface {
		GetHasMaximumLimit_() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetHasMaximumLimit_()
	} else {
		var de bool
		return de
	}
}

// GetHasMaximumLimit_Ok returns a tuple with the HasMaximumLimit_ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetHasMaximumLimit_Ok() (*bool, bool) {
	type getResult interface {
		GetHasMaximumLimit_Ok() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetHasMaximumLimit_Ok()
	} else {
		return nil, false
	}
}

// HasHasMaximumLimit_ returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasHasMaximumLimit_() bool {
	type getResult interface {
		HasHasMaximumLimit_() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasHasMaximumLimit_()
	} else {
		return false
	}
}

// SetHasMaximumLimit_ gets a reference to the given bool and assigns it to the HasMaximumLimit_ field.
func (o *BTDimensionDisplayData323) SetHasMaximumLimit_(v bool) {
	type getResult interface {
		SetHasMaximumLimit_(v bool)
	}

	o.GetActualInstance().(getResult).SetHasMaximumLimit_(v)
}

// GetHasMinimumLimit_ returns the HasMinimumLimit_ field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetHasMinimumLimit_() bool {
	type getResult interface {
		GetHasMinimumLimit_() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetHasMinimumLimit_()
	} else {
		var de bool
		return de
	}
}

// GetHasMinimumLimit_Ok returns a tuple with the HasMinimumLimit_ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetHasMinimumLimit_Ok() (*bool, bool) {
	type getResult interface {
		GetHasMinimumLimit_Ok() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetHasMinimumLimit_Ok()
	} else {
		return nil, false
	}
}

// HasHasMinimumLimit_ returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasHasMinimumLimit_() bool {
	type getResult interface {
		HasHasMinimumLimit_() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasHasMinimumLimit_()
	} else {
		return false
	}
}

// SetHasMinimumLimit_ gets a reference to the given bool and assigns it to the HasMinimumLimit_ field.
func (o *BTDimensionDisplayData323) SetHasMinimumLimit_(v bool) {
	type getResult interface {
		SetHasMinimumLimit_(v bool)
	}

	o.GetActualInstance().(getResult).SetHasMinimumLimit_(v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetId() string {
	type getResult interface {
		GetId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetId()
	} else {
		var de string
		return de
	}
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetIdOk() (*string, bool) {
	type getResult interface {
		GetIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIdOk()
	} else {
		return nil, false
	}
}

// HasId returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasId() bool {
	type getResult interface {
		HasId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasId()
	} else {
		return false
	}
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BTDimensionDisplayData323) SetId(v string) {
	type getResult interface {
		SetId(v string)
	}

	o.GetActualInstance().(getResult).SetId(v)
}

// GetIsAnnotationDimension returns the IsAnnotationDimension field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetIsAnnotationDimension() bool {
	type getResult interface {
		GetIsAnnotationDimension() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsAnnotationDimension()
	} else {
		var de bool
		return de
	}
}

// GetIsAnnotationDimensionOk returns a tuple with the IsAnnotationDimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetIsAnnotationDimensionOk() (*bool, bool) {
	type getResult interface {
		GetIsAnnotationDimensionOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsAnnotationDimensionOk()
	} else {
		return nil, false
	}
}

// HasIsAnnotationDimension returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasIsAnnotationDimension() bool {
	type getResult interface {
		HasIsAnnotationDimension() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsAnnotationDimension()
	} else {
		return false
	}
}

// SetIsAnnotationDimension gets a reference to the given bool and assigns it to the IsAnnotationDimension field.
func (o *BTDimensionDisplayData323) SetIsAnnotationDimension(v bool) {
	type getResult interface {
		SetIsAnnotationDimension(v bool)
	}

	o.GetActualInstance().(getResult).SetIsAnnotationDimension(v)
}

// GetIsAssociatedWithFlat returns the IsAssociatedWithFlat field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetIsAssociatedWithFlat() bool {
	type getResult interface {
		GetIsAssociatedWithFlat() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsAssociatedWithFlat()
	} else {
		var de bool
		return de
	}
}

// GetIsAssociatedWithFlatOk returns a tuple with the IsAssociatedWithFlat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetIsAssociatedWithFlatOk() (*bool, bool) {
	type getResult interface {
		GetIsAssociatedWithFlatOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsAssociatedWithFlatOk()
	} else {
		return nil, false
	}
}

// HasIsAssociatedWithFlat returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasIsAssociatedWithFlat() bool {
	type getResult interface {
		HasIsAssociatedWithFlat() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsAssociatedWithFlat()
	} else {
		return false
	}
}

// SetIsAssociatedWithFlat gets a reference to the given bool and assigns it to the IsAssociatedWithFlat field.
func (o *BTDimensionDisplayData323) SetIsAssociatedWithFlat(v bool) {
	type getResult interface {
		SetIsAssociatedWithFlat(v bool)
	}

	o.GetActualInstance().(getResult).SetIsAssociatedWithFlat(v)
}

// GetIsDriven returns the IsDriven field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetIsDriven() bool {
	type getResult interface {
		GetIsDriven() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsDriven()
	} else {
		var de bool
		return de
	}
}

// GetIsDrivenOk returns a tuple with the IsDriven field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetIsDrivenOk() (*bool, bool) {
	type getResult interface {
		GetIsDrivenOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsDrivenOk()
	} else {
		return nil, false
	}
}

// HasIsDriven returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasIsDriven() bool {
	type getResult interface {
		HasIsDriven() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsDriven()
	} else {
		return false
	}
}

// SetIsDriven gets a reference to the given bool and assigns it to the IsDriven field.
func (o *BTDimensionDisplayData323) SetIsDriven(v bool) {
	type getResult interface {
		SetIsDriven(v bool)
	}

	o.GetActualInstance().(getResult).SetIsDriven(v)
}

// GetIsOverDefined returns the IsOverDefined field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetIsOverDefined() bool {
	type getResult interface {
		GetIsOverDefined() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsOverDefined()
	} else {
		var de bool
		return de
	}
}

// GetIsOverDefinedOk returns a tuple with the IsOverDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetIsOverDefinedOk() (*bool, bool) {
	type getResult interface {
		GetIsOverDefinedOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsOverDefinedOk()
	} else {
		return nil, false
	}
}

// HasIsOverDefined returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasIsOverDefined() bool {
	type getResult interface {
		HasIsOverDefined() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsOverDefined()
	} else {
		return false
	}
}

// SetIsOverDefined gets a reference to the given bool and assigns it to the IsOverDefined field.
func (o *BTDimensionDisplayData323) SetIsOverDefined(v bool) {
	type getResult interface {
		SetIsOverDefined(v bool)
	}

	o.GetActualInstance().(getResult).SetIsOverDefined(v)
}

// GetLowerTolerance returns the LowerTolerance field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetLowerTolerance() float64 {
	type getResult interface {
		GetLowerTolerance() float64
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLowerTolerance()
	} else {
		var de float64
		return de
	}
}

// GetLowerToleranceOk returns a tuple with the LowerTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetLowerToleranceOk() (*float64, bool) {
	type getResult interface {
		GetLowerToleranceOk() (*float64, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLowerToleranceOk()
	} else {
		return nil, false
	}
}

// HasLowerTolerance returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasLowerTolerance() bool {
	type getResult interface {
		HasLowerTolerance() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLowerTolerance()
	} else {
		return false
	}
}

// SetLowerTolerance gets a reference to the given float64 and assigns it to the LowerTolerance field.
func (o *BTDimensionDisplayData323) SetLowerTolerance(v float64) {
	type getResult interface {
		SetLowerTolerance(v float64)
	}

	o.GetActualInstance().(getResult).SetLowerTolerance(v)
}

// GetMaximumLimit returns the MaximumLimit field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetMaximumLimit() float64 {
	type getResult interface {
		GetMaximumLimit() float64
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetMaximumLimit()
	} else {
		var de float64
		return de
	}
}

// GetMaximumLimitOk returns a tuple with the MaximumLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetMaximumLimitOk() (*float64, bool) {
	type getResult interface {
		GetMaximumLimitOk() (*float64, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetMaximumLimitOk()
	} else {
		return nil, false
	}
}

// HasMaximumLimit returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasMaximumLimit() bool {
	type getResult interface {
		HasMaximumLimit() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasMaximumLimit()
	} else {
		return false
	}
}

// SetMaximumLimit gets a reference to the given float64 and assigns it to the MaximumLimit field.
func (o *BTDimensionDisplayData323) SetMaximumLimit(v float64) {
	type getResult interface {
		SetMaximumLimit(v float64)
	}

	o.GetActualInstance().(getResult).SetMaximumLimit(v)
}

// GetMinimumLimit returns the MinimumLimit field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetMinimumLimit() float64 {
	type getResult interface {
		GetMinimumLimit() float64
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetMinimumLimit()
	} else {
		var de float64
		return de
	}
}

// GetMinimumLimitOk returns a tuple with the MinimumLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetMinimumLimitOk() (*float64, bool) {
	type getResult interface {
		GetMinimumLimitOk() (*float64, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetMinimumLimitOk()
	} else {
		return nil, false
	}
}

// HasMinimumLimit returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasMinimumLimit() bool {
	type getResult interface {
		HasMinimumLimit() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasMinimumLimit()
	} else {
		return false
	}
}

// SetMinimumLimit gets a reference to the given float64 and assigns it to the MinimumLimit field.
func (o *BTDimensionDisplayData323) SetMinimumLimit(v float64) {
	type getResult interface {
		SetMinimumLimit(v float64)
	}

	o.GetActualInstance().(getResult).SetMinimumLimit(v)
}

// GetParameterId returns the ParameterId field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetParameterId() string {
	type getResult interface {
		GetParameterId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterId()
	} else {
		var de string
		return de
	}
}

// GetParameterIdOk returns a tuple with the ParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetParameterIdOk() (*string, bool) {
	type getResult interface {
		GetParameterIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterIdOk()
	} else {
		return nil, false
	}
}

// HasParameterId returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasParameterId() bool {
	type getResult interface {
		HasParameterId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasParameterId()
	} else {
		return false
	}
}

// SetParameterId gets a reference to the given string and assigns it to the ParameterId field.
func (o *BTDimensionDisplayData323) SetParameterId(v string) {
	type getResult interface {
		SetParameterId(v string)
	}

	o.GetActualInstance().(getResult).SetParameterId(v)
}

// GetPlaneMatrix returns the PlaneMatrix field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetPlaneMatrix() BTBSMatrix386 {
	type getResult interface {
		GetPlaneMatrix() BTBSMatrix386
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetPlaneMatrix()
	} else {
		var de BTBSMatrix386
		return de
	}
}

// GetPlaneMatrixOk returns a tuple with the PlaneMatrix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetPlaneMatrixOk() (*BTBSMatrix386, bool) {
	type getResult interface {
		GetPlaneMatrixOk() (*BTBSMatrix386, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetPlaneMatrixOk()
	} else {
		return nil, false
	}
}

// HasPlaneMatrix returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasPlaneMatrix() bool {
	type getResult interface {
		HasPlaneMatrix() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasPlaneMatrix()
	} else {
		return false
	}
}

// SetPlaneMatrix gets a reference to the given BTBSMatrix386 and assigns it to the PlaneMatrix field.
func (o *BTDimensionDisplayData323) SetPlaneMatrix(v BTBSMatrix386) {
	type getResult interface {
		SetPlaneMatrix(v BTBSMatrix386)
	}

	o.GetActualInstance().(getResult).SetPlaneMatrix(v)
}

// GetToleranceType returns the ToleranceType field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetToleranceType() GBTToleranceType {
	type getResult interface {
		GetToleranceType() GBTToleranceType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetToleranceType()
	} else {
		var de GBTToleranceType
		return de
	}
}

// GetToleranceTypeOk returns a tuple with the ToleranceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetToleranceTypeOk() (*GBTToleranceType, bool) {
	type getResult interface {
		GetToleranceTypeOk() (*GBTToleranceType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetToleranceTypeOk()
	} else {
		return nil, false
	}
}

// HasToleranceType returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasToleranceType() bool {
	type getResult interface {
		HasToleranceType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasToleranceType()
	} else {
		return false
	}
}

// SetToleranceType gets a reference to the given GBTToleranceType and assigns it to the ToleranceType field.
func (o *BTDimensionDisplayData323) SetToleranceType(v GBTToleranceType) {
	type getResult interface {
		SetToleranceType(v GBTToleranceType)
	}

	o.GetActualInstance().(getResult).SetToleranceType(v)
}

// GetUpperTolerance returns the UpperTolerance field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetUpperTolerance() float64 {
	type getResult interface {
		GetUpperTolerance() float64
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetUpperTolerance()
	} else {
		var de float64
		return de
	}
}

// GetUpperToleranceOk returns a tuple with the UpperTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetUpperToleranceOk() (*float64, bool) {
	type getResult interface {
		GetUpperToleranceOk() (*float64, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetUpperToleranceOk()
	} else {
		return nil, false
	}
}

// HasUpperTolerance returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasUpperTolerance() bool {
	type getResult interface {
		HasUpperTolerance() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasUpperTolerance()
	} else {
		return false
	}
}

// SetUpperTolerance gets a reference to the given float64 and assigns it to the UpperTolerance field.
func (o *BTDimensionDisplayData323) SetUpperTolerance(v float64) {
	type getResult interface {
		SetUpperTolerance(v float64)
	}

	o.GetActualInstance().(getResult).SetUpperTolerance(v)
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTDimensionDisplayData323) GetValue() float64 {
	type getResult interface {
		GetValue() float64
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetValue()
	} else {
		var de float64
		return de
	}
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDimensionDisplayData323) GetValueOk() (*float64, bool) {
	type getResult interface {
		GetValueOk() (*float64, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetValueOk()
	} else {
		return nil, false
	}
}

// HasValue returns a boolean if a field has been set.
func (o *BTDimensionDisplayData323) HasValue() bool {
	type getResult interface {
		HasValue() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasValue()
	} else {
		return false
	}
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *BTDimensionDisplayData323) SetValue(v float64) {
	type getResult interface {
		SetValue(v float64)
	}

	o.GetActualInstance().(getResult).SetValue(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTDimensionDisplayData323) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTAngularDimensionDisplayData-320'
	if jsonDict["btType"] == "BTAngularDimensionDisplayData-320" {
		// try to unmarshal JSON data into BTAngularDimensionDisplayData320
		var qr *BTAngularDimensionDisplayData320
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTAngularDimensionDisplayData320: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTBezierDegreeDimensionDisplayData-2597'
	if jsonDict["btType"] == "BTBezierDegreeDimensionDisplayData-2597" {
		// try to unmarshal JSON data into BTBezierDegreeDimensionDisplayData2597
		var qr *BTBezierDegreeDimensionDisplayData2597
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTBezierDegreeDimensionDisplayData2597: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTCountDimensionDisplayData-1778'
	if jsonDict["btType"] == "BTCountDimensionDisplayData-1778" {
		// try to unmarshal JSON data into BTCountDimensionDisplayData1778
		var qr *BTCountDimensionDisplayData1778
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTCountDimensionDisplayData1778: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTCurveLengthDimensionDisplayData-322'
	if jsonDict["btType"] == "BTCurveLengthDimensionDisplayData-322" {
		// try to unmarshal JSON data into BTCurveLengthDimensionDisplayData322
		var qr *BTCurveLengthDimensionDisplayData322
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTCurveLengthDimensionDisplayData322: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTLinearDimensionDisplayData-330'
	if jsonDict["btType"] == "BTLinearDimensionDisplayData-330" {
		// try to unmarshal JSON data into BTLinearDimensionDisplayData330
		var qr *BTLinearDimensionDisplayData330
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTLinearDimensionDisplayData330: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTRadialDimensionDisplayData-348'
	if jsonDict["btType"] == "BTRadialDimensionDisplayData-348" {
		// try to unmarshal JSON data into BTRadialDimensionDisplayData348
		var qr *BTRadialDimensionDisplayData348
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTRadialDimensionDisplayData348: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTRhoDimensionDisplayData-2892'
	if jsonDict["btType"] == "BTRhoDimensionDisplayData-2892" {
		// try to unmarshal JSON data into BTRhoDimensionDisplayData2892
		var qr *BTRhoDimensionDisplayData2892
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTRhoDimensionDisplayData2892: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTArcLengthDimensionDisplayData-1018'
	if jsonDict["btType"] == "BTArcLengthDimensionDisplayData-1018" {
		// try to unmarshal JSON data into BTArcLengthDimensionDisplayData1018
		var qr *BTArcLengthDimensionDisplayData1018
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTArcLengthDimensionDisplayData1018: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTCenterlineDimensionDisplayData-1798'
	if jsonDict["btType"] == "BTCenterlineDimensionDisplayData-1798" {
		// try to unmarshal JSON data into BTCenterlineDimensionDisplayData1798
		var qr *BTCenterlineDimensionDisplayData1798
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTCenterlineDimensionDisplayData1798: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTEllipseDiameterDimensionDisplayData-1301'
	if jsonDict["btType"] == "BTEllipseDiameterDimensionDisplayData-1301" {
		// try to unmarshal JSON data into BTEllipseDiameterDimensionDisplayData1301
		var qr *BTEllipseDiameterDimensionDisplayData1301
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTDimensionDisplayData323 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTDimensionDisplayData323 = nil
			return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as BTEllipseDiameterDimensionDisplayData1301: %s", err.Error())
		}
	}

	var qtx *base_BTDimensionDisplayData323
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTDimensionDisplayData323 = qtx
		return nil // data stored in dst.base_BTDimensionDisplayData323, return on the first match
	} else {
		dst.implBTDimensionDisplayData323 = nil
		return fmt.Errorf("failed to unmarshal BTDimensionDisplayData323 as base_BTDimensionDisplayData323: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTDimensionDisplayData323) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTDimensionDisplayData323) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTDimensionDisplayData323
}

type NullableBTDimensionDisplayData323 struct {
	value *BTDimensionDisplayData323
	isSet bool
}

func (v NullableBTDimensionDisplayData323) Get() *BTDimensionDisplayData323 {
	return v.value
}

func (v *NullableBTDimensionDisplayData323) Set(val *BTDimensionDisplayData323) {
	v.value = val
	v.isSet = true
}

func (v NullableBTDimensionDisplayData323) IsSet() bool {
	return v.isSet
}

func (v *NullableBTDimensionDisplayData323) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTDimensionDisplayData323(val *BTDimensionDisplayData323) *NullableBTDimensionDisplayData323 {
	return &NullableBTDimensionDisplayData323{value: val, isSet: true}
}

func (v NullableBTDimensionDisplayData323) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTDimensionDisplayData323) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTDimensionDisplayData323 struct {
	// Type of JSON object.
	BtType                *string           `json:"btType,omitempty"`
	CoordinateSystem      *BTMatrix3x3340   `json:"coordinateSystem,omitempty"`
	FeatureId             *string           `json:"featureId,omitempty"`
	HasMaximumLimit_      *bool             `json:"hasMaximumLimit,omitempty"`
	HasMinimumLimit_      *bool             `json:"hasMinimumLimit,omitempty"`
	Id                    *string           `json:"id,omitempty"`
	IsAnnotationDimension *bool             `json:"isAnnotationDimension,omitempty"`
	IsAssociatedWithFlat  *bool             `json:"isAssociatedWithFlat,omitempty"`
	IsDriven              *bool             `json:"isDriven,omitempty"`
	IsOverDefined         *bool             `json:"isOverDefined,omitempty"`
	LowerTolerance        *float64          `json:"lowerTolerance,omitempty"`
	MaximumLimit          *float64          `json:"maximumLimit,omitempty"`
	MinimumLimit          *float64          `json:"minimumLimit,omitempty"`
	ParameterId           *string           `json:"parameterId,omitempty"`
	PlaneMatrix           *BTBSMatrix386    `json:"planeMatrix,omitempty"`
	ToleranceType         *GBTToleranceType `json:"toleranceType,omitempty"`
	UpperTolerance        *float64          `json:"upperTolerance,omitempty"`
	Value                 *float64          `json:"value,omitempty"`
}

// Newbase_BTDimensionDisplayData323 instantiates a new base_BTDimensionDisplayData323 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTDimensionDisplayData323() *base_BTDimensionDisplayData323 {
	this := base_BTDimensionDisplayData323{}
	return &this
}

// Newbase_BTDimensionDisplayData323WithDefaults instantiates a new base_BTDimensionDisplayData323 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTDimensionDisplayData323WithDefaults() *base_BTDimensionDisplayData323 {
	this := base_BTDimensionDisplayData323{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTDimensionDisplayData323) SetBtType(v string) {
	o.BtType = &v
}

// GetCoordinateSystem returns the CoordinateSystem field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetCoordinateSystem() BTMatrix3x3340 {
	if o == nil || o.CoordinateSystem == nil {
		var ret BTMatrix3x3340
		return ret
	}
	return *o.CoordinateSystem
}

// GetCoordinateSystemOk returns a tuple with the CoordinateSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetCoordinateSystemOk() (*BTMatrix3x3340, bool) {
	if o == nil || o.CoordinateSystem == nil {
		return nil, false
	}
	return o.CoordinateSystem, true
}

// HasCoordinateSystem returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasCoordinateSystem() bool {
	if o != nil && o.CoordinateSystem != nil {
		return true
	}

	return false
}

// SetCoordinateSystem gets a reference to the given BTMatrix3x3340 and assigns it to the CoordinateSystem field.
func (o *base_BTDimensionDisplayData323) SetCoordinateSystem(v BTMatrix3x3340) {
	o.CoordinateSystem = &v
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetFeatureId() string {
	if o == nil || o.FeatureId == nil {
		var ret string
		return ret
	}
	return *o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetFeatureIdOk() (*string, bool) {
	if o == nil || o.FeatureId == nil {
		return nil, false
	}
	return o.FeatureId, true
}

// HasFeatureId returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasFeatureId() bool {
	if o != nil && o.FeatureId != nil {
		return true
	}

	return false
}

// SetFeatureId gets a reference to the given string and assigns it to the FeatureId field.
func (o *base_BTDimensionDisplayData323) SetFeatureId(v string) {
	o.FeatureId = &v
}

// GetHasMaximumLimit_ returns the HasMaximumLimit_ field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetHasMaximumLimit_() bool {
	if o == nil || o.HasMaximumLimit_ == nil {
		var ret bool
		return ret
	}
	return *o.HasMaximumLimit_
}

// GetHasMaximumLimit_Ok returns a tuple with the HasMaximumLimit_ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetHasMaximumLimit_Ok() (*bool, bool) {
	if o == nil || o.HasMaximumLimit_ == nil {
		return nil, false
	}
	return o.HasMaximumLimit_, true
}

// HasHasMaximumLimit_ returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasHasMaximumLimit_() bool {
	if o != nil && o.HasMaximumLimit_ != nil {
		return true
	}

	return false
}

// SetHasMaximumLimit_ gets a reference to the given bool and assigns it to the HasMaximumLimit_ field.
func (o *base_BTDimensionDisplayData323) SetHasMaximumLimit_(v bool) {
	o.HasMaximumLimit_ = &v
}

// GetHasMinimumLimit_ returns the HasMinimumLimit_ field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetHasMinimumLimit_() bool {
	if o == nil || o.HasMinimumLimit_ == nil {
		var ret bool
		return ret
	}
	return *o.HasMinimumLimit_
}

// GetHasMinimumLimit_Ok returns a tuple with the HasMinimumLimit_ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetHasMinimumLimit_Ok() (*bool, bool) {
	if o == nil || o.HasMinimumLimit_ == nil {
		return nil, false
	}
	return o.HasMinimumLimit_, true
}

// HasHasMinimumLimit_ returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasHasMinimumLimit_() bool {
	if o != nil && o.HasMinimumLimit_ != nil {
		return true
	}

	return false
}

// SetHasMinimumLimit_ gets a reference to the given bool and assigns it to the HasMinimumLimit_ field.
func (o *base_BTDimensionDisplayData323) SetHasMinimumLimit_(v bool) {
	o.HasMinimumLimit_ = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *base_BTDimensionDisplayData323) SetId(v string) {
	o.Id = &v
}

// GetIsAnnotationDimension returns the IsAnnotationDimension field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetIsAnnotationDimension() bool {
	if o == nil || o.IsAnnotationDimension == nil {
		var ret bool
		return ret
	}
	return *o.IsAnnotationDimension
}

// GetIsAnnotationDimensionOk returns a tuple with the IsAnnotationDimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetIsAnnotationDimensionOk() (*bool, bool) {
	if o == nil || o.IsAnnotationDimension == nil {
		return nil, false
	}
	return o.IsAnnotationDimension, true
}

// HasIsAnnotationDimension returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasIsAnnotationDimension() bool {
	if o != nil && o.IsAnnotationDimension != nil {
		return true
	}

	return false
}

// SetIsAnnotationDimension gets a reference to the given bool and assigns it to the IsAnnotationDimension field.
func (o *base_BTDimensionDisplayData323) SetIsAnnotationDimension(v bool) {
	o.IsAnnotationDimension = &v
}

// GetIsAssociatedWithFlat returns the IsAssociatedWithFlat field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetIsAssociatedWithFlat() bool {
	if o == nil || o.IsAssociatedWithFlat == nil {
		var ret bool
		return ret
	}
	return *o.IsAssociatedWithFlat
}

// GetIsAssociatedWithFlatOk returns a tuple with the IsAssociatedWithFlat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetIsAssociatedWithFlatOk() (*bool, bool) {
	if o == nil || o.IsAssociatedWithFlat == nil {
		return nil, false
	}
	return o.IsAssociatedWithFlat, true
}

// HasIsAssociatedWithFlat returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasIsAssociatedWithFlat() bool {
	if o != nil && o.IsAssociatedWithFlat != nil {
		return true
	}

	return false
}

// SetIsAssociatedWithFlat gets a reference to the given bool and assigns it to the IsAssociatedWithFlat field.
func (o *base_BTDimensionDisplayData323) SetIsAssociatedWithFlat(v bool) {
	o.IsAssociatedWithFlat = &v
}

// GetIsDriven returns the IsDriven field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetIsDriven() bool {
	if o == nil || o.IsDriven == nil {
		var ret bool
		return ret
	}
	return *o.IsDriven
}

// GetIsDrivenOk returns a tuple with the IsDriven field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetIsDrivenOk() (*bool, bool) {
	if o == nil || o.IsDriven == nil {
		return nil, false
	}
	return o.IsDriven, true
}

// HasIsDriven returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasIsDriven() bool {
	if o != nil && o.IsDriven != nil {
		return true
	}

	return false
}

// SetIsDriven gets a reference to the given bool and assigns it to the IsDriven field.
func (o *base_BTDimensionDisplayData323) SetIsDriven(v bool) {
	o.IsDriven = &v
}

// GetIsOverDefined returns the IsOverDefined field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetIsOverDefined() bool {
	if o == nil || o.IsOverDefined == nil {
		var ret bool
		return ret
	}
	return *o.IsOverDefined
}

// GetIsOverDefinedOk returns a tuple with the IsOverDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetIsOverDefinedOk() (*bool, bool) {
	if o == nil || o.IsOverDefined == nil {
		return nil, false
	}
	return o.IsOverDefined, true
}

// HasIsOverDefined returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasIsOverDefined() bool {
	if o != nil && o.IsOverDefined != nil {
		return true
	}

	return false
}

// SetIsOverDefined gets a reference to the given bool and assigns it to the IsOverDefined field.
func (o *base_BTDimensionDisplayData323) SetIsOverDefined(v bool) {
	o.IsOverDefined = &v
}

// GetLowerTolerance returns the LowerTolerance field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetLowerTolerance() float64 {
	if o == nil || o.LowerTolerance == nil {
		var ret float64
		return ret
	}
	return *o.LowerTolerance
}

// GetLowerToleranceOk returns a tuple with the LowerTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetLowerToleranceOk() (*float64, bool) {
	if o == nil || o.LowerTolerance == nil {
		return nil, false
	}
	return o.LowerTolerance, true
}

// HasLowerTolerance returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasLowerTolerance() bool {
	if o != nil && o.LowerTolerance != nil {
		return true
	}

	return false
}

// SetLowerTolerance gets a reference to the given float64 and assigns it to the LowerTolerance field.
func (o *base_BTDimensionDisplayData323) SetLowerTolerance(v float64) {
	o.LowerTolerance = &v
}

// GetMaximumLimit returns the MaximumLimit field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetMaximumLimit() float64 {
	if o == nil || o.MaximumLimit == nil {
		var ret float64
		return ret
	}
	return *o.MaximumLimit
}

// GetMaximumLimitOk returns a tuple with the MaximumLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetMaximumLimitOk() (*float64, bool) {
	if o == nil || o.MaximumLimit == nil {
		return nil, false
	}
	return o.MaximumLimit, true
}

// HasMaximumLimit returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasMaximumLimit() bool {
	if o != nil && o.MaximumLimit != nil {
		return true
	}

	return false
}

// SetMaximumLimit gets a reference to the given float64 and assigns it to the MaximumLimit field.
func (o *base_BTDimensionDisplayData323) SetMaximumLimit(v float64) {
	o.MaximumLimit = &v
}

// GetMinimumLimit returns the MinimumLimit field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetMinimumLimit() float64 {
	if o == nil || o.MinimumLimit == nil {
		var ret float64
		return ret
	}
	return *o.MinimumLimit
}

// GetMinimumLimitOk returns a tuple with the MinimumLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetMinimumLimitOk() (*float64, bool) {
	if o == nil || o.MinimumLimit == nil {
		return nil, false
	}
	return o.MinimumLimit, true
}

// HasMinimumLimit returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasMinimumLimit() bool {
	if o != nil && o.MinimumLimit != nil {
		return true
	}

	return false
}

// SetMinimumLimit gets a reference to the given float64 and assigns it to the MinimumLimit field.
func (o *base_BTDimensionDisplayData323) SetMinimumLimit(v float64) {
	o.MinimumLimit = &v
}

// GetParameterId returns the ParameterId field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetParameterId() string {
	if o == nil || o.ParameterId == nil {
		var ret string
		return ret
	}
	return *o.ParameterId
}

// GetParameterIdOk returns a tuple with the ParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetParameterIdOk() (*string, bool) {
	if o == nil || o.ParameterId == nil {
		return nil, false
	}
	return o.ParameterId, true
}

// HasParameterId returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasParameterId() bool {
	if o != nil && o.ParameterId != nil {
		return true
	}

	return false
}

// SetParameterId gets a reference to the given string and assigns it to the ParameterId field.
func (o *base_BTDimensionDisplayData323) SetParameterId(v string) {
	o.ParameterId = &v
}

// GetPlaneMatrix returns the PlaneMatrix field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetPlaneMatrix() BTBSMatrix386 {
	if o == nil || o.PlaneMatrix == nil {
		var ret BTBSMatrix386
		return ret
	}
	return *o.PlaneMatrix
}

// GetPlaneMatrixOk returns a tuple with the PlaneMatrix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetPlaneMatrixOk() (*BTBSMatrix386, bool) {
	if o == nil || o.PlaneMatrix == nil {
		return nil, false
	}
	return o.PlaneMatrix, true
}

// HasPlaneMatrix returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasPlaneMatrix() bool {
	if o != nil && o.PlaneMatrix != nil {
		return true
	}

	return false
}

// SetPlaneMatrix gets a reference to the given BTBSMatrix386 and assigns it to the PlaneMatrix field.
func (o *base_BTDimensionDisplayData323) SetPlaneMatrix(v BTBSMatrix386) {
	o.PlaneMatrix = &v
}

// GetToleranceType returns the ToleranceType field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetToleranceType() GBTToleranceType {
	if o == nil || o.ToleranceType == nil {
		var ret GBTToleranceType
		return ret
	}
	return *o.ToleranceType
}

// GetToleranceTypeOk returns a tuple with the ToleranceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetToleranceTypeOk() (*GBTToleranceType, bool) {
	if o == nil || o.ToleranceType == nil {
		return nil, false
	}
	return o.ToleranceType, true
}

// HasToleranceType returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasToleranceType() bool {
	if o != nil && o.ToleranceType != nil {
		return true
	}

	return false
}

// SetToleranceType gets a reference to the given GBTToleranceType and assigns it to the ToleranceType field.
func (o *base_BTDimensionDisplayData323) SetToleranceType(v GBTToleranceType) {
	o.ToleranceType = &v
}

// GetUpperTolerance returns the UpperTolerance field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetUpperTolerance() float64 {
	if o == nil || o.UpperTolerance == nil {
		var ret float64
		return ret
	}
	return *o.UpperTolerance
}

// GetUpperToleranceOk returns a tuple with the UpperTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetUpperToleranceOk() (*float64, bool) {
	if o == nil || o.UpperTolerance == nil {
		return nil, false
	}
	return o.UpperTolerance, true
}

// HasUpperTolerance returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasUpperTolerance() bool {
	if o != nil && o.UpperTolerance != nil {
		return true
	}

	return false
}

// SetUpperTolerance gets a reference to the given float64 and assigns it to the UpperTolerance field.
func (o *base_BTDimensionDisplayData323) SetUpperTolerance(v float64) {
	o.UpperTolerance = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *base_BTDimensionDisplayData323) GetValue() float64 {
	if o == nil || o.Value == nil {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTDimensionDisplayData323) GetValueOk() (*float64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *base_BTDimensionDisplayData323) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *base_BTDimensionDisplayData323) SetValue(v float64) {
	o.Value = &v
}

func (o base_BTDimensionDisplayData323) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.CoordinateSystem != nil {
		toSerialize["coordinateSystem"] = o.CoordinateSystem
	}
	if o.FeatureId != nil {
		toSerialize["featureId"] = o.FeatureId
	}
	if o.HasMaximumLimit_ != nil {
		toSerialize["hasMaximumLimit"] = o.HasMaximumLimit_
	}
	if o.HasMinimumLimit_ != nil {
		toSerialize["hasMinimumLimit"] = o.HasMinimumLimit_
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsAnnotationDimension != nil {
		toSerialize["isAnnotationDimension"] = o.IsAnnotationDimension
	}
	if o.IsAssociatedWithFlat != nil {
		toSerialize["isAssociatedWithFlat"] = o.IsAssociatedWithFlat
	}
	if o.IsDriven != nil {
		toSerialize["isDriven"] = o.IsDriven
	}
	if o.IsOverDefined != nil {
		toSerialize["isOverDefined"] = o.IsOverDefined
	}
	if o.LowerTolerance != nil {
		toSerialize["lowerTolerance"] = o.LowerTolerance
	}
	if o.MaximumLimit != nil {
		toSerialize["maximumLimit"] = o.MaximumLimit
	}
	if o.MinimumLimit != nil {
		toSerialize["minimumLimit"] = o.MinimumLimit
	}
	if o.ParameterId != nil {
		toSerialize["parameterId"] = o.ParameterId
	}
	if o.PlaneMatrix != nil {
		toSerialize["planeMatrix"] = o.PlaneMatrix
	}
	if o.ToleranceType != nil {
		toSerialize["toleranceType"] = o.ToleranceType
	}
	if o.UpperTolerance != nil {
		toSerialize["upperTolerance"] = o.UpperTolerance
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

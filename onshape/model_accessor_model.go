/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// AccessorModel struct for AccessorModel
type AccessorModel struct {
	AccessorData         *AccessorData    `json:"accessorData,omitempty"`
	BufferViewModel      *BufferViewModel `json:"bufferViewModel,omitempty"`
	ByteOffset           *int32           `json:"byteOffset,omitempty"`
	ByteStride           *int32           `json:"byteStride,omitempty"`
	ComponentSizeInBytes *int32           `json:"componentSizeInBytes,omitempty"`
	ComponentType        *int32           `json:"componentType,omitempty"`
	Count                *int32           `json:"count,omitempty"`
	ElementSizeInBytes   *int32           `json:"elementSizeInBytes,omitempty"`
	ElementType          *ElementType     `json:"elementType,omitempty"`
	Max                  []float32        `json:"max,omitempty"`
	Min                  []float32        `json:"min,omitempty"`
	Name                 *string          `json:"name,omitempty"`
}

// NewAccessorModel instantiates a new AccessorModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessorModel() *AccessorModel {
	this := AccessorModel{}
	return &this
}

// NewAccessorModelWithDefaults instantiates a new AccessorModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessorModelWithDefaults() *AccessorModel {
	this := AccessorModel{}
	return &this
}

// GetAccessorData returns the AccessorData field value if set, zero value otherwise.
func (o *AccessorModel) GetAccessorData() AccessorData {
	if o == nil || o.AccessorData == nil {
		var ret AccessorData
		return ret
	}
	return *o.AccessorData
}

// GetAccessorDataOk returns a tuple with the AccessorData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetAccessorDataOk() (*AccessorData, bool) {
	if o == nil || o.AccessorData == nil {
		return nil, false
	}
	return o.AccessorData, true
}

// HasAccessorData returns a boolean if a field has been set.
func (o *AccessorModel) HasAccessorData() bool {
	if o != nil && o.AccessorData != nil {
		return true
	}

	return false
}

// SetAccessorData gets a reference to the given AccessorData and assigns it to the AccessorData field.
func (o *AccessorModel) SetAccessorData(v AccessorData) {
	o.AccessorData = &v
}

// GetBufferViewModel returns the BufferViewModel field value if set, zero value otherwise.
func (o *AccessorModel) GetBufferViewModel() BufferViewModel {
	if o == nil || o.BufferViewModel == nil {
		var ret BufferViewModel
		return ret
	}
	return *o.BufferViewModel
}

// GetBufferViewModelOk returns a tuple with the BufferViewModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetBufferViewModelOk() (*BufferViewModel, bool) {
	if o == nil || o.BufferViewModel == nil {
		return nil, false
	}
	return o.BufferViewModel, true
}

// HasBufferViewModel returns a boolean if a field has been set.
func (o *AccessorModel) HasBufferViewModel() bool {
	if o != nil && o.BufferViewModel != nil {
		return true
	}

	return false
}

// SetBufferViewModel gets a reference to the given BufferViewModel and assigns it to the BufferViewModel field.
func (o *AccessorModel) SetBufferViewModel(v BufferViewModel) {
	o.BufferViewModel = &v
}

// GetByteOffset returns the ByteOffset field value if set, zero value otherwise.
func (o *AccessorModel) GetByteOffset() int32 {
	if o == nil || o.ByteOffset == nil {
		var ret int32
		return ret
	}
	return *o.ByteOffset
}

// GetByteOffsetOk returns a tuple with the ByteOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetByteOffsetOk() (*int32, bool) {
	if o == nil || o.ByteOffset == nil {
		return nil, false
	}
	return o.ByteOffset, true
}

// HasByteOffset returns a boolean if a field has been set.
func (o *AccessorModel) HasByteOffset() bool {
	if o != nil && o.ByteOffset != nil {
		return true
	}

	return false
}

// SetByteOffset gets a reference to the given int32 and assigns it to the ByteOffset field.
func (o *AccessorModel) SetByteOffset(v int32) {
	o.ByteOffset = &v
}

// GetByteStride returns the ByteStride field value if set, zero value otherwise.
func (o *AccessorModel) GetByteStride() int32 {
	if o == nil || o.ByteStride == nil {
		var ret int32
		return ret
	}
	return *o.ByteStride
}

// GetByteStrideOk returns a tuple with the ByteStride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetByteStrideOk() (*int32, bool) {
	if o == nil || o.ByteStride == nil {
		return nil, false
	}
	return o.ByteStride, true
}

// HasByteStride returns a boolean if a field has been set.
func (o *AccessorModel) HasByteStride() bool {
	if o != nil && o.ByteStride != nil {
		return true
	}

	return false
}

// SetByteStride gets a reference to the given int32 and assigns it to the ByteStride field.
func (o *AccessorModel) SetByteStride(v int32) {
	o.ByteStride = &v
}

// GetComponentSizeInBytes returns the ComponentSizeInBytes field value if set, zero value otherwise.
func (o *AccessorModel) GetComponentSizeInBytes() int32 {
	if o == nil || o.ComponentSizeInBytes == nil {
		var ret int32
		return ret
	}
	return *o.ComponentSizeInBytes
}

// GetComponentSizeInBytesOk returns a tuple with the ComponentSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetComponentSizeInBytesOk() (*int32, bool) {
	if o == nil || o.ComponentSizeInBytes == nil {
		return nil, false
	}
	return o.ComponentSizeInBytes, true
}

// HasComponentSizeInBytes returns a boolean if a field has been set.
func (o *AccessorModel) HasComponentSizeInBytes() bool {
	if o != nil && o.ComponentSizeInBytes != nil {
		return true
	}

	return false
}

// SetComponentSizeInBytes gets a reference to the given int32 and assigns it to the ComponentSizeInBytes field.
func (o *AccessorModel) SetComponentSizeInBytes(v int32) {
	o.ComponentSizeInBytes = &v
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *AccessorModel) GetComponentType() int32 {
	if o == nil || o.ComponentType == nil {
		var ret int32
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetComponentTypeOk() (*int32, bool) {
	if o == nil || o.ComponentType == nil {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *AccessorModel) HasComponentType() bool {
	if o != nil && o.ComponentType != nil {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given int32 and assigns it to the ComponentType field.
func (o *AccessorModel) SetComponentType(v int32) {
	o.ComponentType = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *AccessorModel) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *AccessorModel) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *AccessorModel) SetCount(v int32) {
	o.Count = &v
}

// GetElementSizeInBytes returns the ElementSizeInBytes field value if set, zero value otherwise.
func (o *AccessorModel) GetElementSizeInBytes() int32 {
	if o == nil || o.ElementSizeInBytes == nil {
		var ret int32
		return ret
	}
	return *o.ElementSizeInBytes
}

// GetElementSizeInBytesOk returns a tuple with the ElementSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetElementSizeInBytesOk() (*int32, bool) {
	if o == nil || o.ElementSizeInBytes == nil {
		return nil, false
	}
	return o.ElementSizeInBytes, true
}

// HasElementSizeInBytes returns a boolean if a field has been set.
func (o *AccessorModel) HasElementSizeInBytes() bool {
	if o != nil && o.ElementSizeInBytes != nil {
		return true
	}

	return false
}

// SetElementSizeInBytes gets a reference to the given int32 and assigns it to the ElementSizeInBytes field.
func (o *AccessorModel) SetElementSizeInBytes(v int32) {
	o.ElementSizeInBytes = &v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *AccessorModel) GetElementType() ElementType {
	if o == nil || o.ElementType == nil {
		var ret ElementType
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetElementTypeOk() (*ElementType, bool) {
	if o == nil || o.ElementType == nil {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *AccessorModel) HasElementType() bool {
	if o != nil && o.ElementType != nil {
		return true
	}

	return false
}

// SetElementType gets a reference to the given ElementType and assigns it to the ElementType field.
func (o *AccessorModel) SetElementType(v ElementType) {
	o.ElementType = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *AccessorModel) GetMax() []float32 {
	if o == nil || o.Max == nil {
		var ret []float32
		return ret
	}
	return o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetMaxOk() ([]float32, bool) {
	if o == nil || o.Max == nil {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *AccessorModel) HasMax() bool {
	if o != nil && o.Max != nil {
		return true
	}

	return false
}

// SetMax gets a reference to the given []float32 and assigns it to the Max field.
func (o *AccessorModel) SetMax(v []float32) {
	o.Max = v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *AccessorModel) GetMin() []float32 {
	if o == nil || o.Min == nil {
		var ret []float32
		return ret
	}
	return o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetMinOk() ([]float32, bool) {
	if o == nil || o.Min == nil {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *AccessorModel) HasMin() bool {
	if o != nil && o.Min != nil {
		return true
	}

	return false
}

// SetMin gets a reference to the given []float32 and assigns it to the Min field.
func (o *AccessorModel) SetMin(v []float32) {
	o.Min = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccessorModel) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessorModel) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccessorModel) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccessorModel) SetName(v string) {
	o.Name = &v
}

func (o AccessorModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessorData != nil {
		toSerialize["accessorData"] = o.AccessorData
	}
	if o.BufferViewModel != nil {
		toSerialize["bufferViewModel"] = o.BufferViewModel
	}
	if o.ByteOffset != nil {
		toSerialize["byteOffset"] = o.ByteOffset
	}
	if o.ByteStride != nil {
		toSerialize["byteStride"] = o.ByteStride
	}
	if o.ComponentSizeInBytes != nil {
		toSerialize["componentSizeInBytes"] = o.ComponentSizeInBytes
	}
	if o.ComponentType != nil {
		toSerialize["componentType"] = o.ComponentType
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.ElementSizeInBytes != nil {
		toSerialize["elementSizeInBytes"] = o.ElementSizeInBytes
	}
	if o.ElementType != nil {
		toSerialize["elementType"] = o.ElementType
	}
	if o.Max != nil {
		toSerialize["max"] = o.Max
	}
	if o.Min != nil {
		toSerialize["min"] = o.Min
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableAccessorModel struct {
	value *AccessorModel
	isSet bool
}

func (v NullableAccessorModel) Get() *AccessorModel {
	return v.value
}

func (v *NullableAccessorModel) Set(val *AccessorModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessorModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessorModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessorModel(val *AccessorModel) *NullableAccessorModel {
	return &NullableAccessorModel{value: val, isSet: true}
}

func (v NullableAccessorModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessorModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTUpdateTaskParams struct for BTUpdateTaskParams
type BTUpdateTaskParams struct {
	// Use to transfer task ownership to the company.
	CompanyId *string `json:"companyId,omitempty"`
	// References to remove from the task.
	DeleteItemIds         []string `json:"deleteItemIds,omitempty"`
	DescriptionParamValue *string  `json:"descriptionParamValue,omitempty"`
	// References to add to the task.
	ItemParams     []BTTaskItemParams `json:"itemParams,omitempty"`
	NameParamValue *string            `json:"nameParamValue,omitempty"`
	// Task metadata properties.
	PropertyValues []BTPropertyValueParam `json:"propertyValues,omitempty"`
}

// NewBTUpdateTaskParams instantiates a new BTUpdateTaskParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTUpdateTaskParams() *BTUpdateTaskParams {
	this := BTUpdateTaskParams{}
	return &this
}

// NewBTUpdateTaskParamsWithDefaults instantiates a new BTUpdateTaskParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTUpdateTaskParamsWithDefaults() *BTUpdateTaskParams {
	this := BTUpdateTaskParams{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *BTUpdateTaskParams) GetCompanyId() string {
	if o == nil || o.CompanyId == nil {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUpdateTaskParams) GetCompanyIdOk() (*string, bool) {
	if o == nil || o.CompanyId == nil {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *BTUpdateTaskParams) HasCompanyId() bool {
	if o != nil && o.CompanyId != nil {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *BTUpdateTaskParams) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetDeleteItemIds returns the DeleteItemIds field value if set, zero value otherwise.
func (o *BTUpdateTaskParams) GetDeleteItemIds() []string {
	if o == nil || o.DeleteItemIds == nil {
		var ret []string
		return ret
	}
	return o.DeleteItemIds
}

// GetDeleteItemIdsOk returns a tuple with the DeleteItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUpdateTaskParams) GetDeleteItemIdsOk() ([]string, bool) {
	if o == nil || o.DeleteItemIds == nil {
		return nil, false
	}
	return o.DeleteItemIds, true
}

// HasDeleteItemIds returns a boolean if a field has been set.
func (o *BTUpdateTaskParams) HasDeleteItemIds() bool {
	if o != nil && o.DeleteItemIds != nil {
		return true
	}

	return false
}

// SetDeleteItemIds gets a reference to the given []string and assigns it to the DeleteItemIds field.
func (o *BTUpdateTaskParams) SetDeleteItemIds(v []string) {
	o.DeleteItemIds = v
}

// GetDescriptionParamValue returns the DescriptionParamValue field value if set, zero value otherwise.
func (o *BTUpdateTaskParams) GetDescriptionParamValue() string {
	if o == nil || o.DescriptionParamValue == nil {
		var ret string
		return ret
	}
	return *o.DescriptionParamValue
}

// GetDescriptionParamValueOk returns a tuple with the DescriptionParamValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUpdateTaskParams) GetDescriptionParamValueOk() (*string, bool) {
	if o == nil || o.DescriptionParamValue == nil {
		return nil, false
	}
	return o.DescriptionParamValue, true
}

// HasDescriptionParamValue returns a boolean if a field has been set.
func (o *BTUpdateTaskParams) HasDescriptionParamValue() bool {
	if o != nil && o.DescriptionParamValue != nil {
		return true
	}

	return false
}

// SetDescriptionParamValue gets a reference to the given string and assigns it to the DescriptionParamValue field.
func (o *BTUpdateTaskParams) SetDescriptionParamValue(v string) {
	o.DescriptionParamValue = &v
}

// GetItemParams returns the ItemParams field value if set, zero value otherwise.
func (o *BTUpdateTaskParams) GetItemParams() []BTTaskItemParams {
	if o == nil || o.ItemParams == nil {
		var ret []BTTaskItemParams
		return ret
	}
	return o.ItemParams
}

// GetItemParamsOk returns a tuple with the ItemParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUpdateTaskParams) GetItemParamsOk() ([]BTTaskItemParams, bool) {
	if o == nil || o.ItemParams == nil {
		return nil, false
	}
	return o.ItemParams, true
}

// HasItemParams returns a boolean if a field has been set.
func (o *BTUpdateTaskParams) HasItemParams() bool {
	if o != nil && o.ItemParams != nil {
		return true
	}

	return false
}

// SetItemParams gets a reference to the given []BTTaskItemParams and assigns it to the ItemParams field.
func (o *BTUpdateTaskParams) SetItemParams(v []BTTaskItemParams) {
	o.ItemParams = v
}

// GetNameParamValue returns the NameParamValue field value if set, zero value otherwise.
func (o *BTUpdateTaskParams) GetNameParamValue() string {
	if o == nil || o.NameParamValue == nil {
		var ret string
		return ret
	}
	return *o.NameParamValue
}

// GetNameParamValueOk returns a tuple with the NameParamValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUpdateTaskParams) GetNameParamValueOk() (*string, bool) {
	if o == nil || o.NameParamValue == nil {
		return nil, false
	}
	return o.NameParamValue, true
}

// HasNameParamValue returns a boolean if a field has been set.
func (o *BTUpdateTaskParams) HasNameParamValue() bool {
	if o != nil && o.NameParamValue != nil {
		return true
	}

	return false
}

// SetNameParamValue gets a reference to the given string and assigns it to the NameParamValue field.
func (o *BTUpdateTaskParams) SetNameParamValue(v string) {
	o.NameParamValue = &v
}

// GetPropertyValues returns the PropertyValues field value if set, zero value otherwise.
func (o *BTUpdateTaskParams) GetPropertyValues() []BTPropertyValueParam {
	if o == nil || o.PropertyValues == nil {
		var ret []BTPropertyValueParam
		return ret
	}
	return o.PropertyValues
}

// GetPropertyValuesOk returns a tuple with the PropertyValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUpdateTaskParams) GetPropertyValuesOk() ([]BTPropertyValueParam, bool) {
	if o == nil || o.PropertyValues == nil {
		return nil, false
	}
	return o.PropertyValues, true
}

// HasPropertyValues returns a boolean if a field has been set.
func (o *BTUpdateTaskParams) HasPropertyValues() bool {
	if o != nil && o.PropertyValues != nil {
		return true
	}

	return false
}

// SetPropertyValues gets a reference to the given []BTPropertyValueParam and assigns it to the PropertyValues field.
func (o *BTUpdateTaskParams) SetPropertyValues(v []BTPropertyValueParam) {
	o.PropertyValues = v
}

func (o BTUpdateTaskParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompanyId != nil {
		toSerialize["companyId"] = o.CompanyId
	}
	if o.DeleteItemIds != nil {
		toSerialize["deleteItemIds"] = o.DeleteItemIds
	}
	if o.DescriptionParamValue != nil {
		toSerialize["descriptionParamValue"] = o.DescriptionParamValue
	}
	if o.ItemParams != nil {
		toSerialize["itemParams"] = o.ItemParams
	}
	if o.NameParamValue != nil {
		toSerialize["nameParamValue"] = o.NameParamValue
	}
	if o.PropertyValues != nil {
		toSerialize["propertyValues"] = o.PropertyValues
	}
	return json.Marshal(toSerialize)
}

type NullableBTUpdateTaskParams struct {
	value *BTUpdateTaskParams
	isSet bool
}

func (v NullableBTUpdateTaskParams) Get() *BTUpdateTaskParams {
	return v.value
}

func (v *NullableBTUpdateTaskParams) Set(val *BTUpdateTaskParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBTUpdateTaskParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBTUpdateTaskParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTUpdateTaskParams(val *BTUpdateTaskParams) *NullableBTUpdateTaskParams {
	return &NullableBTUpdateTaskParams{value: val, isSet: true}
}

func (v NullableBTUpdateTaskParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTUpdateTaskParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

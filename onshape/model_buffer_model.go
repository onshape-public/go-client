/*
Onshape REST API

The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.

API version: 1.171.24257-687de06de652
Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BufferModel struct for BufferModel
type BufferModel struct {
	BufferData *BufferModelBufferData `json:"bufferData,omitempty"`
	ByteLength *int32                 `json:"byteLength,omitempty"`
	Name       *string                `json:"name,omitempty"`
	Uri        *string                `json:"uri,omitempty"`
}

// NewBufferModel instantiates a new BufferModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBufferModel() *BufferModel {
	this := BufferModel{}
	return &this
}

// NewBufferModelWithDefaults instantiates a new BufferModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBufferModelWithDefaults() *BufferModel {
	this := BufferModel{}
	return &this
}

// GetBufferData returns the BufferData field value if set, zero value otherwise.
func (o *BufferModel) GetBufferData() BufferModelBufferData {
	if o == nil || o.BufferData == nil {
		var ret BufferModelBufferData
		return ret
	}
	return *o.BufferData
}

// GetBufferDataOk returns a tuple with the BufferData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BufferModel) GetBufferDataOk() (*BufferModelBufferData, bool) {
	if o == nil || o.BufferData == nil {
		return nil, false
	}
	return o.BufferData, true
}

// HasBufferData returns a boolean if a field has been set.
func (o *BufferModel) HasBufferData() bool {
	if o != nil && o.BufferData != nil {
		return true
	}

	return false
}

// SetBufferData gets a reference to the given BufferModelBufferData and assigns it to the BufferData field.
func (o *BufferModel) SetBufferData(v BufferModelBufferData) {
	o.BufferData = &v
}

// GetByteLength returns the ByteLength field value if set, zero value otherwise.
func (o *BufferModel) GetByteLength() int32 {
	if o == nil || o.ByteLength == nil {
		var ret int32
		return ret
	}
	return *o.ByteLength
}

// GetByteLengthOk returns a tuple with the ByteLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BufferModel) GetByteLengthOk() (*int32, bool) {
	if o == nil || o.ByteLength == nil {
		return nil, false
	}
	return o.ByteLength, true
}

// HasByteLength returns a boolean if a field has been set.
func (o *BufferModel) HasByteLength() bool {
	if o != nil && o.ByteLength != nil {
		return true
	}

	return false
}

// SetByteLength gets a reference to the given int32 and assigns it to the ByteLength field.
func (o *BufferModel) SetByteLength(v int32) {
	o.ByteLength = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BufferModel) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BufferModel) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BufferModel) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BufferModel) SetName(v string) {
	o.Name = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *BufferModel) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BufferModel) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *BufferModel) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *BufferModel) SetUri(v string) {
	o.Uri = &v
}

func (o BufferModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BufferData != nil {
		toSerialize["bufferData"] = o.BufferData
	}
	if o.ByteLength != nil {
		toSerialize["byteLength"] = o.ByteLength
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	return json.Marshal(toSerialize)
}

type NullableBufferModel struct {
	value *BufferModel
	isSet bool
}

func (v NullableBufferModel) Get() *BufferModel {
	return v.value
}

func (v *NullableBufferModel) Set(val *BufferModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBufferModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBufferModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBufferModel(val *BufferModel) *NullableBufferModel {
	return &NullableBufferModel{value: val, isSet: true}
}

func (v NullableBufferModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBufferModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

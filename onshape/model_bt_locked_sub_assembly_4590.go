/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTLockedSubAssembly4590 - struct for BTLockedSubAssembly4590
type BTLockedSubAssembly4590 struct {
	implBTLockedSubAssembly4590 interface{}
}

// BTLockedAtCurrentPosition4006AsBTLockedSubAssembly4590 is a convenience function that returns BTLockedAtCurrentPosition4006 wrapped in BTLockedSubAssembly4590
func (o *BTLockedAtCurrentPosition4006) AsBTLockedSubAssembly4590() *BTLockedSubAssembly4590 {
	return &BTLockedSubAssembly4590{o}
}

// BTLockedAtSubAssemblyPosition3885AsBTLockedSubAssembly4590 is a convenience function that returns BTLockedAtSubAssemblyPosition3885 wrapped in BTLockedSubAssembly4590
func (o *BTLockedAtSubAssemblyPosition3885) AsBTLockedSubAssembly4590() *BTLockedSubAssembly4590 {
	return &BTLockedSubAssembly4590{o}
}

// BTLockedAtNamedPosition3201AsBTLockedSubAssembly4590 is a convenience function that returns BTLockedAtNamedPosition3201 wrapped in BTLockedSubAssembly4590
func (o *BTLockedAtNamedPosition3201) AsBTLockedSubAssembly4590() *BTLockedSubAssembly4590 {
	return &BTLockedSubAssembly4590{o}
}

// NewBTLockedSubAssembly4590 instantiates a new BTLockedSubAssembly4590 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTLockedSubAssembly4590() *BTLockedSubAssembly4590 {
	this := BTLockedSubAssembly4590{Newbase_BTLockedSubAssembly4590()}
	return &this
}

// NewBTLockedSubAssembly4590WithDefaults instantiates a new BTLockedSubAssembly4590 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTLockedSubAssembly4590WithDefaults() *BTLockedSubAssembly4590 {
	this := BTLockedSubAssembly4590{Newbase_BTLockedSubAssembly4590WithDefaults()}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTLockedSubAssembly4590) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTLockedSubAssembly4590) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTLockedSubAssembly4590) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTLockedSubAssembly4590) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetLockType returns the LockType field value if set, zero value otherwise.
func (o *BTLockedSubAssembly4590) GetLockType() GBTSubAssemblyLockType {
	type getResult interface {
		GetLockType() GBTSubAssemblyLockType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLockType()
	} else {
		var de GBTSubAssemblyLockType
		return de
	}
}

// GetLockTypeOk returns a tuple with the LockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTLockedSubAssembly4590) GetLockTypeOk() (*GBTSubAssemblyLockType, bool) {
	type getResult interface {
		GetLockTypeOk() (*GBTSubAssemblyLockType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLockTypeOk()
	} else {
		return nil, false
	}
}

// HasLockType returns a boolean if a field has been set.
func (o *BTLockedSubAssembly4590) HasLockType() bool {
	type getResult interface {
		HasLockType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLockType()
	} else {
		return false
	}
}

// SetLockType gets a reference to the given GBTSubAssemblyLockType and assigns it to the LockType field.
func (o *BTLockedSubAssembly4590) SetLockType(v GBTSubAssemblyLockType) {
	type getResult interface {
		SetLockType(v GBTSubAssemblyLockType)
	}

	o.GetActualInstance().(getResult).SetLockType(v)
}

// GetLockedSubAssemblyOutputInfo returns the LockedSubAssemblyOutputInfo field value if set, zero value otherwise.
func (o *BTLockedSubAssembly4590) GetLockedSubAssemblyOutputInfo() BTRigidOrLockedSubAssemblyOutputInfo3860 {
	type getResult interface {
		GetLockedSubAssemblyOutputInfo() BTRigidOrLockedSubAssemblyOutputInfo3860
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLockedSubAssemblyOutputInfo()
	} else {
		var de BTRigidOrLockedSubAssemblyOutputInfo3860
		return de
	}
}

// GetLockedSubAssemblyOutputInfoOk returns a tuple with the LockedSubAssemblyOutputInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTLockedSubAssembly4590) GetLockedSubAssemblyOutputInfoOk() (*BTRigidOrLockedSubAssemblyOutputInfo3860, bool) {
	type getResult interface {
		GetLockedSubAssemblyOutputInfoOk() (*BTRigidOrLockedSubAssemblyOutputInfo3860, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLockedSubAssemblyOutputInfoOk()
	} else {
		return nil, false
	}
}

// HasLockedSubAssemblyOutputInfo returns a boolean if a field has been set.
func (o *BTLockedSubAssembly4590) HasLockedSubAssemblyOutputInfo() bool {
	type getResult interface {
		HasLockedSubAssemblyOutputInfo() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLockedSubAssemblyOutputInfo()
	} else {
		return false
	}
}

// SetLockedSubAssemblyOutputInfo gets a reference to the given BTRigidOrLockedSubAssemblyOutputInfo3860 and assigns it to the LockedSubAssemblyOutputInfo field.
func (o *BTLockedSubAssembly4590) SetLockedSubAssemblyOutputInfo(v BTRigidOrLockedSubAssemblyOutputInfo3860) {
	type getResult interface {
		SetLockedSubAssemblyOutputInfo(v BTRigidOrLockedSubAssemblyOutputInfo3860)
	}

	o.GetActualInstance().(getResult).SetLockedSubAssemblyOutputInfo(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTLockedSubAssembly4590) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTLockedAtCurrentPosition-4006'
	if jsonDict["btType"] == "BTLockedAtCurrentPosition-4006" {
		// try to unmarshal JSON data into BTLockedAtCurrentPosition4006
		var qr *BTLockedAtCurrentPosition4006
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTLockedSubAssembly4590 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTLockedSubAssembly4590 = nil
			return fmt.Errorf("failed to unmarshal BTLockedSubAssembly4590 as BTLockedAtCurrentPosition4006: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTLockedAtNamedPosition-3201'
	if jsonDict["btType"] == "BTLockedAtNamedPosition-3201" {
		// try to unmarshal JSON data into BTLockedAtNamedPosition3201
		var qr *BTLockedAtNamedPosition3201
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTLockedSubAssembly4590 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTLockedSubAssembly4590 = nil
			return fmt.Errorf("failed to unmarshal BTLockedSubAssembly4590 as BTLockedAtNamedPosition3201: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTLockedAtSubAssemblyPosition-3885'
	if jsonDict["btType"] == "BTLockedAtSubAssemblyPosition-3885" {
		// try to unmarshal JSON data into BTLockedAtSubAssemblyPosition3885
		var qr *BTLockedAtSubAssemblyPosition3885
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTLockedSubAssembly4590 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTLockedSubAssembly4590 = nil
			return fmt.Errorf("failed to unmarshal BTLockedSubAssembly4590 as BTLockedAtSubAssemblyPosition3885: %s", err.Error())
		}
	}

	var qtx *base_BTLockedSubAssembly4590
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTLockedSubAssembly4590 = qtx
		return nil // data stored in dst.base_BTLockedSubAssembly4590, return on the first match
	} else {
		dst.implBTLockedSubAssembly4590 = nil
		return fmt.Errorf("failed to unmarshal BTLockedSubAssembly4590 as base_BTLockedSubAssembly4590: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTLockedSubAssembly4590) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTLockedSubAssembly4590) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTLockedSubAssembly4590
}

type NullableBTLockedSubAssembly4590 struct {
	value *BTLockedSubAssembly4590
	isSet bool
}

func (v NullableBTLockedSubAssembly4590) Get() *BTLockedSubAssembly4590 {
	return v.value
}

func (v *NullableBTLockedSubAssembly4590) Set(val *BTLockedSubAssembly4590) {
	v.value = val
	v.isSet = true
}

func (v NullableBTLockedSubAssembly4590) IsSet() bool {
	return v.isSet
}

func (v *NullableBTLockedSubAssembly4590) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTLockedSubAssembly4590(val *BTLockedSubAssembly4590) *NullableBTLockedSubAssembly4590 {
	return &NullableBTLockedSubAssembly4590{value: val, isSet: true}
}

func (v NullableBTLockedSubAssembly4590) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTLockedSubAssembly4590) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTLockedSubAssembly4590 struct {
	// Type of JSON object.
	BtType                      *string                                   `json:"btType,omitempty"`
	LockType                    *GBTSubAssemblyLockType                   `json:"lockType,omitempty"`
	LockedSubAssemblyOutputInfo *BTRigidOrLockedSubAssemblyOutputInfo3860 `json:"lockedSubAssemblyOutputInfo,omitempty"`
}

// Newbase_BTLockedSubAssembly4590 instantiates a new base_BTLockedSubAssembly4590 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTLockedSubAssembly4590() *base_BTLockedSubAssembly4590 {
	this := base_BTLockedSubAssembly4590{}
	return &this
}

// Newbase_BTLockedSubAssembly4590WithDefaults instantiates a new base_BTLockedSubAssembly4590 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTLockedSubAssembly4590WithDefaults() *base_BTLockedSubAssembly4590 {
	this := base_BTLockedSubAssembly4590{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTLockedSubAssembly4590) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTLockedSubAssembly4590) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTLockedSubAssembly4590) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTLockedSubAssembly4590) SetBtType(v string) {
	o.BtType = &v
}

// GetLockType returns the LockType field value if set, zero value otherwise.
func (o *base_BTLockedSubAssembly4590) GetLockType() GBTSubAssemblyLockType {
	if o == nil || o.LockType == nil {
		var ret GBTSubAssemblyLockType
		return ret
	}
	return *o.LockType
}

// GetLockTypeOk returns a tuple with the LockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTLockedSubAssembly4590) GetLockTypeOk() (*GBTSubAssemblyLockType, bool) {
	if o == nil || o.LockType == nil {
		return nil, false
	}
	return o.LockType, true
}

// HasLockType returns a boolean if a field has been set.
func (o *base_BTLockedSubAssembly4590) HasLockType() bool {
	if o != nil && o.LockType != nil {
		return true
	}

	return false
}

// SetLockType gets a reference to the given GBTSubAssemblyLockType and assigns it to the LockType field.
func (o *base_BTLockedSubAssembly4590) SetLockType(v GBTSubAssemblyLockType) {
	o.LockType = &v
}

// GetLockedSubAssemblyOutputInfo returns the LockedSubAssemblyOutputInfo field value if set, zero value otherwise.
func (o *base_BTLockedSubAssembly4590) GetLockedSubAssemblyOutputInfo() BTRigidOrLockedSubAssemblyOutputInfo3860 {
	if o == nil || o.LockedSubAssemblyOutputInfo == nil {
		var ret BTRigidOrLockedSubAssemblyOutputInfo3860
		return ret
	}
	return *o.LockedSubAssemblyOutputInfo
}

// GetLockedSubAssemblyOutputInfoOk returns a tuple with the LockedSubAssemblyOutputInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTLockedSubAssembly4590) GetLockedSubAssemblyOutputInfoOk() (*BTRigidOrLockedSubAssemblyOutputInfo3860, bool) {
	if o == nil || o.LockedSubAssemblyOutputInfo == nil {
		return nil, false
	}
	return o.LockedSubAssemblyOutputInfo, true
}

// HasLockedSubAssemblyOutputInfo returns a boolean if a field has been set.
func (o *base_BTLockedSubAssembly4590) HasLockedSubAssemblyOutputInfo() bool {
	if o != nil && o.LockedSubAssemblyOutputInfo != nil {
		return true
	}

	return false
}

// SetLockedSubAssemblyOutputInfo gets a reference to the given BTRigidOrLockedSubAssemblyOutputInfo3860 and assigns it to the LockedSubAssemblyOutputInfo field.
func (o *base_BTLockedSubAssembly4590) SetLockedSubAssemblyOutputInfo(v BTRigidOrLockedSubAssemblyOutputInfo3860) {
	o.LockedSubAssemblyOutputInfo = &v
}

func (o base_BTLockedSubAssembly4590) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.LockType != nil {
		toSerialize["lockType"] = o.LockType
	}
	if o.LockedSubAssemblyOutputInfo != nil {
		toSerialize["lockedSubAssemblyOutputInfo"] = o.LockedSubAssemblyOutputInfo
	}
	return json.Marshal(toSerialize)
}

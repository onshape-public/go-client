/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// GBTUiSelectionType the model 'GBTUiSelectionType'
type GBTUiSelectionType string

// List of GBTUiSelectionType
const (
	GBTUiSelectionTypeEntity                GBTUiSelectionType = "ENTITY"
	GBTUiSelectionTypeFeature               GBTUiSelectionType = "FEATURE"
	GBTUiSelectionTypeBody                  GBTUiSelectionType = "BODY"
	GBTUiSelectionTypeOccurrence            GBTUiSelectionType = "OCCURRENCE"
	GBTUiSelectionTypeUsercode              GBTUiSelectionType = "USERCODE"
	GBTUiSelectionTypeRollbackbar           GBTUiSelectionType = "ROLLBACKBAR"
	GBTUiSelectionTypeElement               GBTUiSelectionType = "ELEMENT"
	GBTUiSelectionTypeMate                  GBTUiSelectionType = "MATE"
	GBTUiSelectionTypeMateConnector         GBTUiSelectionType = "MATE_CONNECTOR"
	GBTUiSelectionTypeEdgePoint             GBTUiSelectionType = "EDGE_POINT"
	GBTUiSelectionTypeMeshPoint             GBTUiSelectionType = "MESH_POINT"
	GBTUiSelectionTypeTableItem             GBTUiSelectionType = "TABLE_ITEM"
	GBTUiSelectionTypeSketchGroup           GBTUiSelectionType = "SKETCH_GROUP"
	GBTUiSelectionTypeFolder                GBTUiSelectionType = "FOLDER"
	GBTUiSelectionTypeNonGeometricItem      GBTUiSelectionType = "NON_GEOMETRIC_ITEM"
	GBTUiSelectionTypeTemporaryGeometry     GBTUiSelectionType = "TEMPORARY_GEOMETRY"
	GBTUiSelectionTypeProperty              GBTUiSelectionType = "PROPERTY"
	GBTUiSelectionTypeSimulationLoad        GBTUiSelectionType = "SIMULATION_LOAD"
	GBTUiSelectionTypePersistentQueryString GBTUiSelectionType = "PERSISTENT_QUERY_STRING"
	GBTUiSelectionTypeUnknown               GBTUiSelectionType = "UNKNOWN"
)

// All allowed values of GBTUiSelectionType enum
var AllowedGBTUiSelectionTypeEnumValues = []GBTUiSelectionType{
	"ENTITY",
	"FEATURE",
	"BODY",
	"OCCURRENCE",
	"USERCODE",
	"ROLLBACKBAR",
	"ELEMENT",
	"MATE",
	"MATE_CONNECTOR",
	"EDGE_POINT",
	"MESH_POINT",
	"TABLE_ITEM",
	"SKETCH_GROUP",
	"FOLDER",
	"NON_GEOMETRIC_ITEM",
	"TEMPORARY_GEOMETRY",
	"PROPERTY",
	"SIMULATION_LOAD",
	"PERSISTENT_QUERY_STRING",
	"UNKNOWN",
}

func (v *GBTUiSelectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GBTUiSelectionType(value)
	for _, existing := range AllowedGBTUiSelectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GBTUiSelectionType", value)
}

// NewGBTUiSelectionTypeFromValue returns a pointer to a valid GBTUiSelectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGBTUiSelectionTypeFromValue(v string) (*GBTUiSelectionType, error) {
	ev := GBTUiSelectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GBTUiSelectionType: valid values are %v", v, AllowedGBTUiSelectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GBTUiSelectionType) IsValid() bool {
	for _, existing := range AllowedGBTUiSelectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GBTUiSelectionType value
func (v GBTUiSelectionType) Ptr() *GBTUiSelectionType {
	return &v
}

type NullableGBTUiSelectionType struct {
	value *GBTUiSelectionType
	isSet bool
}

func (v NullableGBTUiSelectionType) Get() *GBTUiSelectionType {
	return v.value
}

func (v *NullableGBTUiSelectionType) Set(val *GBTUiSelectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableGBTUiSelectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableGBTUiSelectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGBTUiSelectionType(val *GBTUiSelectionType) *NullableGBTUiSelectionType {
	return &NullableGBTUiSelectionType{value: val, isSet: true}
}

func (v NullableGBTUiSelectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGBTUiSelectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"context"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
)

// PartNumberApiService PartNumberApi service
type PartNumberApiService service

type ApiUpdateNextNumbersRequest struct {
	ctx                    context.Context
	ApiService             *PartNumberApiService
	bTNextPartNumbersParam *BTNextPartNumbersParam
	cid                    *string
	did                    *string
}

func (r ApiUpdateNextNumbersRequest) BTNextPartNumbersParam(bTNextPartNumbersParam BTNextPartNumbersParam) ApiUpdateNextNumbersRequest {
	r.bTNextPartNumbersParam = &bTNextPartNumbersParam
	return r
}

func (r ApiUpdateNextNumbersRequest) Cid(cid string) ApiUpdateNextNumbersRequest {
	r.cid = &cid
	return r
}

func (r ApiUpdateNextNumbersRequest) Did(did string) ApiUpdateNextNumbersRequest {
	r.did = &did
	return r
}

func (r ApiUpdateNextNumbersRequest) Execute() (*map[string][]BTNextPartNumber, *http.Response, error) {
	return r.ApiService.UpdateNextNumbersExecute(r)
}

/*
UpdateNextNumbers Send the items to generate numbers for, and return the next valid available part numbers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateNextNumbersRequest
*/
func (a *PartNumberApiService) UpdateNextNumbers(ctx context.Context) ApiUpdateNextNumbersRequest {
	return ApiUpdateNextNumbersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string][]BTNextPartNumber
func (a *PartNumberApiService) UpdateNextNumbersExecute(r ApiUpdateNextNumbersRequest) (*map[string][]BTNextPartNumber, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *map[string][]BTNextPartNumber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartNumberApiService.UpdateNextNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partnumber/nextnumbers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bTNextPartNumbersParam == nil {
		return localVarReturnValue, nil, reportError("bTNextPartNumbersParam is required and must be specified")
	}

	if r.cid != nil {
		localVarQueryParams.Add("cid", parameterToString(*r.cid, ""))
	}
	if r.did != nil {
		localVarQueryParams.Add("did", parameterToString(*r.did, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTNextPartNumbersParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	var _ io.Reader

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v map[string][]BTNextPartNumber
		err = a.client.decode(&v, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, &localVarHTTPResponse.Body, localVarHTTPResponse.Header.Get("Content-Type"))

	if err != nil {
		localVarBody, _ := ioutil.ReadAll(localVarHTTPResponse.Body)

		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

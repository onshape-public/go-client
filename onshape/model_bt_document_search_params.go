/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTDocumentSearchParams struct for BTDocumentSearchParams
type BTDocumentSearchParams struct {
	// Filter ID. Options are 0 (my documents), 1 (created), 2 (shared), 3 (trash), 4 (public), 5 (recent), 6 (by owner), 7 (by company), or 9 (by team).
	DocumentFilter *int32                      `json:"documentFilter,omitempty"`
	FoundIn        *BTESVersionWorkspaceChoice `json:"foundIn,omitempty"`
	// Number of results to return per page. Default value is 20 (also the maximum).
	Limit *int32 `json:"limit,omitempty"`
	// Offset. Determines where search results begin. Default value is 0.
	Offset *int32 `json:"offset,omitempty"`
	// Document owner's ID (if the filter is 6 or 7), or Team Id (if the filter is 9)
	OwnerId *string `json:"ownerId,omitempty"`
	// Search document parent Id
	ParentId *string `json:"parentId,omitempty"`
	// Search for documents that contain the given string in the name. Search is not case-sensitive.
	RawQuery *string `json:"rawQuery,omitempty"`
	// Column by which to sort search results. Options are name, modifiedAt, createdAt (Default), email, modifiedBy, and promotedAt.
	SortColumn *string `json:"sortColumn,omitempty"`
	// Sort order. Options are desc (descending, the default), or asc (ascending).
	SortOrder *string `json:"sortOrder,omitempty"`
	// Type of owner. Options are 0 (user), 1 (company), 2 (onshape). If the owner is a teamId, leave this unspecified.
	Type *string            `json:"type,omitempty"`
	When *BTESResultsFilter `json:"when,omitempty"`
}

// NewBTDocumentSearchParams instantiates a new BTDocumentSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTDocumentSearchParams() *BTDocumentSearchParams {
	this := BTDocumentSearchParams{}
	return &this
}

// NewBTDocumentSearchParamsWithDefaults instantiates a new BTDocumentSearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTDocumentSearchParamsWithDefaults() *BTDocumentSearchParams {
	this := BTDocumentSearchParams{}
	return &this
}

// GetDocumentFilter returns the DocumentFilter field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetDocumentFilter() int32 {
	if o == nil || o.DocumentFilter == nil {
		var ret int32
		return ret
	}
	return *o.DocumentFilter
}

// GetDocumentFilterOk returns a tuple with the DocumentFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetDocumentFilterOk() (*int32, bool) {
	if o == nil || o.DocumentFilter == nil {
		return nil, false
	}
	return o.DocumentFilter, true
}

// HasDocumentFilter returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasDocumentFilter() bool {
	if o != nil && o.DocumentFilter != nil {
		return true
	}

	return false
}

// SetDocumentFilter gets a reference to the given int32 and assigns it to the DocumentFilter field.
func (o *BTDocumentSearchParams) SetDocumentFilter(v int32) {
	o.DocumentFilter = &v
}

// GetFoundIn returns the FoundIn field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetFoundIn() BTESVersionWorkspaceChoice {
	if o == nil || o.FoundIn == nil {
		var ret BTESVersionWorkspaceChoice
		return ret
	}
	return *o.FoundIn
}

// GetFoundInOk returns a tuple with the FoundIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetFoundInOk() (*BTESVersionWorkspaceChoice, bool) {
	if o == nil || o.FoundIn == nil {
		return nil, false
	}
	return o.FoundIn, true
}

// HasFoundIn returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasFoundIn() bool {
	if o != nil && o.FoundIn != nil {
		return true
	}

	return false
}

// SetFoundIn gets a reference to the given BTESVersionWorkspaceChoice and assigns it to the FoundIn field.
func (o *BTDocumentSearchParams) SetFoundIn(v BTESVersionWorkspaceChoice) {
	o.FoundIn = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *BTDocumentSearchParams) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *BTDocumentSearchParams) SetOffset(v int32) {
	o.Offset = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetOwnerId() string {
	if o == nil || o.OwnerId == nil {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetOwnerIdOk() (*string, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *BTDocumentSearchParams) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *BTDocumentSearchParams) SetParentId(v string) {
	o.ParentId = &v
}

// GetRawQuery returns the RawQuery field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetRawQuery() string {
	if o == nil || o.RawQuery == nil {
		var ret string
		return ret
	}
	return *o.RawQuery
}

// GetRawQueryOk returns a tuple with the RawQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetRawQueryOk() (*string, bool) {
	if o == nil || o.RawQuery == nil {
		return nil, false
	}
	return o.RawQuery, true
}

// HasRawQuery returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasRawQuery() bool {
	if o != nil && o.RawQuery != nil {
		return true
	}

	return false
}

// SetRawQuery gets a reference to the given string and assigns it to the RawQuery field.
func (o *BTDocumentSearchParams) SetRawQuery(v string) {
	o.RawQuery = &v
}

// GetSortColumn returns the SortColumn field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetSortColumn() string {
	if o == nil || o.SortColumn == nil {
		var ret string
		return ret
	}
	return *o.SortColumn
}

// GetSortColumnOk returns a tuple with the SortColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetSortColumnOk() (*string, bool) {
	if o == nil || o.SortColumn == nil {
		return nil, false
	}
	return o.SortColumn, true
}

// HasSortColumn returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasSortColumn() bool {
	if o != nil && o.SortColumn != nil {
		return true
	}

	return false
}

// SetSortColumn gets a reference to the given string and assigns it to the SortColumn field.
func (o *BTDocumentSearchParams) SetSortColumn(v string) {
	o.SortColumn = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetSortOrder() string {
	if o == nil || o.SortOrder == nil {
		var ret string
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetSortOrderOk() (*string, bool) {
	if o == nil || o.SortOrder == nil {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasSortOrder() bool {
	if o != nil && o.SortOrder != nil {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given string and assigns it to the SortOrder field.
func (o *BTDocumentSearchParams) SetSortOrder(v string) {
	o.SortOrder = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BTDocumentSearchParams) SetType(v string) {
	o.Type = &v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *BTDocumentSearchParams) GetWhen() BTESResultsFilter {
	if o == nil || o.When == nil {
		var ret BTESResultsFilter
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentSearchParams) GetWhenOk() (*BTESResultsFilter, bool) {
	if o == nil || o.When == nil {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *BTDocumentSearchParams) HasWhen() bool {
	if o != nil && o.When != nil {
		return true
	}

	return false
}

// SetWhen gets a reference to the given BTESResultsFilter and assigns it to the When field.
func (o *BTDocumentSearchParams) SetWhen(v BTESResultsFilter) {
	o.When = &v
}

func (o BTDocumentSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentFilter != nil {
		toSerialize["documentFilter"] = o.DocumentFilter
	}
	if o.FoundIn != nil {
		toSerialize["foundIn"] = o.FoundIn
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	if o.RawQuery != nil {
		toSerialize["rawQuery"] = o.RawQuery
	}
	if o.SortColumn != nil {
		toSerialize["sortColumn"] = o.SortColumn
	}
	if o.SortOrder != nil {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.When != nil {
		toSerialize["when"] = o.When
	}
	return json.Marshal(toSerialize)
}

type NullableBTDocumentSearchParams struct {
	value *BTDocumentSearchParams
	isSet bool
}

func (v NullableBTDocumentSearchParams) Get() *BTDocumentSearchParams {
	return v.value
}

func (v *NullableBTDocumentSearchParams) Set(val *BTDocumentSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBTDocumentSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBTDocumentSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTDocumentSearchParams(val *BTDocumentSearchParams) *NullableBTDocumentSearchParams {
	return &NullableBTDocumentSearchParams{value: val, isSet: true}
}

func (v NullableBTDocumentSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTDocumentSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

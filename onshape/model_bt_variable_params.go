/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTVariableParams struct for BTVariableParams
type BTVariableParams struct {
	ConfiguredDescription *BTConfiguredValue `json:"configuredDescription,omitempty"`
	ConfiguredExpression  *BTConfiguredValue `json:"configuredExpression,omitempty"`
	// Variable description, if not configured
	Description *string `json:"description,omitempty"`
	// Variable definition expression, if not configured
	Expression *string `json:"expression,omitempty"`
	// Variable name
	Name string `json:"name"`
	// VariableType name, from FeatureScript VariableType
	Type string `json:"type"`
}

// NewBTVariableParams instantiates a new BTVariableParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTVariableParams(name string, type_ string) *BTVariableParams {
	this := BTVariableParams{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewBTVariableParamsWithDefaults instantiates a new BTVariableParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTVariableParamsWithDefaults() *BTVariableParams {
	this := BTVariableParams{}
	return &this
}

// GetConfiguredDescription returns the ConfiguredDescription field value if set, zero value otherwise.
func (o *BTVariableParams) GetConfiguredDescription() BTConfiguredValue {
	if o == nil || o.ConfiguredDescription == nil {
		var ret BTConfiguredValue
		return ret
	}
	return *o.ConfiguredDescription
}

// GetConfiguredDescriptionOk returns a tuple with the ConfiguredDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVariableParams) GetConfiguredDescriptionOk() (*BTConfiguredValue, bool) {
	if o == nil || o.ConfiguredDescription == nil {
		return nil, false
	}
	return o.ConfiguredDescription, true
}

// HasConfiguredDescription returns a boolean if a field has been set.
func (o *BTVariableParams) HasConfiguredDescription() bool {
	if o != nil && o.ConfiguredDescription != nil {
		return true
	}

	return false
}

// SetConfiguredDescription gets a reference to the given BTConfiguredValue and assigns it to the ConfiguredDescription field.
func (o *BTVariableParams) SetConfiguredDescription(v BTConfiguredValue) {
	o.ConfiguredDescription = &v
}

// GetConfiguredExpression returns the ConfiguredExpression field value if set, zero value otherwise.
func (o *BTVariableParams) GetConfiguredExpression() BTConfiguredValue {
	if o == nil || o.ConfiguredExpression == nil {
		var ret BTConfiguredValue
		return ret
	}
	return *o.ConfiguredExpression
}

// GetConfiguredExpressionOk returns a tuple with the ConfiguredExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVariableParams) GetConfiguredExpressionOk() (*BTConfiguredValue, bool) {
	if o == nil || o.ConfiguredExpression == nil {
		return nil, false
	}
	return o.ConfiguredExpression, true
}

// HasConfiguredExpression returns a boolean if a field has been set.
func (o *BTVariableParams) HasConfiguredExpression() bool {
	if o != nil && o.ConfiguredExpression != nil {
		return true
	}

	return false
}

// SetConfiguredExpression gets a reference to the given BTConfiguredValue and assigns it to the ConfiguredExpression field.
func (o *BTVariableParams) SetConfiguredExpression(v BTConfiguredValue) {
	o.ConfiguredExpression = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BTVariableParams) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVariableParams) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BTVariableParams) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BTVariableParams) SetDescription(v string) {
	o.Description = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *BTVariableParams) GetExpression() string {
	if o == nil || o.Expression == nil {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVariableParams) GetExpressionOk() (*string, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *BTVariableParams) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *BTVariableParams) SetExpression(v string) {
	o.Expression = &v
}

// GetName returns the Name field value
func (o *BTVariableParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BTVariableParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BTVariableParams) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *BTVariableParams) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BTVariableParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BTVariableParams) SetType(v string) {
	o.Type = v
}

func (o BTVariableParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfiguredDescription != nil {
		toSerialize["configuredDescription"] = o.ConfiguredDescription
	}
	if o.ConfiguredExpression != nil {
		toSerialize["configuredExpression"] = o.ConfiguredExpression
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableBTVariableParams struct {
	value *BTVariableParams
	isSet bool
}

func (v NullableBTVariableParams) Get() *BTVariableParams {
	return v.value
}

func (v *NullableBTVariableParams) Set(val *BTVariableParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBTVariableParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBTVariableParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTVariableParams(val *BTVariableParams) *NullableBTVariableParams {
	return &NullableBTVariableParams{value: val, isSet: true}
}

func (v NullableBTVariableParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTVariableParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

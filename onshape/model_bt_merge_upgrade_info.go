/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTMergeUpgradeInfo struct for BTMergeUpgradeInfo
type BTMergeUpgradeInfo struct {
	PendingSourceUpgrade *BTPendingUpgradeInfo `json:"pendingSourceUpgrade,omitempty"`
	PendingTargetUpgrade *BTPendingUpgradeInfo `json:"pendingTargetUpgrade,omitempty"`
	RecommendedVersion   *int32                `json:"recommendedVersion,omitempty"`
	Type                 *BTMergeUpgradeType   `json:"type,omitempty"`
}

// NewBTMergeUpgradeInfo instantiates a new BTMergeUpgradeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMergeUpgradeInfo() *BTMergeUpgradeInfo {
	this := BTMergeUpgradeInfo{}
	return &this
}

// NewBTMergeUpgradeInfoWithDefaults instantiates a new BTMergeUpgradeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMergeUpgradeInfoWithDefaults() *BTMergeUpgradeInfo {
	this := BTMergeUpgradeInfo{}
	return &this
}

// GetPendingSourceUpgrade returns the PendingSourceUpgrade field value if set, zero value otherwise.
func (o *BTMergeUpgradeInfo) GetPendingSourceUpgrade() BTPendingUpgradeInfo {
	if o == nil || o.PendingSourceUpgrade == nil {
		var ret BTPendingUpgradeInfo
		return ret
	}
	return *o.PendingSourceUpgrade
}

// GetPendingSourceUpgradeOk returns a tuple with the PendingSourceUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMergeUpgradeInfo) GetPendingSourceUpgradeOk() (*BTPendingUpgradeInfo, bool) {
	if o == nil || o.PendingSourceUpgrade == nil {
		return nil, false
	}
	return o.PendingSourceUpgrade, true
}

// HasPendingSourceUpgrade returns a boolean if a field has been set.
func (o *BTMergeUpgradeInfo) HasPendingSourceUpgrade() bool {
	if o != nil && o.PendingSourceUpgrade != nil {
		return true
	}

	return false
}

// SetPendingSourceUpgrade gets a reference to the given BTPendingUpgradeInfo and assigns it to the PendingSourceUpgrade field.
func (o *BTMergeUpgradeInfo) SetPendingSourceUpgrade(v BTPendingUpgradeInfo) {
	o.PendingSourceUpgrade = &v
}

// GetPendingTargetUpgrade returns the PendingTargetUpgrade field value if set, zero value otherwise.
func (o *BTMergeUpgradeInfo) GetPendingTargetUpgrade() BTPendingUpgradeInfo {
	if o == nil || o.PendingTargetUpgrade == nil {
		var ret BTPendingUpgradeInfo
		return ret
	}
	return *o.PendingTargetUpgrade
}

// GetPendingTargetUpgradeOk returns a tuple with the PendingTargetUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMergeUpgradeInfo) GetPendingTargetUpgradeOk() (*BTPendingUpgradeInfo, bool) {
	if o == nil || o.PendingTargetUpgrade == nil {
		return nil, false
	}
	return o.PendingTargetUpgrade, true
}

// HasPendingTargetUpgrade returns a boolean if a field has been set.
func (o *BTMergeUpgradeInfo) HasPendingTargetUpgrade() bool {
	if o != nil && o.PendingTargetUpgrade != nil {
		return true
	}

	return false
}

// SetPendingTargetUpgrade gets a reference to the given BTPendingUpgradeInfo and assigns it to the PendingTargetUpgrade field.
func (o *BTMergeUpgradeInfo) SetPendingTargetUpgrade(v BTPendingUpgradeInfo) {
	o.PendingTargetUpgrade = &v
}

// GetRecommendedVersion returns the RecommendedVersion field value if set, zero value otherwise.
func (o *BTMergeUpgradeInfo) GetRecommendedVersion() int32 {
	if o == nil || o.RecommendedVersion == nil {
		var ret int32
		return ret
	}
	return *o.RecommendedVersion
}

// GetRecommendedVersionOk returns a tuple with the RecommendedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMergeUpgradeInfo) GetRecommendedVersionOk() (*int32, bool) {
	if o == nil || o.RecommendedVersion == nil {
		return nil, false
	}
	return o.RecommendedVersion, true
}

// HasRecommendedVersion returns a boolean if a field has been set.
func (o *BTMergeUpgradeInfo) HasRecommendedVersion() bool {
	if o != nil && o.RecommendedVersion != nil {
		return true
	}

	return false
}

// SetRecommendedVersion gets a reference to the given int32 and assigns it to the RecommendedVersion field.
func (o *BTMergeUpgradeInfo) SetRecommendedVersion(v int32) {
	o.RecommendedVersion = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BTMergeUpgradeInfo) GetType() BTMergeUpgradeType {
	if o == nil || o.Type == nil {
		var ret BTMergeUpgradeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMergeUpgradeInfo) GetTypeOk() (*BTMergeUpgradeType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BTMergeUpgradeInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given BTMergeUpgradeType and assigns it to the Type field.
func (o *BTMergeUpgradeInfo) SetType(v BTMergeUpgradeType) {
	o.Type = &v
}

func (o BTMergeUpgradeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PendingSourceUpgrade != nil {
		toSerialize["pendingSourceUpgrade"] = o.PendingSourceUpgrade
	}
	if o.PendingTargetUpgrade != nil {
		toSerialize["pendingTargetUpgrade"] = o.PendingTargetUpgrade
	}
	if o.RecommendedVersion != nil {
		toSerialize["recommendedVersion"] = o.RecommendedVersion
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableBTMergeUpgradeInfo struct {
	value *BTMergeUpgradeInfo
	isSet bool
}

func (v NullableBTMergeUpgradeInfo) Get() *BTMergeUpgradeInfo {
	return v.value
}

func (v *NullableBTMergeUpgradeInfo) Set(val *BTMergeUpgradeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMergeUpgradeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMergeUpgradeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMergeUpgradeInfo(val *BTMergeUpgradeInfo) *NullableBTMergeUpgradeInfo {
	return &NullableBTMergeUpgradeInfo{value: val, isSet: true}
}

func (v NullableBTMergeUpgradeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMergeUpgradeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

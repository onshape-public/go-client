/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTParameterSpec6 - struct for BTParameterSpec6
type BTParameterSpec6 struct {
	implBTParameterSpec6 interface{}
}

// BTParameterSpecMaterial2700AsBTParameterSpec6 is a convenience function that returns BTParameterSpecMaterial2700 wrapped in BTParameterSpec6
func (o *BTParameterSpecMaterial2700) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferenceWithConfiguration2950AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferenceWithConfiguration2950 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferenceWithConfiguration2950) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecQuery174AsBTParameterSpec6 is a convenience function that returns BTParameterSpecQuery174 wrapped in BTParameterSpec6
func (o *BTParameterSpecQuery174) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecCategories4083AsBTParameterSpec6 is a convenience function that returns BTParameterSpecCategories4083 wrapped in BTParameterSpec6
func (o *BTParameterSpecCategories4083) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecButton4111AsBTParameterSpec6 is a convenience function that returns BTParameterSpecButton4111 wrapped in BTParameterSpec6
func (o *BTParameterSpecButton4111) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecArray2600AsBTParameterSpec6 is a convenience function that returns BTParameterSpecArray2600 wrapped in BTParameterSpec6
func (o *BTParameterSpecArray2600) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferencePartStudio1256AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferencePartStudio1256 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferencePartStudio1256) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecNullableQuantity715AsBTParameterSpec6 is a convenience function that returns BTParameterSpecNullableQuantity715 wrapped in BTParameterSpec6
func (o *BTParameterSpecNullableQuantity715) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecQuantity173AsBTParameterSpec6 is a convenience function that returns BTParameterSpecQuantity173 wrapped in BTParameterSpec6
func (o *BTParameterSpecQuantity173) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferenceTable1520AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferenceTable1520 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferenceTable1520) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferenceImage1722AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferenceImage1722 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferenceImage1722) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecForeignId172AsBTParameterSpec6 is a convenience function that returns BTParameterSpecForeignId172 wrapped in BTParameterSpec6
func (o *BTParameterSpecForeignId172) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecEnum171AsBTParameterSpec6 is a convenience function that returns BTParameterSpecEnum171 wrapped in BTParameterSpec6
func (o *BTParameterSpecEnum171) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecProgress3078AsBTParameterSpec6 is a convenience function that returns BTParameterSpecProgress3078 wrapped in BTParameterSpec6
func (o *BTParameterSpecProgress3078) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecStringWithTolerances2535AsBTParameterSpec6 is a convenience function that returns BTParameterSpecStringWithTolerances2535 wrapped in BTParameterSpec6
func (o *BTParameterSpecStringWithTolerances2535) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecAppearance1740AsBTParameterSpec6 is a convenience function that returns BTParameterSpecAppearance1740 wrapped in BTParameterSpec6
func (o *BTParameterSpecAppearance1740) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecFeatureList703AsBTParameterSpec6 is a convenience function that returns BTParameterSpecFeatureList703 wrapped in BTParameterSpec6
func (o *BTParameterSpecFeatureList703) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecLookupTablePath761AsBTParameterSpec6 is a convenience function that returns BTParameterSpecLookupTablePath761 wrapped in BTParameterSpec6
func (o *BTParameterSpecLookupTablePath761) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferenceBlob1367AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferenceBlob1367 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferenceBlob1367) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecMultiEnum3118AsBTParameterSpec6 is a convenience function that returns BTParameterSpecMultiEnum3118 wrapped in BTParameterSpec6
func (o *BTParameterSpecMultiEnum3118) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTReadOnlyParameterSpec1889AsBTParameterSpec6 is a convenience function that returns BTReadOnlyParameterSpec1889 wrapped in BTParameterSpec6
func (o *BTReadOnlyParameterSpec1889) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReference2789AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReference2789 wrapped in BTParameterSpec6
func (o *BTParameterSpecReference2789) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferenceAssembly2821AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferenceAssembly2821 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferenceAssembly2821) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferenceText4945AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferenceText4945 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferenceText4945) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferenceCADImport1792AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferenceCADImport1792 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferenceCADImport1792) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecString175AsBTParameterSpec6 is a convenience function that returns BTParameterSpecString175 wrapped in BTParameterSpec6
func (o *BTParameterSpecString175) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecDerived736AsBTParameterSpec6 is a convenience function that returns BTParameterSpecDerived736 wrapped in BTParameterSpec6
func (o *BTParameterSpecDerived736) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecDatabase1071AsBTParameterSpec6 is a convenience function that returns BTParameterSpecDatabase1071 wrapped in BTParameterSpec6
func (o *BTParameterSpecDatabase1071) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecReferenceJSON1816AsBTParameterSpec6 is a convenience function that returns BTParameterSpecReferenceJSON1816 wrapped in BTParameterSpec6
func (o *BTParameterSpecReferenceJSON1816) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// BTParameterSpecBoolean170AsBTParameterSpec6 is a convenience function that returns BTParameterSpecBoolean170 wrapped in BTParameterSpec6
func (o *BTParameterSpecBoolean170) AsBTParameterSpec6() *BTParameterSpec6 {
	return &BTParameterSpec6{o}
}

// NewBTParameterSpec6 instantiates a new BTParameterSpec6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTParameterSpec6() *BTParameterSpec6 {
	this := BTParameterSpec6{Newbase_BTParameterSpec6()}
	return &this
}

// NewBTParameterSpec6WithDefaults instantiates a new BTParameterSpec6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTParameterSpec6WithDefaults() *BTParameterSpec6 {
	this := BTParameterSpec6{Newbase_BTParameterSpec6WithDefaults()}
	return &this
}

// GetAdditionalLocalizedStrings returns the AdditionalLocalizedStrings field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetAdditionalLocalizedStrings() int32 {
	type getResult interface {
		GetAdditionalLocalizedStrings() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAdditionalLocalizedStrings()
	} else {
		var de int32
		return de
	}
}

// GetAdditionalLocalizedStringsOk returns a tuple with the AdditionalLocalizedStrings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetAdditionalLocalizedStringsOk() (*int32, bool) {
	type getResult interface {
		GetAdditionalLocalizedStringsOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAdditionalLocalizedStringsOk()
	} else {
		return nil, false
	}
}

// HasAdditionalLocalizedStrings returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasAdditionalLocalizedStrings() bool {
	type getResult interface {
		HasAdditionalLocalizedStrings() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasAdditionalLocalizedStrings()
	} else {
		return false
	}
}

// SetAdditionalLocalizedStrings gets a reference to the given int32 and assigns it to the AdditionalLocalizedStrings field.
func (o *BTParameterSpec6) SetAdditionalLocalizedStrings(v int32) {
	type getResult interface {
		SetAdditionalLocalizedStrings(v int32)
	}

	o.GetActualInstance().(getResult).SetAdditionalLocalizedStrings(v)
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTParameterSpec6) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetColumnName() string {
	type getResult interface {
		GetColumnName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetColumnName()
	} else {
		var de string
		return de
	}
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetColumnNameOk() (*string, bool) {
	type getResult interface {
		GetColumnNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetColumnNameOk()
	} else {
		return nil, false
	}
}

// HasColumnName returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasColumnName() bool {
	type getResult interface {
		HasColumnName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasColumnName()
	} else {
		return false
	}
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *BTParameterSpec6) SetColumnName(v string) {
	type getResult interface {
		SetColumnName(v string)
	}

	o.GetActualInstance().(getResult).SetColumnName(v)
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetDefaultValue() BTMParameter1 {
	type getResult interface {
		GetDefaultValue() BTMParameter1
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDefaultValue()
	} else {
		var de BTMParameter1
		return de
	}
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetDefaultValueOk() (*BTMParameter1, bool) {
	type getResult interface {
		GetDefaultValueOk() (*BTMParameter1, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDefaultValueOk()
	} else {
		return nil, false
	}
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasDefaultValue() bool {
	type getResult interface {
		HasDefaultValue() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDefaultValue()
	} else {
		return false
	}
}

// SetDefaultValue gets a reference to the given BTMParameter1 and assigns it to the DefaultValue field.
func (o *BTParameterSpec6) SetDefaultValue(v BTMParameter1) {
	type getResult interface {
		SetDefaultValue(v BTMParameter1)
	}

	o.GetActualInstance().(getResult).SetDefaultValue(v)
}

// GetIconUri returns the IconUri field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetIconUri() string {
	type getResult interface {
		GetIconUri() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIconUri()
	} else {
		var de string
		return de
	}
}

// GetIconUriOk returns a tuple with the IconUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetIconUriOk() (*string, bool) {
	type getResult interface {
		GetIconUriOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIconUriOk()
	} else {
		return nil, false
	}
}

// HasIconUri returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasIconUri() bool {
	type getResult interface {
		HasIconUri() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIconUri()
	} else {
		return false
	}
}

// SetIconUri gets a reference to the given string and assigns it to the IconUri field.
func (o *BTParameterSpec6) SetIconUri(v string) {
	type getResult interface {
		SetIconUri(v string)
	}

	o.GetActualInstance().(getResult).SetIconUri(v)
}

// GetLocalizableName returns the LocalizableName field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetLocalizableName() string {
	type getResult interface {
		GetLocalizableName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocalizableName()
	} else {
		var de string
		return de
	}
}

// GetLocalizableNameOk returns a tuple with the LocalizableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetLocalizableNameOk() (*string, bool) {
	type getResult interface {
		GetLocalizableNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocalizableNameOk()
	} else {
		return nil, false
	}
}

// HasLocalizableName returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasLocalizableName() bool {
	type getResult interface {
		HasLocalizableName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLocalizableName()
	} else {
		return false
	}
}

// SetLocalizableName gets a reference to the given string and assigns it to the LocalizableName field.
func (o *BTParameterSpec6) SetLocalizableName(v string) {
	type getResult interface {
		SetLocalizableName(v string)
	}

	o.GetActualInstance().(getResult).SetLocalizableName(v)
}

// GetLocalizedName returns the LocalizedName field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetLocalizedName() string {
	type getResult interface {
		GetLocalizedName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocalizedName()
	} else {
		var de string
		return de
	}
}

// GetLocalizedNameOk returns a tuple with the LocalizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetLocalizedNameOk() (*string, bool) {
	type getResult interface {
		GetLocalizedNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocalizedNameOk()
	} else {
		return nil, false
	}
}

// HasLocalizedName returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasLocalizedName() bool {
	type getResult interface {
		HasLocalizedName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLocalizedName()
	} else {
		return false
	}
}

// SetLocalizedName gets a reference to the given string and assigns it to the LocalizedName field.
func (o *BTParameterSpec6) SetLocalizedName(v string) {
	type getResult interface {
		SetLocalizedName(v string)
	}

	o.GetActualInstance().(getResult).SetLocalizedName(v)
}

// GetParameterDescription returns the ParameterDescription field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetParameterDescription() string {
	type getResult interface {
		GetParameterDescription() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterDescription()
	} else {
		var de string
		return de
	}
}

// GetParameterDescriptionOk returns a tuple with the ParameterDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetParameterDescriptionOk() (*string, bool) {
	type getResult interface {
		GetParameterDescriptionOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterDescriptionOk()
	} else {
		return nil, false
	}
}

// HasParameterDescription returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasParameterDescription() bool {
	type getResult interface {
		HasParameterDescription() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasParameterDescription()
	} else {
		return false
	}
}

// SetParameterDescription gets a reference to the given string and assigns it to the ParameterDescription field.
func (o *BTParameterSpec6) SetParameterDescription(v string) {
	type getResult interface {
		SetParameterDescription(v string)
	}

	o.GetActualInstance().(getResult).SetParameterDescription(v)
}

// GetParameterId returns the ParameterId field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetParameterId() string {
	type getResult interface {
		GetParameterId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterId()
	} else {
		var de string
		return de
	}
}

// GetParameterIdOk returns a tuple with the ParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetParameterIdOk() (*string, bool) {
	type getResult interface {
		GetParameterIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterIdOk()
	} else {
		return nil, false
	}
}

// HasParameterId returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasParameterId() bool {
	type getResult interface {
		HasParameterId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasParameterId()
	} else {
		return false
	}
}

// SetParameterId gets a reference to the given string and assigns it to the ParameterId field.
func (o *BTParameterSpec6) SetParameterId(v string) {
	type getResult interface {
		SetParameterId(v string)
	}

	o.GetActualInstance().(getResult).SetParameterId(v)
}

// GetParameterName returns the ParameterName field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetParameterName() string {
	type getResult interface {
		GetParameterName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterName()
	} else {
		var de string
		return de
	}
}

// GetParameterNameOk returns a tuple with the ParameterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetParameterNameOk() (*string, bool) {
	type getResult interface {
		GetParameterNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterNameOk()
	} else {
		return nil, false
	}
}

// HasParameterName returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasParameterName() bool {
	type getResult interface {
		HasParameterName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasParameterName()
	} else {
		return false
	}
}

// SetParameterName gets a reference to the given string and assigns it to the ParameterName field.
func (o *BTParameterSpec6) SetParameterName(v string) {
	type getResult interface {
		SetParameterName(v string)
	}

	o.GetActualInstance().(getResult).SetParameterName(v)
}

// GetQuantityType returns the QuantityType field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetQuantityType() GBTQuantityType {
	type getResult interface {
		GetQuantityType() GBTQuantityType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetQuantityType()
	} else {
		var de GBTQuantityType
		return de
	}
}

// GetQuantityTypeOk returns a tuple with the QuantityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetQuantityTypeOk() (*GBTQuantityType, bool) {
	type getResult interface {
		GetQuantityTypeOk() (*GBTQuantityType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetQuantityTypeOk()
	} else {
		return nil, false
	}
}

// HasQuantityType returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasQuantityType() bool {
	type getResult interface {
		HasQuantityType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasQuantityType()
	} else {
		return false
	}
}

// SetQuantityType gets a reference to the given GBTQuantityType and assigns it to the QuantityType field.
func (o *BTParameterSpec6) SetQuantityType(v GBTQuantityType) {
	type getResult interface {
		SetQuantityType(v GBTQuantityType)
	}

	o.GetActualInstance().(getResult).SetQuantityType(v)
}

// GetStringsToLocalize returns the StringsToLocalize field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetStringsToLocalize() []string {
	type getResult interface {
		GetStringsToLocalize() []string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStringsToLocalize()
	} else {
		var de []string
		return de
	}
}

// GetStringsToLocalizeOk returns a tuple with the StringsToLocalize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetStringsToLocalizeOk() ([]string, bool) {
	type getResult interface {
		GetStringsToLocalizeOk() ([]string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStringsToLocalizeOk()
	} else {
		return nil, false
	}
}

// HasStringsToLocalize returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasStringsToLocalize() bool {
	type getResult interface {
		HasStringsToLocalize() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasStringsToLocalize()
	} else {
		return false
	}
}

// SetStringsToLocalize gets a reference to the given []string and assigns it to the StringsToLocalize field.
func (o *BTParameterSpec6) SetStringsToLocalize(v []string) {
	type getResult interface {
		SetStringsToLocalize(v []string)
	}

	o.GetActualInstance().(getResult).SetStringsToLocalize(v)
}

// GetUiHint returns the UiHint field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetUiHint() string {
	type getResult interface {
		GetUiHint() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetUiHint()
	} else {
		var de string
		return de
	}
}

// GetUiHintOk returns a tuple with the UiHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetUiHintOk() (*string, bool) {
	type getResult interface {
		GetUiHintOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetUiHintOk()
	} else {
		return nil, false
	}
}

// HasUiHint returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasUiHint() bool {
	type getResult interface {
		HasUiHint() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasUiHint()
	} else {
		return false
	}
}

// SetUiHint gets a reference to the given string and assigns it to the UiHint field.
func (o *BTParameterSpec6) SetUiHint(v string) {
	type getResult interface {
		SetUiHint(v string)
	}

	o.GetActualInstance().(getResult).SetUiHint(v)
}

// GetUiHints returns the UiHints field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetUiHints() []GBTUIHint {
	type getResult interface {
		GetUiHints() []GBTUIHint
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetUiHints()
	} else {
		var de []GBTUIHint
		return de
	}
}

// GetUiHintsOk returns a tuple with the UiHints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetUiHintsOk() ([]GBTUIHint, bool) {
	type getResult interface {
		GetUiHintsOk() ([]GBTUIHint, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetUiHintsOk()
	} else {
		return nil, false
	}
}

// HasUiHints returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasUiHints() bool {
	type getResult interface {
		HasUiHints() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasUiHints()
	} else {
		return false
	}
}

// SetUiHints gets a reference to the given []GBTUIHint and assigns it to the UiHints field.
func (o *BTParameterSpec6) SetUiHints(v []GBTUIHint) {
	type getResult interface {
		SetUiHints(v []GBTUIHint)
	}

	o.GetActualInstance().(getResult).SetUiHints(v)
}

// GetVisibilityCondition returns the VisibilityCondition field value if set, zero value otherwise.
func (o *BTParameterSpec6) GetVisibilityCondition() BTParameterVisibilityCondition177 {
	type getResult interface {
		GetVisibilityCondition() BTParameterVisibilityCondition177
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetVisibilityCondition()
	} else {
		var de BTParameterVisibilityCondition177
		return de
	}
}

// GetVisibilityConditionOk returns a tuple with the VisibilityCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpec6) GetVisibilityConditionOk() (*BTParameterVisibilityCondition177, bool) {
	type getResult interface {
		GetVisibilityConditionOk() (*BTParameterVisibilityCondition177, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetVisibilityConditionOk()
	} else {
		return nil, false
	}
}

// HasVisibilityCondition returns a boolean if a field has been set.
func (o *BTParameterSpec6) HasVisibilityCondition() bool {
	type getResult interface {
		HasVisibilityCondition() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasVisibilityCondition()
	} else {
		return false
	}
}

// SetVisibilityCondition gets a reference to the given BTParameterVisibilityCondition177 and assigns it to the VisibilityCondition field.
func (o *BTParameterSpec6) SetVisibilityCondition(v BTParameterVisibilityCondition177) {
	type getResult interface {
		SetVisibilityCondition(v BTParameterVisibilityCondition177)
	}

	o.GetActualInstance().(getResult).SetVisibilityCondition(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTParameterSpec6) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTParameterSpecAppearance-1740'
	if jsonDict["btType"] == "BTParameterSpecAppearance-1740" {
		// try to unmarshal JSON data into BTParameterSpecAppearance1740
		var qr *BTParameterSpecAppearance1740
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecAppearance1740: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecArray-2600'
	if jsonDict["btType"] == "BTParameterSpecArray-2600" {
		// try to unmarshal JSON data into BTParameterSpecArray2600
		var qr *BTParameterSpecArray2600
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecArray2600: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecBoolean-170'
	if jsonDict["btType"] == "BTParameterSpecBoolean-170" {
		// try to unmarshal JSON data into BTParameterSpecBoolean170
		var qr *BTParameterSpecBoolean170
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecBoolean170: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecButton-4111'
	if jsonDict["btType"] == "BTParameterSpecButton-4111" {
		// try to unmarshal JSON data into BTParameterSpecButton4111
		var qr *BTParameterSpecButton4111
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecButton4111: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecDatabase-1071'
	if jsonDict["btType"] == "BTParameterSpecDatabase-1071" {
		// try to unmarshal JSON data into BTParameterSpecDatabase1071
		var qr *BTParameterSpecDatabase1071
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecDatabase1071: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecDerived-736'
	if jsonDict["btType"] == "BTParameterSpecDerived-736" {
		// try to unmarshal JSON data into BTParameterSpecDerived736
		var qr *BTParameterSpecDerived736
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecDerived736: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecEnum-171'
	if jsonDict["btType"] == "BTParameterSpecEnum-171" {
		// try to unmarshal JSON data into BTParameterSpecEnum171
		var qr *BTParameterSpecEnum171
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecEnum171: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecFeatureList-703'
	if jsonDict["btType"] == "BTParameterSpecFeatureList-703" {
		// try to unmarshal JSON data into BTParameterSpecFeatureList703
		var qr *BTParameterSpecFeatureList703
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecFeatureList703: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecForeignId-172'
	if jsonDict["btType"] == "BTParameterSpecForeignId-172" {
		// try to unmarshal JSON data into BTParameterSpecForeignId172
		var qr *BTParameterSpecForeignId172
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecForeignId172: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecLookupTablePath-761'
	if jsonDict["btType"] == "BTParameterSpecLookupTablePath-761" {
		// try to unmarshal JSON data into BTParameterSpecLookupTablePath761
		var qr *BTParameterSpecLookupTablePath761
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecLookupTablePath761: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecMaterial-2700'
	if jsonDict["btType"] == "BTParameterSpecMaterial-2700" {
		// try to unmarshal JSON data into BTParameterSpecMaterial2700
		var qr *BTParameterSpecMaterial2700
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecMaterial2700: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecMultiEnum-3118'
	if jsonDict["btType"] == "BTParameterSpecMultiEnum-3118" {
		// try to unmarshal JSON data into BTParameterSpecMultiEnum3118
		var qr *BTParameterSpecMultiEnum3118
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecMultiEnum3118: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecNullableQuantity-715'
	if jsonDict["btType"] == "BTParameterSpecNullableQuantity-715" {
		// try to unmarshal JSON data into BTParameterSpecNullableQuantity715
		var qr *BTParameterSpecNullableQuantity715
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecNullableQuantity715: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecQuantity-173'
	if jsonDict["btType"] == "BTParameterSpecQuantity-173" {
		// try to unmarshal JSON data into BTParameterSpecQuantity173
		var qr *BTParameterSpecQuantity173
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecQuantity173: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecQuery-174'
	if jsonDict["btType"] == "BTParameterSpecQuery-174" {
		// try to unmarshal JSON data into BTParameterSpecQuery174
		var qr *BTParameterSpecQuery174
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecQuery174: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReference-2789'
	if jsonDict["btType"] == "BTParameterSpecReference-2789" {
		// try to unmarshal JSON data into BTParameterSpecReference2789
		var qr *BTParameterSpecReference2789
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReference2789: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecString-175'
	if jsonDict["btType"] == "BTParameterSpecString-175" {
		// try to unmarshal JSON data into BTParameterSpecString175
		var qr *BTParameterSpecString175
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecString175: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTReadOnlyParameterSpec-1889'
	if jsonDict["btType"] == "BTReadOnlyParameterSpec-1889" {
		// try to unmarshal JSON data into BTReadOnlyParameterSpec1889
		var qr *BTReadOnlyParameterSpec1889
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTReadOnlyParameterSpec1889: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecCategories-4083'
	if jsonDict["btType"] == "BTParameterSpecCategories-4083" {
		// try to unmarshal JSON data into BTParameterSpecCategories4083
		var qr *BTParameterSpecCategories4083
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecCategories4083: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecProgress-3078'
	if jsonDict["btType"] == "BTParameterSpecProgress-3078" {
		// try to unmarshal JSON data into BTParameterSpecProgress3078
		var qr *BTParameterSpecProgress3078
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecProgress3078: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferenceAssembly-2821'
	if jsonDict["btType"] == "BTParameterSpecReferenceAssembly-2821" {
		// try to unmarshal JSON data into BTParameterSpecReferenceAssembly2821
		var qr *BTParameterSpecReferenceAssembly2821
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferenceAssembly2821: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferenceBlob-1367'
	if jsonDict["btType"] == "BTParameterSpecReferenceBlob-1367" {
		// try to unmarshal JSON data into BTParameterSpecReferenceBlob1367
		var qr *BTParameterSpecReferenceBlob1367
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferenceBlob1367: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferenceCADImport-1792'
	if jsonDict["btType"] == "BTParameterSpecReferenceCADImport-1792" {
		// try to unmarshal JSON data into BTParameterSpecReferenceCADImport1792
		var qr *BTParameterSpecReferenceCADImport1792
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferenceCADImport1792: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferenceImage-1722'
	if jsonDict["btType"] == "BTParameterSpecReferenceImage-1722" {
		// try to unmarshal JSON data into BTParameterSpecReferenceImage1722
		var qr *BTParameterSpecReferenceImage1722
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferenceImage1722: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferenceJSON-1816'
	if jsonDict["btType"] == "BTParameterSpecReferenceJSON-1816" {
		// try to unmarshal JSON data into BTParameterSpecReferenceJSON1816
		var qr *BTParameterSpecReferenceJSON1816
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferenceJSON1816: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferencePartStudio-1256'
	if jsonDict["btType"] == "BTParameterSpecReferencePartStudio-1256" {
		// try to unmarshal JSON data into BTParameterSpecReferencePartStudio1256
		var qr *BTParameterSpecReferencePartStudio1256
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferencePartStudio1256: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferenceTable-1520'
	if jsonDict["btType"] == "BTParameterSpecReferenceTable-1520" {
		// try to unmarshal JSON data into BTParameterSpecReferenceTable1520
		var qr *BTParameterSpecReferenceTable1520
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferenceTable1520: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferenceText-4945'
	if jsonDict["btType"] == "BTParameterSpecReferenceText-4945" {
		// try to unmarshal JSON data into BTParameterSpecReferenceText4945
		var qr *BTParameterSpecReferenceText4945
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferenceText4945: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecReferenceWithConfiguration-2950'
	if jsonDict["btType"] == "BTParameterSpecReferenceWithConfiguration-2950" {
		// try to unmarshal JSON data into BTParameterSpecReferenceWithConfiguration2950
		var qr *BTParameterSpecReferenceWithConfiguration2950
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecReferenceWithConfiguration2950: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTParameterSpecStringWithTolerances-2535'
	if jsonDict["btType"] == "BTParameterSpecStringWithTolerances-2535" {
		// try to unmarshal JSON data into BTParameterSpecStringWithTolerances2535
		var qr *BTParameterSpecStringWithTolerances2535
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTParameterSpec6 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTParameterSpec6 = nil
			return fmt.Errorf("failed to unmarshal BTParameterSpec6 as BTParameterSpecStringWithTolerances2535: %s", err.Error())
		}
	}

	var qtx *base_BTParameterSpec6
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTParameterSpec6 = qtx
		return nil // data stored in dst.base_BTParameterSpec6, return on the first match
	} else {
		dst.implBTParameterSpec6 = nil
		return fmt.Errorf("failed to unmarshal BTParameterSpec6 as base_BTParameterSpec6: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTParameterSpec6) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTParameterSpec6) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTParameterSpec6
}

type NullableBTParameterSpec6 struct {
	value *BTParameterSpec6
	isSet bool
}

func (v NullableBTParameterSpec6) Get() *BTParameterSpec6 {
	return v.value
}

func (v *NullableBTParameterSpec6) Set(val *BTParameterSpec6) {
	v.value = val
	v.isSet = true
}

func (v NullableBTParameterSpec6) IsSet() bool {
	return v.isSet
}

func (v *NullableBTParameterSpec6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTParameterSpec6(val *BTParameterSpec6) *NullableBTParameterSpec6 {
	return &NullableBTParameterSpec6{value: val, isSet: true}
}

func (v NullableBTParameterSpec6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTParameterSpec6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTParameterSpec6 struct {
	AdditionalLocalizedStrings *int32 `json:"additionalLocalizedStrings,omitempty"`
	// Type of JSON object.
	BtType               *string                            `json:"btType,omitempty"`
	ColumnName           *string                            `json:"columnName,omitempty"`
	DefaultValue         *BTMParameter1                     `json:"defaultValue,omitempty"`
	IconUri              *string                            `json:"iconUri,omitempty"`
	LocalizableName      *string                            `json:"localizableName,omitempty"`
	LocalizedName        *string                            `json:"localizedName,omitempty"`
	ParameterDescription *string                            `json:"parameterDescription,omitempty"`
	ParameterId          *string                            `json:"parameterId,omitempty"`
	ParameterName        *string                            `json:"parameterName,omitempty"`
	QuantityType         *GBTQuantityType                   `json:"quantityType,omitempty"`
	StringsToLocalize    []string                           `json:"stringsToLocalize,omitempty"`
	UiHint               *string                            `json:"uiHint,omitempty"`
	UiHints              []GBTUIHint                        `json:"uiHints,omitempty"`
	VisibilityCondition  *BTParameterVisibilityCondition177 `json:"visibilityCondition,omitempty"`
}

// Newbase_BTParameterSpec6 instantiates a new base_BTParameterSpec6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTParameterSpec6() *base_BTParameterSpec6 {
	this := base_BTParameterSpec6{}
	return &this
}

// Newbase_BTParameterSpec6WithDefaults instantiates a new base_BTParameterSpec6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTParameterSpec6WithDefaults() *base_BTParameterSpec6 {
	this := base_BTParameterSpec6{}
	return &this
}

// GetAdditionalLocalizedStrings returns the AdditionalLocalizedStrings field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetAdditionalLocalizedStrings() int32 {
	if o == nil || o.AdditionalLocalizedStrings == nil {
		var ret int32
		return ret
	}
	return *o.AdditionalLocalizedStrings
}

// GetAdditionalLocalizedStringsOk returns a tuple with the AdditionalLocalizedStrings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetAdditionalLocalizedStringsOk() (*int32, bool) {
	if o == nil || o.AdditionalLocalizedStrings == nil {
		return nil, false
	}
	return o.AdditionalLocalizedStrings, true
}

// HasAdditionalLocalizedStrings returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasAdditionalLocalizedStrings() bool {
	if o != nil && o.AdditionalLocalizedStrings != nil {
		return true
	}

	return false
}

// SetAdditionalLocalizedStrings gets a reference to the given int32 and assigns it to the AdditionalLocalizedStrings field.
func (o *base_BTParameterSpec6) SetAdditionalLocalizedStrings(v int32) {
	o.AdditionalLocalizedStrings = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTParameterSpec6) SetBtType(v string) {
	o.BtType = &v
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetColumnName() string {
	if o == nil || o.ColumnName == nil {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetColumnNameOk() (*string, bool) {
	if o == nil || o.ColumnName == nil {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasColumnName() bool {
	if o != nil && o.ColumnName != nil {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *base_BTParameterSpec6) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetDefaultValue() BTMParameter1 {
	if o == nil || o.DefaultValue == nil {
		var ret BTMParameter1
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetDefaultValueOk() (*BTMParameter1, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given BTMParameter1 and assigns it to the DefaultValue field.
func (o *base_BTParameterSpec6) SetDefaultValue(v BTMParameter1) {
	o.DefaultValue = &v
}

// GetIconUri returns the IconUri field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetIconUri() string {
	if o == nil || o.IconUri == nil {
		var ret string
		return ret
	}
	return *o.IconUri
}

// GetIconUriOk returns a tuple with the IconUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetIconUriOk() (*string, bool) {
	if o == nil || o.IconUri == nil {
		return nil, false
	}
	return o.IconUri, true
}

// HasIconUri returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasIconUri() bool {
	if o != nil && o.IconUri != nil {
		return true
	}

	return false
}

// SetIconUri gets a reference to the given string and assigns it to the IconUri field.
func (o *base_BTParameterSpec6) SetIconUri(v string) {
	o.IconUri = &v
}

// GetLocalizableName returns the LocalizableName field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetLocalizableName() string {
	if o == nil || o.LocalizableName == nil {
		var ret string
		return ret
	}
	return *o.LocalizableName
}

// GetLocalizableNameOk returns a tuple with the LocalizableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetLocalizableNameOk() (*string, bool) {
	if o == nil || o.LocalizableName == nil {
		return nil, false
	}
	return o.LocalizableName, true
}

// HasLocalizableName returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasLocalizableName() bool {
	if o != nil && o.LocalizableName != nil {
		return true
	}

	return false
}

// SetLocalizableName gets a reference to the given string and assigns it to the LocalizableName field.
func (o *base_BTParameterSpec6) SetLocalizableName(v string) {
	o.LocalizableName = &v
}

// GetLocalizedName returns the LocalizedName field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetLocalizedName() string {
	if o == nil || o.LocalizedName == nil {
		var ret string
		return ret
	}
	return *o.LocalizedName
}

// GetLocalizedNameOk returns a tuple with the LocalizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetLocalizedNameOk() (*string, bool) {
	if o == nil || o.LocalizedName == nil {
		return nil, false
	}
	return o.LocalizedName, true
}

// HasLocalizedName returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasLocalizedName() bool {
	if o != nil && o.LocalizedName != nil {
		return true
	}

	return false
}

// SetLocalizedName gets a reference to the given string and assigns it to the LocalizedName field.
func (o *base_BTParameterSpec6) SetLocalizedName(v string) {
	o.LocalizedName = &v
}

// GetParameterDescription returns the ParameterDescription field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetParameterDescription() string {
	if o == nil || o.ParameterDescription == nil {
		var ret string
		return ret
	}
	return *o.ParameterDescription
}

// GetParameterDescriptionOk returns a tuple with the ParameterDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetParameterDescriptionOk() (*string, bool) {
	if o == nil || o.ParameterDescription == nil {
		return nil, false
	}
	return o.ParameterDescription, true
}

// HasParameterDescription returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasParameterDescription() bool {
	if o != nil && o.ParameterDescription != nil {
		return true
	}

	return false
}

// SetParameterDescription gets a reference to the given string and assigns it to the ParameterDescription field.
func (o *base_BTParameterSpec6) SetParameterDescription(v string) {
	o.ParameterDescription = &v
}

// GetParameterId returns the ParameterId field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetParameterId() string {
	if o == nil || o.ParameterId == nil {
		var ret string
		return ret
	}
	return *o.ParameterId
}

// GetParameterIdOk returns a tuple with the ParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetParameterIdOk() (*string, bool) {
	if o == nil || o.ParameterId == nil {
		return nil, false
	}
	return o.ParameterId, true
}

// HasParameterId returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasParameterId() bool {
	if o != nil && o.ParameterId != nil {
		return true
	}

	return false
}

// SetParameterId gets a reference to the given string and assigns it to the ParameterId field.
func (o *base_BTParameterSpec6) SetParameterId(v string) {
	o.ParameterId = &v
}

// GetParameterName returns the ParameterName field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetParameterName() string {
	if o == nil || o.ParameterName == nil {
		var ret string
		return ret
	}
	return *o.ParameterName
}

// GetParameterNameOk returns a tuple with the ParameterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetParameterNameOk() (*string, bool) {
	if o == nil || o.ParameterName == nil {
		return nil, false
	}
	return o.ParameterName, true
}

// HasParameterName returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasParameterName() bool {
	if o != nil && o.ParameterName != nil {
		return true
	}

	return false
}

// SetParameterName gets a reference to the given string and assigns it to the ParameterName field.
func (o *base_BTParameterSpec6) SetParameterName(v string) {
	o.ParameterName = &v
}

// GetQuantityType returns the QuantityType field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetQuantityType() GBTQuantityType {
	if o == nil || o.QuantityType == nil {
		var ret GBTQuantityType
		return ret
	}
	return *o.QuantityType
}

// GetQuantityTypeOk returns a tuple with the QuantityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetQuantityTypeOk() (*GBTQuantityType, bool) {
	if o == nil || o.QuantityType == nil {
		return nil, false
	}
	return o.QuantityType, true
}

// HasQuantityType returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasQuantityType() bool {
	if o != nil && o.QuantityType != nil {
		return true
	}

	return false
}

// SetQuantityType gets a reference to the given GBTQuantityType and assigns it to the QuantityType field.
func (o *base_BTParameterSpec6) SetQuantityType(v GBTQuantityType) {
	o.QuantityType = &v
}

// GetStringsToLocalize returns the StringsToLocalize field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetStringsToLocalize() []string {
	if o == nil || o.StringsToLocalize == nil {
		var ret []string
		return ret
	}
	return o.StringsToLocalize
}

// GetStringsToLocalizeOk returns a tuple with the StringsToLocalize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetStringsToLocalizeOk() ([]string, bool) {
	if o == nil || o.StringsToLocalize == nil {
		return nil, false
	}
	return o.StringsToLocalize, true
}

// HasStringsToLocalize returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasStringsToLocalize() bool {
	if o != nil && o.StringsToLocalize != nil {
		return true
	}

	return false
}

// SetStringsToLocalize gets a reference to the given []string and assigns it to the StringsToLocalize field.
func (o *base_BTParameterSpec6) SetStringsToLocalize(v []string) {
	o.StringsToLocalize = v
}

// GetUiHint returns the UiHint field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetUiHint() string {
	if o == nil || o.UiHint == nil {
		var ret string
		return ret
	}
	return *o.UiHint
}

// GetUiHintOk returns a tuple with the UiHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetUiHintOk() (*string, bool) {
	if o == nil || o.UiHint == nil {
		return nil, false
	}
	return o.UiHint, true
}

// HasUiHint returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasUiHint() bool {
	if o != nil && o.UiHint != nil {
		return true
	}

	return false
}

// SetUiHint gets a reference to the given string and assigns it to the UiHint field.
func (o *base_BTParameterSpec6) SetUiHint(v string) {
	o.UiHint = &v
}

// GetUiHints returns the UiHints field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetUiHints() []GBTUIHint {
	if o == nil || o.UiHints == nil {
		var ret []GBTUIHint
		return ret
	}
	return o.UiHints
}

// GetUiHintsOk returns a tuple with the UiHints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetUiHintsOk() ([]GBTUIHint, bool) {
	if o == nil || o.UiHints == nil {
		return nil, false
	}
	return o.UiHints, true
}

// HasUiHints returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasUiHints() bool {
	if o != nil && o.UiHints != nil {
		return true
	}

	return false
}

// SetUiHints gets a reference to the given []GBTUIHint and assigns it to the UiHints field.
func (o *base_BTParameterSpec6) SetUiHints(v []GBTUIHint) {
	o.UiHints = v
}

// GetVisibilityCondition returns the VisibilityCondition field value if set, zero value otherwise.
func (o *base_BTParameterSpec6) GetVisibilityCondition() BTParameterVisibilityCondition177 {
	if o == nil || o.VisibilityCondition == nil {
		var ret BTParameterVisibilityCondition177
		return ret
	}
	return *o.VisibilityCondition
}

// GetVisibilityConditionOk returns a tuple with the VisibilityCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTParameterSpec6) GetVisibilityConditionOk() (*BTParameterVisibilityCondition177, bool) {
	if o == nil || o.VisibilityCondition == nil {
		return nil, false
	}
	return o.VisibilityCondition, true
}

// HasVisibilityCondition returns a boolean if a field has been set.
func (o *base_BTParameterSpec6) HasVisibilityCondition() bool {
	if o != nil && o.VisibilityCondition != nil {
		return true
	}

	return false
}

// SetVisibilityCondition gets a reference to the given BTParameterVisibilityCondition177 and assigns it to the VisibilityCondition field.
func (o *base_BTParameterSpec6) SetVisibilityCondition(v BTParameterVisibilityCondition177) {
	o.VisibilityCondition = &v
}

func (o base_BTParameterSpec6) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalLocalizedStrings != nil {
		toSerialize["additionalLocalizedStrings"] = o.AdditionalLocalizedStrings
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.ColumnName != nil {
		toSerialize["columnName"] = o.ColumnName
	}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.IconUri != nil {
		toSerialize["iconUri"] = o.IconUri
	}
	if o.LocalizableName != nil {
		toSerialize["localizableName"] = o.LocalizableName
	}
	if o.LocalizedName != nil {
		toSerialize["localizedName"] = o.LocalizedName
	}
	if o.ParameterDescription != nil {
		toSerialize["parameterDescription"] = o.ParameterDescription
	}
	if o.ParameterId != nil {
		toSerialize["parameterId"] = o.ParameterId
	}
	if o.ParameterName != nil {
		toSerialize["parameterName"] = o.ParameterName
	}
	if o.QuantityType != nil {
		toSerialize["quantityType"] = o.QuantityType
	}
	if o.StringsToLocalize != nil {
		toSerialize["stringsToLocalize"] = o.StringsToLocalize
	}
	if o.UiHint != nil {
		toSerialize["uiHint"] = o.UiHint
	}
	if o.UiHints != nil {
		toSerialize["uiHints"] = o.UiHints
	}
	if o.VisibilityCondition != nil {
		toSerialize["visibilityCondition"] = o.VisibilityCondition
	}
	return json.Marshal(toSerialize)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTMetadataValueType the model 'BTMetadataValueType'
type BTMetadataValueType string

// List of BTMetadataValueType
const (
	BTMetadataValueTypeString         BTMetadataValueType = "STRING"
	BTMetadataValueTypeBool           BTMetadataValueType = "BOOL"
	BTMetadataValueTypeInt            BTMetadataValueType = "INT"
	BTMetadataValueTypeDouble         BTMetadataValueType = "DOUBLE"
	BTMetadataValueTypeDate           BTMetadataValueType = "DATE"
	BTMetadataValueTypeEnum           BTMetadataValueType = "ENUM"
	BTMetadataValueTypeObject         BTMetadataValueType = "OBJECT"
	BTMetadataValueTypeBlob           BTMetadataValueType = "BLOB"
	BTMetadataValueTypeUser           BTMetadataValueType = "USER"
	BTMetadataValueTypeList           BTMetadataValueType = "LIST"
	BTMetadataValueTypeForeign        BTMetadataValueType = "FOREIGN"
	BTMetadataValueTypeCategory       BTMetadataValueType = "CATEGORY"
	BTMetadataValueTypeComputed       BTMetadataValueType = "COMPUTED"
	BTMetadataValueTypeValueWithUnits BTMetadataValueType = "VALUE_WITH_UNITS"
)

// All allowed values of BTMetadataValueType enum
var AllowedBTMetadataValueTypeEnumValues = []BTMetadataValueType{
	"STRING",
	"BOOL",
	"INT",
	"DOUBLE",
	"DATE",
	"ENUM",
	"OBJECT",
	"BLOB",
	"USER",
	"LIST",
	"FOREIGN",
	"CATEGORY",
	"COMPUTED",
	"VALUE_WITH_UNITS",
}

func (v *BTMetadataValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BTMetadataValueType(value)
	for _, existing := range AllowedBTMetadataValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BTMetadataValueType", value)
}

// NewBTMetadataValueTypeFromValue returns a pointer to a valid BTMetadataValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBTMetadataValueTypeFromValue(v string) (*BTMetadataValueType, error) {
	ev := BTMetadataValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BTMetadataValueType: valid values are %v", v, AllowedBTMetadataValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BTMetadataValueType) IsValid() bool {
	for _, existing := range AllowedBTMetadataValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BTMetadataValueType value
func (v BTMetadataValueType) Ptr() *BTMetadataValueType {
	return &v
}

type NullableBTMetadataValueType struct {
	value *BTMetadataValueType
	isSet bool
}

func (v NullableBTMetadataValueType) Get() *BTMetadataValueType {
	return v.value
}

func (v *NullableBTMetadataValueType) Set(val *BTMetadataValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMetadataValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMetadataValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMetadataValueType(val *BTMetadataValueType) *NullableBTMetadataValueType {
	return &NullableBTMetadataValueType{value: val, isSet: true}
}

func (v NullableBTMetadataValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMetadataValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTAnnotationDisplayData3225 - struct for BTAnnotationDisplayData3225
type BTAnnotationDisplayData3225 struct {
	implBTAnnotationDisplayData3225 interface{}
}

// BTDatumDisplayData3408AsBTAnnotationDisplayData3225 is a convenience function that returns BTDatumDisplayData3408 wrapped in BTAnnotationDisplayData3225
func (o *BTDatumDisplayData3408) AsBTAnnotationDisplayData3225() *BTAnnotationDisplayData3225 {
	return &BTAnnotationDisplayData3225{o}
}

// BTAnnotationWeldDisplayData4919AsBTAnnotationDisplayData3225 is a convenience function that returns BTAnnotationWeldDisplayData4919 wrapped in BTAnnotationDisplayData3225
func (o *BTAnnotationWeldDisplayData4919) AsBTAnnotationDisplayData3225() *BTAnnotationDisplayData3225 {
	return &BTAnnotationDisplayData3225{o}
}

// BTAnnotationGTolDisplayData4887AsBTAnnotationDisplayData3225 is a convenience function that returns BTAnnotationGTolDisplayData4887 wrapped in BTAnnotationDisplayData3225
func (o *BTAnnotationGTolDisplayData4887) AsBTAnnotationDisplayData3225() *BTAnnotationDisplayData3225 {
	return &BTAnnotationDisplayData3225{o}
}

// NewBTAnnotationDisplayData3225 instantiates a new BTAnnotationDisplayData3225 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTAnnotationDisplayData3225() *BTAnnotationDisplayData3225 {
	this := BTAnnotationDisplayData3225{Newbase_BTAnnotationDisplayData3225()}
	return &this
}

// NewBTAnnotationDisplayData3225WithDefaults instantiates a new BTAnnotationDisplayData3225 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTAnnotationDisplayData3225WithDefaults() *BTAnnotationDisplayData3225 {
	this := BTAnnotationDisplayData3225{Newbase_BTAnnotationDisplayData3225WithDefaults()}
	return &this
}

// GetAnnotationPlane returns the AnnotationPlane field value if set, zero value otherwise.
func (o *BTAnnotationDisplayData3225) GetAnnotationPlane() BTCoordinateSystem387 {
	type getResult interface {
		GetAnnotationPlane() BTCoordinateSystem387
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAnnotationPlane()
	} else {
		var de BTCoordinateSystem387
		return de
	}
}

// GetAnnotationPlaneOk returns a tuple with the AnnotationPlane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDisplayData3225) GetAnnotationPlaneOk() (*BTCoordinateSystem387, bool) {
	type getResult interface {
		GetAnnotationPlaneOk() (*BTCoordinateSystem387, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAnnotationPlaneOk()
	} else {
		return nil, false
	}
}

// HasAnnotationPlane returns a boolean if a field has been set.
func (o *BTAnnotationDisplayData3225) HasAnnotationPlane() bool {
	type getResult interface {
		HasAnnotationPlane() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasAnnotationPlane()
	} else {
		return false
	}
}

// SetAnnotationPlane gets a reference to the given BTCoordinateSystem387 and assigns it to the AnnotationPlane field.
func (o *BTAnnotationDisplayData3225) SetAnnotationPlane(v BTCoordinateSystem387) {
	type getResult interface {
		SetAnnotationPlane(v BTCoordinateSystem387)
	}

	o.GetActualInstance().(getResult).SetAnnotationPlane(v)
}

// GetBasePlane returns the BasePlane field value if set, zero value otherwise.
func (o *BTAnnotationDisplayData3225) GetBasePlane() BTCoordinateSystem387 {
	type getResult interface {
		GetBasePlane() BTCoordinateSystem387
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBasePlane()
	} else {
		var de BTCoordinateSystem387
		return de
	}
}

// GetBasePlaneOk returns a tuple with the BasePlane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDisplayData3225) GetBasePlaneOk() (*BTCoordinateSystem387, bool) {
	type getResult interface {
		GetBasePlaneOk() (*BTCoordinateSystem387, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBasePlaneOk()
	} else {
		return nil, false
	}
}

// HasBasePlane returns a boolean if a field has been set.
func (o *BTAnnotationDisplayData3225) HasBasePlane() bool {
	type getResult interface {
		HasBasePlane() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBasePlane()
	} else {
		return false
	}
}

// SetBasePlane gets a reference to the given BTCoordinateSystem387 and assigns it to the BasePlane field.
func (o *BTAnnotationDisplayData3225) SetBasePlane(v BTCoordinateSystem387) {
	type getResult interface {
		SetBasePlane(v BTCoordinateSystem387)
	}

	o.GetActualInstance().(getResult).SetBasePlane(v)
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTAnnotationDisplayData3225) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDisplayData3225) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTAnnotationDisplayData3225) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTAnnotationDisplayData3225) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetDeterministicId returns the DeterministicId field value if set, zero value otherwise.
func (o *BTAnnotationDisplayData3225) GetDeterministicId() string {
	type getResult interface {
		GetDeterministicId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDeterministicId()
	} else {
		var de string
		return de
	}
}

// GetDeterministicIdOk returns a tuple with the DeterministicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDisplayData3225) GetDeterministicIdOk() (*string, bool) {
	type getResult interface {
		GetDeterministicIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDeterministicIdOk()
	} else {
		return nil, false
	}
}

// HasDeterministicId returns a boolean if a field has been set.
func (o *BTAnnotationDisplayData3225) HasDeterministicId() bool {
	type getResult interface {
		HasDeterministicId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDeterministicId()
	} else {
		return false
	}
}

// SetDeterministicId gets a reference to the given string and assigns it to the DeterministicId field.
func (o *BTAnnotationDisplayData3225) SetDeterministicId(v string) {
	type getResult interface {
		SetDeterministicId(v string)
	}

	o.GetActualInstance().(getResult).SetDeterministicId(v)
}

// GetDxdySegments returns the DxdySegments field value if set, zero value otherwise.
func (o *BTAnnotationDisplayData3225) GetDxdySegments() []BTVector2d1812 {
	type getResult interface {
		GetDxdySegments() []BTVector2d1812
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDxdySegments()
	} else {
		var de []BTVector2d1812
		return de
	}
}

// GetDxdySegmentsOk returns a tuple with the DxdySegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAnnotationDisplayData3225) GetDxdySegmentsOk() ([]BTVector2d1812, bool) {
	type getResult interface {
		GetDxdySegmentsOk() ([]BTVector2d1812, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDxdySegmentsOk()
	} else {
		return nil, false
	}
}

// HasDxdySegments returns a boolean if a field has been set.
func (o *BTAnnotationDisplayData3225) HasDxdySegments() bool {
	type getResult interface {
		HasDxdySegments() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDxdySegments()
	} else {
		return false
	}
}

// SetDxdySegments gets a reference to the given []BTVector2d1812 and assigns it to the DxdySegments field.
func (o *BTAnnotationDisplayData3225) SetDxdySegments(v []BTVector2d1812) {
	type getResult interface {
		SetDxdySegments(v []BTVector2d1812)
	}

	o.GetActualInstance().(getResult).SetDxdySegments(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTAnnotationDisplayData3225) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTAnnotationGTolDisplayData-4887'
	if jsonDict["btType"] == "BTAnnotationGTolDisplayData-4887" {
		// try to unmarshal JSON data into BTAnnotationGTolDisplayData4887
		var qr *BTAnnotationGTolDisplayData4887
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTAnnotationDisplayData3225 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTAnnotationDisplayData3225 = nil
			return fmt.Errorf("failed to unmarshal BTAnnotationDisplayData3225 as BTAnnotationGTolDisplayData4887: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTAnnotationWeldDisplayData-4919'
	if jsonDict["btType"] == "BTAnnotationWeldDisplayData-4919" {
		// try to unmarshal JSON data into BTAnnotationWeldDisplayData4919
		var qr *BTAnnotationWeldDisplayData4919
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTAnnotationDisplayData3225 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTAnnotationDisplayData3225 = nil
			return fmt.Errorf("failed to unmarshal BTAnnotationDisplayData3225 as BTAnnotationWeldDisplayData4919: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTDatumDisplayData-3408'
	if jsonDict["btType"] == "BTDatumDisplayData-3408" {
		// try to unmarshal JSON data into BTDatumDisplayData3408
		var qr *BTDatumDisplayData3408
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTAnnotationDisplayData3225 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTAnnotationDisplayData3225 = nil
			return fmt.Errorf("failed to unmarshal BTAnnotationDisplayData3225 as BTDatumDisplayData3408: %s", err.Error())
		}
	}

	var qtx *base_BTAnnotationDisplayData3225
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTAnnotationDisplayData3225 = qtx
		return nil // data stored in dst.base_BTAnnotationDisplayData3225, return on the first match
	} else {
		dst.implBTAnnotationDisplayData3225 = nil
		return fmt.Errorf("failed to unmarshal BTAnnotationDisplayData3225 as base_BTAnnotationDisplayData3225: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTAnnotationDisplayData3225) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTAnnotationDisplayData3225) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTAnnotationDisplayData3225
}

type NullableBTAnnotationDisplayData3225 struct {
	value *BTAnnotationDisplayData3225
	isSet bool
}

func (v NullableBTAnnotationDisplayData3225) Get() *BTAnnotationDisplayData3225 {
	return v.value
}

func (v *NullableBTAnnotationDisplayData3225) Set(val *BTAnnotationDisplayData3225) {
	v.value = val
	v.isSet = true
}

func (v NullableBTAnnotationDisplayData3225) IsSet() bool {
	return v.isSet
}

func (v *NullableBTAnnotationDisplayData3225) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTAnnotationDisplayData3225(val *BTAnnotationDisplayData3225) *NullableBTAnnotationDisplayData3225 {
	return &NullableBTAnnotationDisplayData3225{value: val, isSet: true}
}

func (v NullableBTAnnotationDisplayData3225) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTAnnotationDisplayData3225) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTAnnotationDisplayData3225 struct {
	AnnotationPlane *BTCoordinateSystem387 `json:"annotationPlane,omitempty"`
	BasePlane       *BTCoordinateSystem387 `json:"basePlane,omitempty"`
	// Type of JSON object.
	BtType          *string          `json:"btType,omitempty"`
	DeterministicId *string          `json:"deterministicId,omitempty"`
	DxdySegments    []BTVector2d1812 `json:"dxdySegments,omitempty"`
}

// Newbase_BTAnnotationDisplayData3225 instantiates a new base_BTAnnotationDisplayData3225 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTAnnotationDisplayData3225() *base_BTAnnotationDisplayData3225 {
	this := base_BTAnnotationDisplayData3225{}
	return &this
}

// Newbase_BTAnnotationDisplayData3225WithDefaults instantiates a new base_BTAnnotationDisplayData3225 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTAnnotationDisplayData3225WithDefaults() *base_BTAnnotationDisplayData3225 {
	this := base_BTAnnotationDisplayData3225{}
	return &this
}

// GetAnnotationPlane returns the AnnotationPlane field value if set, zero value otherwise.
func (o *base_BTAnnotationDisplayData3225) GetAnnotationPlane() BTCoordinateSystem387 {
	if o == nil || o.AnnotationPlane == nil {
		var ret BTCoordinateSystem387
		return ret
	}
	return *o.AnnotationPlane
}

// GetAnnotationPlaneOk returns a tuple with the AnnotationPlane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTAnnotationDisplayData3225) GetAnnotationPlaneOk() (*BTCoordinateSystem387, bool) {
	if o == nil || o.AnnotationPlane == nil {
		return nil, false
	}
	return o.AnnotationPlane, true
}

// HasAnnotationPlane returns a boolean if a field has been set.
func (o *base_BTAnnotationDisplayData3225) HasAnnotationPlane() bool {
	if o != nil && o.AnnotationPlane != nil {
		return true
	}

	return false
}

// SetAnnotationPlane gets a reference to the given BTCoordinateSystem387 and assigns it to the AnnotationPlane field.
func (o *base_BTAnnotationDisplayData3225) SetAnnotationPlane(v BTCoordinateSystem387) {
	o.AnnotationPlane = &v
}

// GetBasePlane returns the BasePlane field value if set, zero value otherwise.
func (o *base_BTAnnotationDisplayData3225) GetBasePlane() BTCoordinateSystem387 {
	if o == nil || o.BasePlane == nil {
		var ret BTCoordinateSystem387
		return ret
	}
	return *o.BasePlane
}

// GetBasePlaneOk returns a tuple with the BasePlane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTAnnotationDisplayData3225) GetBasePlaneOk() (*BTCoordinateSystem387, bool) {
	if o == nil || o.BasePlane == nil {
		return nil, false
	}
	return o.BasePlane, true
}

// HasBasePlane returns a boolean if a field has been set.
func (o *base_BTAnnotationDisplayData3225) HasBasePlane() bool {
	if o != nil && o.BasePlane != nil {
		return true
	}

	return false
}

// SetBasePlane gets a reference to the given BTCoordinateSystem387 and assigns it to the BasePlane field.
func (o *base_BTAnnotationDisplayData3225) SetBasePlane(v BTCoordinateSystem387) {
	o.BasePlane = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTAnnotationDisplayData3225) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTAnnotationDisplayData3225) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTAnnotationDisplayData3225) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTAnnotationDisplayData3225) SetBtType(v string) {
	o.BtType = &v
}

// GetDeterministicId returns the DeterministicId field value if set, zero value otherwise.
func (o *base_BTAnnotationDisplayData3225) GetDeterministicId() string {
	if o == nil || o.DeterministicId == nil {
		var ret string
		return ret
	}
	return *o.DeterministicId
}

// GetDeterministicIdOk returns a tuple with the DeterministicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTAnnotationDisplayData3225) GetDeterministicIdOk() (*string, bool) {
	if o == nil || o.DeterministicId == nil {
		return nil, false
	}
	return o.DeterministicId, true
}

// HasDeterministicId returns a boolean if a field has been set.
func (o *base_BTAnnotationDisplayData3225) HasDeterministicId() bool {
	if o != nil && o.DeterministicId != nil {
		return true
	}

	return false
}

// SetDeterministicId gets a reference to the given string and assigns it to the DeterministicId field.
func (o *base_BTAnnotationDisplayData3225) SetDeterministicId(v string) {
	o.DeterministicId = &v
}

// GetDxdySegments returns the DxdySegments field value if set, zero value otherwise.
func (o *base_BTAnnotationDisplayData3225) GetDxdySegments() []BTVector2d1812 {
	if o == nil || o.DxdySegments == nil {
		var ret []BTVector2d1812
		return ret
	}
	return o.DxdySegments
}

// GetDxdySegmentsOk returns a tuple with the DxdySegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTAnnotationDisplayData3225) GetDxdySegmentsOk() ([]BTVector2d1812, bool) {
	if o == nil || o.DxdySegments == nil {
		return nil, false
	}
	return o.DxdySegments, true
}

// HasDxdySegments returns a boolean if a field has been set.
func (o *base_BTAnnotationDisplayData3225) HasDxdySegments() bool {
	if o != nil && o.DxdySegments != nil {
		return true
	}

	return false
}

// SetDxdySegments gets a reference to the given []BTVector2d1812 and assigns it to the DxdySegments field.
func (o *base_BTAnnotationDisplayData3225) SetDxdySegments(v []BTVector2d1812) {
	o.DxdySegments = v
}

func (o base_BTAnnotationDisplayData3225) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AnnotationPlane != nil {
		toSerialize["annotationPlane"] = o.AnnotationPlane
	}
	if o.BasePlane != nil {
		toSerialize["basePlane"] = o.BasePlane
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.DeterministicId != nil {
		toSerialize["deterministicId"] = o.DeterministicId
	}
	if o.DxdySegments != nil {
		toSerialize["dxdySegments"] = o.DxdySegments
	}
	return json.Marshal(toSerialize)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTPExpression9 - struct for BTPExpression9
type BTPExpression9 struct {
	implBTPExpression9 interface{}
}

// BTPLiteral253AsBTPExpression9 is a convenience function that returns BTPLiteral253 wrapped in BTPExpression9
func (o *BTPLiteral253) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionAccess237AsBTPExpression9 is a convenience function that returns BTPExpressionAccess237 wrapped in BTPExpression9
func (o *BTPExpressionAccess237) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionBuiltinCall239AsBTPExpression9 is a convenience function that returns BTPExpressionBuiltinCall239 wrapped in BTPExpression9
func (o *BTPExpressionBuiltinCall239) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionCall240AsBTPExpression9 is a convenience function that returns BTPExpressionCall240 wrapped in BTPExpression9
func (o *BTPExpressionCall240) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionFunction1325AsBTPExpression9 is a convenience function that returns BTPExpressionFunction1325 wrapped in BTPExpression9
func (o *BTPExpressionFunction1325) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionSwitch2632AsBTPExpression9 is a convenience function that returns BTPExpressionSwitch2632 wrapped in BTPExpression9
func (o *BTPExpressionSwitch2632) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionVarReference245AsBTPExpression9 is a convenience function that returns BTPExpressionVarReference245 wrapped in BTPExpression9
func (o *BTPExpressionVarReference245) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPLiteralUndefined260AsBTPExpression9 is a convenience function that returns BTPLiteralUndefined260 wrapped in BTPExpression9
func (o *BTPLiteralUndefined260) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPLiteralString259AsBTPExpression9 is a convenience function that returns BTPLiteralString259 wrapped in BTPExpression9
func (o *BTPLiteralString259) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionAs238AsBTPExpression9 is a convenience function that returns BTPExpressionAs238 wrapped in BTPExpression9
func (o *BTPExpressionAs238) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPLiteralBoolean255AsBTPExpression9 is a convenience function that returns BTPLiteralBoolean255 wrapped in BTPExpression9
func (o *BTPLiteralBoolean255) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionGroup241AsBTPExpression9 is a convenience function that returns BTPExpressionGroup241 wrapped in BTPExpression9
func (o *BTPExpressionGroup241) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionNew243AsBTPExpression9 is a convenience function that returns BTPExpressionNew243 wrapped in BTPExpression9
func (o *BTPExpressionNew243) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionOperator244AsBTPExpression9 is a convenience function that returns BTPExpressionOperator244 wrapped in BTPExpression9
func (o *BTPExpressionOperator244) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPLiteralArray254AsBTPExpression9 is a convenience function that returns BTPLiteralArray254 wrapped in BTPExpression9
func (o *BTPLiteralArray254) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionIs242AsBTPExpression9 is a convenience function that returns BTPExpressionIs242 wrapped in BTPExpression9
func (o *BTPExpressionIs242) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPLiteralNumber258AsBTPExpression9 is a convenience function that returns BTPLiteralNumber258 wrapped in BTPExpression9
func (o *BTPLiteralNumber258) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// BTPExpressionTry1271AsBTPExpression9 is a convenience function that returns BTPExpressionTry1271 wrapped in BTPExpression9
func (o *BTPExpressionTry1271) AsBTPExpression9() *BTPExpression9 {
	return &BTPExpression9{o}
}

// NewBTPExpression9 instantiates a new BTPExpression9 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpression9() *BTPExpression9 {
	this := BTPExpression9{Newbase_BTPExpression9()}
	return &this
}

// NewBTPExpression9WithDefaults instantiates a new BTPExpression9 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpression9WithDefaults() *BTPExpression9 {
	this := BTPExpression9{Newbase_BTPExpression9WithDefaults()}
	return &this
}

// GetAtomic returns the Atomic field value if set, zero value otherwise.
func (o *BTPExpression9) GetAtomic() bool {
	type getResult interface {
		GetAtomic() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAtomic()
	} else {
		var de bool
		return de
	}
}

// GetAtomicOk returns a tuple with the Atomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetAtomicOk() (*bool, bool) {
	type getResult interface {
		GetAtomicOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAtomicOk()
	} else {
		return nil, false
	}
}

// HasAtomic returns a boolean if a field has been set.
func (o *BTPExpression9) HasAtomic() bool {
	type getResult interface {
		HasAtomic() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasAtomic()
	} else {
		return false
	}
}

// SetAtomic gets a reference to the given bool and assigns it to the Atomic field.
func (o *BTPExpression9) SetAtomic(v bool) {
	type getResult interface {
		SetAtomic(v bool)
	}

	o.GetActualInstance().(getResult).SetAtomic(v)
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpression9) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpression9) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpression9) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetDocumentationType returns the DocumentationType field value if set, zero value otherwise.
func (o *BTPExpression9) GetDocumentationType() GBTPDefinitionType {
	type getResult interface {
		GetDocumentationType() GBTPDefinitionType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationType()
	} else {
		var de GBTPDefinitionType
		return de
	}
}

// GetDocumentationTypeOk returns a tuple with the DocumentationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetDocumentationTypeOk() (*GBTPDefinitionType, bool) {
	type getResult interface {
		GetDocumentationTypeOk() (*GBTPDefinitionType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationTypeOk()
	} else {
		return nil, false
	}
}

// HasDocumentationType returns a boolean if a field has been set.
func (o *BTPExpression9) HasDocumentationType() bool {
	type getResult interface {
		HasDocumentationType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDocumentationType()
	} else {
		return false
	}
}

// SetDocumentationType gets a reference to the given GBTPDefinitionType and assigns it to the DocumentationType field.
func (o *BTPExpression9) SetDocumentationType(v GBTPDefinitionType) {
	type getResult interface {
		SetDocumentationType(v GBTPDefinitionType)
	}

	o.GetActualInstance().(getResult).SetDocumentationType(v)
}

// GetEndSourceLocation returns the EndSourceLocation field value if set, zero value otherwise.
func (o *BTPExpression9) GetEndSourceLocation() int32 {
	type getResult interface {
		GetEndSourceLocation() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEndSourceLocation()
	} else {
		var de int32
		return de
	}
}

// GetEndSourceLocationOk returns a tuple with the EndSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetEndSourceLocationOk() (*int32, bool) {
	type getResult interface {
		GetEndSourceLocationOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEndSourceLocationOk()
	} else {
		return nil, false
	}
}

// HasEndSourceLocation returns a boolean if a field has been set.
func (o *BTPExpression9) HasEndSourceLocation() bool {
	type getResult interface {
		HasEndSourceLocation() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEndSourceLocation()
	} else {
		return false
	}
}

// SetEndSourceLocation gets a reference to the given int32 and assigns it to the EndSourceLocation field.
func (o *BTPExpression9) SetEndSourceLocation(v int32) {
	type getResult interface {
		SetEndSourceLocation(v int32)
	}

	o.GetActualInstance().(getResult).SetEndSourceLocation(v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTPExpression9) GetNodeId() string {
	type getResult interface {
		GetNodeId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeId()
	} else {
		var de string
		return de
	}
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetNodeIdOk() (*string, bool) {
	type getResult interface {
		GetNodeIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeIdOk()
	} else {
		return nil, false
	}
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTPExpression9) HasNodeId() bool {
	type getResult interface {
		HasNodeId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNodeId()
	} else {
		return false
	}
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTPExpression9) SetNodeId(v string) {
	type getResult interface {
		SetNodeId(v string)
	}

	o.GetActualInstance().(getResult).SetNodeId(v)
}

// GetShortDescriptor returns the ShortDescriptor field value if set, zero value otherwise.
func (o *BTPExpression9) GetShortDescriptor() string {
	type getResult interface {
		GetShortDescriptor() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetShortDescriptor()
	} else {
		var de string
		return de
	}
}

// GetShortDescriptorOk returns a tuple with the ShortDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetShortDescriptorOk() (*string, bool) {
	type getResult interface {
		GetShortDescriptorOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetShortDescriptorOk()
	} else {
		return nil, false
	}
}

// HasShortDescriptor returns a boolean if a field has been set.
func (o *BTPExpression9) HasShortDescriptor() bool {
	type getResult interface {
		HasShortDescriptor() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasShortDescriptor()
	} else {
		return false
	}
}

// SetShortDescriptor gets a reference to the given string and assigns it to the ShortDescriptor field.
func (o *BTPExpression9) SetShortDescriptor(v string) {
	type getResult interface {
		SetShortDescriptor(v string)
	}

	o.GetActualInstance().(getResult).SetShortDescriptor(v)
}

// GetSpaceAfter returns the SpaceAfter field value if set, zero value otherwise.
func (o *BTPExpression9) GetSpaceAfter() BTPSpace10 {
	type getResult interface {
		GetSpaceAfter() BTPSpace10
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceAfter()
	} else {
		var de BTPSpace10
		return de
	}
}

// GetSpaceAfterOk returns a tuple with the SpaceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetSpaceAfterOk() (*BTPSpace10, bool) {
	type getResult interface {
		GetSpaceAfterOk() (*BTPSpace10, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceAfterOk()
	} else {
		return nil, false
	}
}

// HasSpaceAfter returns a boolean if a field has been set.
func (o *BTPExpression9) HasSpaceAfter() bool {
	type getResult interface {
		HasSpaceAfter() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceAfter()
	} else {
		return false
	}
}

// SetSpaceAfter gets a reference to the given BTPSpace10 and assigns it to the SpaceAfter field.
func (o *BTPExpression9) SetSpaceAfter(v BTPSpace10) {
	type getResult interface {
		SetSpaceAfter(v BTPSpace10)
	}

	o.GetActualInstance().(getResult).SetSpaceAfter(v)
}

// GetSpaceBefore returns the SpaceBefore field value if set, zero value otherwise.
func (o *BTPExpression9) GetSpaceBefore() BTPSpace10 {
	type getResult interface {
		GetSpaceBefore() BTPSpace10
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceBefore()
	} else {
		var de BTPSpace10
		return de
	}
}

// GetSpaceBeforeOk returns a tuple with the SpaceBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetSpaceBeforeOk() (*BTPSpace10, bool) {
	type getResult interface {
		GetSpaceBeforeOk() (*BTPSpace10, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceBeforeOk()
	} else {
		return nil, false
	}
}

// HasSpaceBefore returns a boolean if a field has been set.
func (o *BTPExpression9) HasSpaceBefore() bool {
	type getResult interface {
		HasSpaceBefore() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceBefore()
	} else {
		return false
	}
}

// SetSpaceBefore gets a reference to the given BTPSpace10 and assigns it to the SpaceBefore field.
func (o *BTPExpression9) SetSpaceBefore(v BTPSpace10) {
	type getResult interface {
		SetSpaceBefore(v BTPSpace10)
	}

	o.GetActualInstance().(getResult).SetSpaceBefore(v)
}

// GetSpaceDefault returns the SpaceDefault field value if set, zero value otherwise.
func (o *BTPExpression9) GetSpaceDefault() bool {
	type getResult interface {
		GetSpaceDefault() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceDefault()
	} else {
		var de bool
		return de
	}
}

// GetSpaceDefaultOk returns a tuple with the SpaceDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetSpaceDefaultOk() (*bool, bool) {
	type getResult interface {
		GetSpaceDefaultOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceDefaultOk()
	} else {
		return nil, false
	}
}

// HasSpaceDefault returns a boolean if a field has been set.
func (o *BTPExpression9) HasSpaceDefault() bool {
	type getResult interface {
		HasSpaceDefault() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceDefault()
	} else {
		return false
	}
}

// SetSpaceDefault gets a reference to the given bool and assigns it to the SpaceDefault field.
func (o *BTPExpression9) SetSpaceDefault(v bool) {
	type getResult interface {
		SetSpaceDefault(v bool)
	}

	o.GetActualInstance().(getResult).SetSpaceDefault(v)
}

// GetStartSourceLocation returns the StartSourceLocation field value if set, zero value otherwise.
func (o *BTPExpression9) GetStartSourceLocation() int32 {
	type getResult interface {
		GetStartSourceLocation() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStartSourceLocation()
	} else {
		var de int32
		return de
	}
}

// GetStartSourceLocationOk returns a tuple with the StartSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpression9) GetStartSourceLocationOk() (*int32, bool) {
	type getResult interface {
		GetStartSourceLocationOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStartSourceLocationOk()
	} else {
		return nil, false
	}
}

// HasStartSourceLocation returns a boolean if a field has been set.
func (o *BTPExpression9) HasStartSourceLocation() bool {
	type getResult interface {
		HasStartSourceLocation() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasStartSourceLocation()
	} else {
		return false
	}
}

// SetStartSourceLocation gets a reference to the given int32 and assigns it to the StartSourceLocation field.
func (o *BTPExpression9) SetStartSourceLocation(v int32) {
	type getResult interface {
		SetStartSourceLocation(v int32)
	}

	o.GetActualInstance().(getResult).SetStartSourceLocation(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTPExpression9) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'BTPExpressionAccess-237'
	if jsonDict["btType"] == "BTPExpressionAccess-237" {
		// try to unmarshal JSON data into BTPExpressionAccess237
		var qr *BTPExpressionAccess237
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionAccess237: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionAs-238'
	if jsonDict["btType"] == "BTPExpressionAs-238" {
		// try to unmarshal JSON data into BTPExpressionAs238
		var qr *BTPExpressionAs238
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionAs238: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionBuiltinCall-239'
	if jsonDict["btType"] == "BTPExpressionBuiltinCall-239" {
		// try to unmarshal JSON data into BTPExpressionBuiltinCall239
		var qr *BTPExpressionBuiltinCall239
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionBuiltinCall239: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionCall-240'
	if jsonDict["btType"] == "BTPExpressionCall-240" {
		// try to unmarshal JSON data into BTPExpressionCall240
		var qr *BTPExpressionCall240
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionCall240: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionFunction-1325'
	if jsonDict["btType"] == "BTPExpressionFunction-1325" {
		// try to unmarshal JSON data into BTPExpressionFunction1325
		var qr *BTPExpressionFunction1325
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionFunction1325: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionGroup-241'
	if jsonDict["btType"] == "BTPExpressionGroup-241" {
		// try to unmarshal JSON data into BTPExpressionGroup241
		var qr *BTPExpressionGroup241
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionGroup241: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionIs-242'
	if jsonDict["btType"] == "BTPExpressionIs-242" {
		// try to unmarshal JSON data into BTPExpressionIs242
		var qr *BTPExpressionIs242
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionIs242: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionNew-243'
	if jsonDict["btType"] == "BTPExpressionNew-243" {
		// try to unmarshal JSON data into BTPExpressionNew243
		var qr *BTPExpressionNew243
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionNew243: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionOperator-244'
	if jsonDict["btType"] == "BTPExpressionOperator-244" {
		// try to unmarshal JSON data into BTPExpressionOperator244
		var qr *BTPExpressionOperator244
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionOperator244: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionSwitch-2632'
	if jsonDict["btType"] == "BTPExpressionSwitch-2632" {
		// try to unmarshal JSON data into BTPExpressionSwitch2632
		var qr *BTPExpressionSwitch2632
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionSwitch2632: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionTry-1271'
	if jsonDict["btType"] == "BTPExpressionTry-1271" {
		// try to unmarshal JSON data into BTPExpressionTry1271
		var qr *BTPExpressionTry1271
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionTry1271: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPExpressionVarReference-245'
	if jsonDict["btType"] == "BTPExpressionVarReference-245" {
		// try to unmarshal JSON data into BTPExpressionVarReference245
		var qr *BTPExpressionVarReference245
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPExpressionVarReference245: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPLiteral-253'
	if jsonDict["btType"] == "BTPLiteral-253" {
		// try to unmarshal JSON data into BTPLiteral253
		var qr *BTPLiteral253
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPLiteral253: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPLiteralArray-254'
	if jsonDict["btType"] == "BTPLiteralArray-254" {
		// try to unmarshal JSON data into BTPLiteralArray254
		var qr *BTPLiteralArray254
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPLiteralArray254: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPLiteralBoolean-255'
	if jsonDict["btType"] == "BTPLiteralBoolean-255" {
		// try to unmarshal JSON data into BTPLiteralBoolean255
		var qr *BTPLiteralBoolean255
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPLiteralBoolean255: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPLiteralNumber-258'
	if jsonDict["btType"] == "BTPLiteralNumber-258" {
		// try to unmarshal JSON data into BTPLiteralNumber258
		var qr *BTPLiteralNumber258
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPLiteralNumber258: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPLiteralString-259'
	if jsonDict["btType"] == "BTPLiteralString-259" {
		// try to unmarshal JSON data into BTPLiteralString259
		var qr *BTPLiteralString259
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPLiteralString259: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPLiteralUndefined-260'
	if jsonDict["btType"] == "BTPLiteralUndefined-260" {
		// try to unmarshal JSON data into BTPLiteralUndefined260
		var qr *BTPLiteralUndefined260
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPExpression9 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPExpression9 = nil
			return fmt.Errorf("Failed to unmarshal BTPExpression9 as BTPLiteralUndefined260: %s", err.Error())
		}
	}

	var qtx *base_BTPExpression9
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTPExpression9 = qtx
		return nil // data stored in dst.base_BTPExpression9, return on the first match
	} else {
		dst.implBTPExpression9 = nil
		return fmt.Errorf("Failed to unmarshal BTPExpression9 as base_BTPExpression9: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTPExpression9) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTPExpression9) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTPExpression9
}

type NullableBTPExpression9 struct {
	value *BTPExpression9
	isSet bool
}

func (v NullableBTPExpression9) Get() *BTPExpression9 {
	return v.value
}

func (v *NullableBTPExpression9) Set(val *BTPExpression9) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpression9) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpression9) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpression9(val *BTPExpression9) *NullableBTPExpression9 {
	return &NullableBTPExpression9{value: val, isSet: true}
}

func (v NullableBTPExpression9) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpression9) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTPExpression9 struct {
	Atomic              *bool               `json:"atomic,omitempty"`
	BtType              *string             `json:"btType,omitempty"`
	DocumentationType   *GBTPDefinitionType `json:"documentationType,omitempty"`
	EndSourceLocation   *int32              `json:"endSourceLocation,omitempty"`
	NodeId              *string             `json:"nodeId,omitempty"`
	ShortDescriptor     *string             `json:"shortDescriptor,omitempty"`
	SpaceAfter          *BTPSpace10         `json:"spaceAfter,omitempty"`
	SpaceBefore         *BTPSpace10         `json:"spaceBefore,omitempty"`
	SpaceDefault        *bool               `json:"spaceDefault,omitempty"`
	StartSourceLocation *int32              `json:"startSourceLocation,omitempty"`
}

// Newbase_BTPExpression9 instantiates a new base_BTPExpression9 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTPExpression9() *base_BTPExpression9 {
	this := base_BTPExpression9{}
	return &this
}

// Newbase_BTPExpression9WithDefaults instantiates a new base_BTPExpression9 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTPExpression9WithDefaults() *base_BTPExpression9 {
	this := base_BTPExpression9{}
	return &this
}

// GetAtomic returns the Atomic field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetAtomic() bool {
	if o == nil || o.Atomic == nil {
		var ret bool
		return ret
	}
	return *o.Atomic
}

// GetAtomicOk returns a tuple with the Atomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetAtomicOk() (*bool, bool) {
	if o == nil || o.Atomic == nil {
		return nil, false
	}
	return o.Atomic, true
}

// HasAtomic returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasAtomic() bool {
	if o != nil && o.Atomic != nil {
		return true
	}

	return false
}

// SetAtomic gets a reference to the given bool and assigns it to the Atomic field.
func (o *base_BTPExpression9) SetAtomic(v bool) {
	o.Atomic = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTPExpression9) SetBtType(v string) {
	o.BtType = &v
}

// GetDocumentationType returns the DocumentationType field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetDocumentationType() GBTPDefinitionType {
	if o == nil || o.DocumentationType == nil {
		var ret GBTPDefinitionType
		return ret
	}
	return *o.DocumentationType
}

// GetDocumentationTypeOk returns a tuple with the DocumentationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetDocumentationTypeOk() (*GBTPDefinitionType, bool) {
	if o == nil || o.DocumentationType == nil {
		return nil, false
	}
	return o.DocumentationType, true
}

// HasDocumentationType returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasDocumentationType() bool {
	if o != nil && o.DocumentationType != nil {
		return true
	}

	return false
}

// SetDocumentationType gets a reference to the given GBTPDefinitionType and assigns it to the DocumentationType field.
func (o *base_BTPExpression9) SetDocumentationType(v GBTPDefinitionType) {
	o.DocumentationType = &v
}

// GetEndSourceLocation returns the EndSourceLocation field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetEndSourceLocation() int32 {
	if o == nil || o.EndSourceLocation == nil {
		var ret int32
		return ret
	}
	return *o.EndSourceLocation
}

// GetEndSourceLocationOk returns a tuple with the EndSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetEndSourceLocationOk() (*int32, bool) {
	if o == nil || o.EndSourceLocation == nil {
		return nil, false
	}
	return o.EndSourceLocation, true
}

// HasEndSourceLocation returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasEndSourceLocation() bool {
	if o != nil && o.EndSourceLocation != nil {
		return true
	}

	return false
}

// SetEndSourceLocation gets a reference to the given int32 and assigns it to the EndSourceLocation field.
func (o *base_BTPExpression9) SetEndSourceLocation(v int32) {
	o.EndSourceLocation = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *base_BTPExpression9) SetNodeId(v string) {
	o.NodeId = &v
}

// GetShortDescriptor returns the ShortDescriptor field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetShortDescriptor() string {
	if o == nil || o.ShortDescriptor == nil {
		var ret string
		return ret
	}
	return *o.ShortDescriptor
}

// GetShortDescriptorOk returns a tuple with the ShortDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetShortDescriptorOk() (*string, bool) {
	if o == nil || o.ShortDescriptor == nil {
		return nil, false
	}
	return o.ShortDescriptor, true
}

// HasShortDescriptor returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasShortDescriptor() bool {
	if o != nil && o.ShortDescriptor != nil {
		return true
	}

	return false
}

// SetShortDescriptor gets a reference to the given string and assigns it to the ShortDescriptor field.
func (o *base_BTPExpression9) SetShortDescriptor(v string) {
	o.ShortDescriptor = &v
}

// GetSpaceAfter returns the SpaceAfter field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetSpaceAfter() BTPSpace10 {
	if o == nil || o.SpaceAfter == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfter
}

// GetSpaceAfterOk returns a tuple with the SpaceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetSpaceAfterOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfter == nil {
		return nil, false
	}
	return o.SpaceAfter, true
}

// HasSpaceAfter returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasSpaceAfter() bool {
	if o != nil && o.SpaceAfter != nil {
		return true
	}

	return false
}

// SetSpaceAfter gets a reference to the given BTPSpace10 and assigns it to the SpaceAfter field.
func (o *base_BTPExpression9) SetSpaceAfter(v BTPSpace10) {
	o.SpaceAfter = &v
}

// GetSpaceBefore returns the SpaceBefore field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetSpaceBefore() BTPSpace10 {
	if o == nil || o.SpaceBefore == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBefore
}

// GetSpaceBeforeOk returns a tuple with the SpaceBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetSpaceBeforeOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBefore == nil {
		return nil, false
	}
	return o.SpaceBefore, true
}

// HasSpaceBefore returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasSpaceBefore() bool {
	if o != nil && o.SpaceBefore != nil {
		return true
	}

	return false
}

// SetSpaceBefore gets a reference to the given BTPSpace10 and assigns it to the SpaceBefore field.
func (o *base_BTPExpression9) SetSpaceBefore(v BTPSpace10) {
	o.SpaceBefore = &v
}

// GetSpaceDefault returns the SpaceDefault field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetSpaceDefault() bool {
	if o == nil || o.SpaceDefault == nil {
		var ret bool
		return ret
	}
	return *o.SpaceDefault
}

// GetSpaceDefaultOk returns a tuple with the SpaceDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetSpaceDefaultOk() (*bool, bool) {
	if o == nil || o.SpaceDefault == nil {
		return nil, false
	}
	return o.SpaceDefault, true
}

// HasSpaceDefault returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasSpaceDefault() bool {
	if o != nil && o.SpaceDefault != nil {
		return true
	}

	return false
}

// SetSpaceDefault gets a reference to the given bool and assigns it to the SpaceDefault field.
func (o *base_BTPExpression9) SetSpaceDefault(v bool) {
	o.SpaceDefault = &v
}

// GetStartSourceLocation returns the StartSourceLocation field value if set, zero value otherwise.
func (o *base_BTPExpression9) GetStartSourceLocation() int32 {
	if o == nil || o.StartSourceLocation == nil {
		var ret int32
		return ret
	}
	return *o.StartSourceLocation
}

// GetStartSourceLocationOk returns a tuple with the StartSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPExpression9) GetStartSourceLocationOk() (*int32, bool) {
	if o == nil || o.StartSourceLocation == nil {
		return nil, false
	}
	return o.StartSourceLocation, true
}

// HasStartSourceLocation returns a boolean if a field has been set.
func (o *base_BTPExpression9) HasStartSourceLocation() bool {
	if o != nil && o.StartSourceLocation != nil {
		return true
	}

	return false
}

// SetStartSourceLocation gets a reference to the given int32 and assigns it to the StartSourceLocation field.
func (o *base_BTPExpression9) SetStartSourceLocation(v int32) {
	o.StartSourceLocation = &v
}

func (o base_BTPExpression9) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Atomic != nil {
		toSerialize["atomic"] = o.Atomic
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.DocumentationType != nil {
		toSerialize["documentationType"] = o.DocumentationType
	}
	if o.EndSourceLocation != nil {
		toSerialize["endSourceLocation"] = o.EndSourceLocation
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.ShortDescriptor != nil {
		toSerialize["shortDescriptor"] = o.ShortDescriptor
	}
	if o.SpaceAfter != nil {
		toSerialize["spaceAfter"] = o.SpaceAfter
	}
	if o.SpaceBefore != nil {
		toSerialize["spaceBefore"] = o.SpaceBefore
	}
	if o.SpaceDefault != nil {
		toSerialize["spaceDefault"] = o.SpaceDefault
	}
	if o.StartSourceLocation != nil {
		toSerialize["startSourceLocation"] = o.StartSourceLocation
	}
	return json.Marshal(toSerialize)
}

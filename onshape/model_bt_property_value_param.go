/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTPropertyValueParam struct for BTPropertyValueParam
type BTPropertyValueParam struct {
	// Id of the property to set.
	PropertyId *string `json:"propertyId,omitempty"`
	// Value to set for the property.
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewBTPropertyValueParam instantiates a new BTPropertyValueParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPropertyValueParam() *BTPropertyValueParam {
	this := BTPropertyValueParam{}
	return &this
}

// NewBTPropertyValueParamWithDefaults instantiates a new BTPropertyValueParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPropertyValueParamWithDefaults() *BTPropertyValueParam {
	this := BTPropertyValueParam{}
	return &this
}

// GetPropertyId returns the PropertyId field value if set, zero value otherwise.
func (o *BTPropertyValueParam) GetPropertyId() string {
	if o == nil || o.PropertyId == nil {
		var ret string
		return ret
	}
	return *o.PropertyId
}

// GetPropertyIdOk returns a tuple with the PropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPropertyValueParam) GetPropertyIdOk() (*string, bool) {
	if o == nil || o.PropertyId == nil {
		return nil, false
	}
	return o.PropertyId, true
}

// HasPropertyId returns a boolean if a field has been set.
func (o *BTPropertyValueParam) HasPropertyId() bool {
	if o != nil && o.PropertyId != nil {
		return true
	}

	return false
}

// SetPropertyId gets a reference to the given string and assigns it to the PropertyId field.
func (o *BTPropertyValueParam) SetPropertyId(v string) {
	o.PropertyId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTPropertyValueParam) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPropertyValueParam) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BTPropertyValueParam) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *BTPropertyValueParam) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o BTPropertyValueParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PropertyId != nil {
		toSerialize["propertyId"] = o.PropertyId
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableBTPropertyValueParam struct {
	value *BTPropertyValueParam
	isSet bool
}

func (v NullableBTPropertyValueParam) Get() *BTPropertyValueParam {
	return v.value
}

func (v *NullableBTPropertyValueParam) Set(val *BTPropertyValueParam) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPropertyValueParam) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPropertyValueParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPropertyValueParam(val *BTPropertyValueParam) *NullableBTPropertyValueParam {
	return &NullableBTPropertyValueParam{value: val, isSet: true}
}

func (v NullableBTPropertyValueParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPropertyValueParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

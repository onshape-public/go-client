/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTSketchCompositeEntityDisplayData1093 - struct for BTSketchCompositeEntityDisplayData1093
type BTSketchCompositeEntityDisplayData1093 struct {
	implBTSketchCompositeEntityDisplayData1093 interface{}
}

// BTSketchTextDisplayData1707AsBTSketchCompositeEntityDisplayData1093 is a convenience function that returns BTSketchTextDisplayData1707 wrapped in BTSketchCompositeEntityDisplayData1093
func (o *BTSketchTextDisplayData1707) AsBTSketchCompositeEntityDisplayData1093() *BTSketchCompositeEntityDisplayData1093 {
	return &BTSketchCompositeEntityDisplayData1093{o}
}

// BTSketchImageDisplayData1379AsBTSketchCompositeEntityDisplayData1093 is a convenience function that returns BTSketchImageDisplayData1379 wrapped in BTSketchCompositeEntityDisplayData1093
func (o *BTSketchImageDisplayData1379) AsBTSketchCompositeEntityDisplayData1093() *BTSketchCompositeEntityDisplayData1093 {
	return &BTSketchCompositeEntityDisplayData1093{o}
}

// NewBTSketchCompositeEntityDisplayData1093 instantiates a new BTSketchCompositeEntityDisplayData1093 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTSketchCompositeEntityDisplayData1093() *BTSketchCompositeEntityDisplayData1093 {
	this := BTSketchCompositeEntityDisplayData1093{Newbase_BTSketchCompositeEntityDisplayData1093()}
	return &this
}

// NewBTSketchCompositeEntityDisplayData1093WithDefaults instantiates a new BTSketchCompositeEntityDisplayData1093 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTSketchCompositeEntityDisplayData1093WithDefaults() *BTSketchCompositeEntityDisplayData1093 {
	this := BTSketchCompositeEntityDisplayData1093{Newbase_BTSketchCompositeEntityDisplayData1093WithDefaults()}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTSketchCompositeEntityDisplayData1093) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTSketchCompositeEntityDisplayData1093) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTSketchCompositeEntityDisplayData1093) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTSketchCompositeEntityDisplayData1093) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *BTSketchCompositeEntityDisplayData1093) GetPoints() []float64 {
	type getResult interface {
		GetPoints() []float64
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetPoints()
	} else {
		var de []float64
		return de
	}
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTSketchCompositeEntityDisplayData1093) GetPointsOk() ([]float64, bool) {
	type getResult interface {
		GetPointsOk() ([]float64, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetPointsOk()
	} else {
		return nil, false
	}
}

// HasPoints returns a boolean if a field has been set.
func (o *BTSketchCompositeEntityDisplayData1093) HasPoints() bool {
	type getResult interface {
		HasPoints() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasPoints()
	} else {
		return false
	}
}

// SetPoints gets a reference to the given []float64 and assigns it to the Points field.
func (o *BTSketchCompositeEntityDisplayData1093) SetPoints(v []float64) {
	type getResult interface {
		SetPoints(v []float64)
	}

	o.GetActualInstance().(getResult).SetPoints(v)
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTSketchCompositeEntityDisplayData1093) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTSketchCompositeEntityDisplayData1093) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTSketchCompositeEntityDisplayData1093) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTSketchCompositeEntityDisplayData1093) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTSketchCompositeEntityDisplayData1093) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTSketchImageDisplayData-1379'
	if jsonDict["btType"] == "BTSketchImageDisplayData-1379" {
		// try to unmarshal JSON data into BTSketchImageDisplayData1379
		var qr *BTSketchImageDisplayData1379
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTSketchCompositeEntityDisplayData1093 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTSketchCompositeEntityDisplayData1093 = nil
			return fmt.Errorf("failed to unmarshal BTSketchCompositeEntityDisplayData1093 as BTSketchImageDisplayData1379: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTSketchTextDisplayData-1707'
	if jsonDict["btType"] == "BTSketchTextDisplayData-1707" {
		// try to unmarshal JSON data into BTSketchTextDisplayData1707
		var qr *BTSketchTextDisplayData1707
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTSketchCompositeEntityDisplayData1093 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTSketchCompositeEntityDisplayData1093 = nil
			return fmt.Errorf("failed to unmarshal BTSketchCompositeEntityDisplayData1093 as BTSketchTextDisplayData1707: %s", err.Error())
		}
	}

	var qtx *base_BTSketchCompositeEntityDisplayData1093
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTSketchCompositeEntityDisplayData1093 = qtx
		return nil // data stored in dst.base_BTSketchCompositeEntityDisplayData1093, return on the first match
	} else {
		dst.implBTSketchCompositeEntityDisplayData1093 = nil
		return fmt.Errorf("failed to unmarshal BTSketchCompositeEntityDisplayData1093 as base_BTSketchCompositeEntityDisplayData1093: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTSketchCompositeEntityDisplayData1093) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTSketchCompositeEntityDisplayData1093) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTSketchCompositeEntityDisplayData1093
}

type NullableBTSketchCompositeEntityDisplayData1093 struct {
	value *BTSketchCompositeEntityDisplayData1093
	isSet bool
}

func (v NullableBTSketchCompositeEntityDisplayData1093) Get() *BTSketchCompositeEntityDisplayData1093 {
	return v.value
}

func (v *NullableBTSketchCompositeEntityDisplayData1093) Set(val *BTSketchCompositeEntityDisplayData1093) {
	v.value = val
	v.isSet = true
}

func (v NullableBTSketchCompositeEntityDisplayData1093) IsSet() bool {
	return v.isSet
}

func (v *NullableBTSketchCompositeEntityDisplayData1093) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTSketchCompositeEntityDisplayData1093(val *BTSketchCompositeEntityDisplayData1093) *NullableBTSketchCompositeEntityDisplayData1093 {
	return &NullableBTSketchCompositeEntityDisplayData1093{value: val, isSet: true}
}

func (v NullableBTSketchCompositeEntityDisplayData1093) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTSketchCompositeEntityDisplayData1093) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTSketchCompositeEntityDisplayData1093 struct {
	BTSketchEntityDisplayData354
	BtType *string   `json:"btType,omitempty"`
	Points []float64 `json:"points,omitempty"`
	// Type of JSON object.
	BtType *string `json:"btType,omitempty"`
}

// Newbase_BTSketchCompositeEntityDisplayData1093 instantiates a new base_BTSketchCompositeEntityDisplayData1093 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTSketchCompositeEntityDisplayData1093() *base_BTSketchCompositeEntityDisplayData1093 {
	this := base_BTSketchCompositeEntityDisplayData1093{}
	return &this
}

// Newbase_BTSketchCompositeEntityDisplayData1093WithDefaults instantiates a new base_BTSketchCompositeEntityDisplayData1093 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTSketchCompositeEntityDisplayData1093WithDefaults() *base_BTSketchCompositeEntityDisplayData1093 {
	this := base_BTSketchCompositeEntityDisplayData1093{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTSketchCompositeEntityDisplayData1093) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTSketchCompositeEntityDisplayData1093) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTSketchCompositeEntityDisplayData1093) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTSketchCompositeEntityDisplayData1093) SetBtType(v string) {
	o.BtType = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *base_BTSketchCompositeEntityDisplayData1093) GetPoints() []float64 {
	if o == nil || o.Points == nil {
		var ret []float64
		return ret
	}
	return o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTSketchCompositeEntityDisplayData1093) GetPointsOk() ([]float64, bool) {
	if o == nil || o.Points == nil {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *base_BTSketchCompositeEntityDisplayData1093) HasPoints() bool {
	if o != nil && o.Points != nil {
		return true
	}

	return false
}

// SetPoints gets a reference to the given []float64 and assigns it to the Points field.
func (o *base_BTSketchCompositeEntityDisplayData1093) SetPoints(v []float64) {
	o.Points = v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTSketchCompositeEntityDisplayData1093) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTSketchCompositeEntityDisplayData1093) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTSketchCompositeEntityDisplayData1093) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTSketchCompositeEntityDisplayData1093) SetBtType(v string) {
	o.BtType = &v
}

func (o base_BTSketchCompositeEntityDisplayData1093) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
	if errBTSketchEntityDisplayData354 != nil {
		return []byte{}, errBTSketchEntityDisplayData354
	}
	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
	if errBTSketchEntityDisplayData354 != nil {
		return []byte{}, errBTSketchEntityDisplayData354
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Points != nil {
		toSerialize["points"] = o.Points
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	return json.Marshal(toSerialize)
}

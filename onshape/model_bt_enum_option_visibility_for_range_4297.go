/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTEnumOptionVisibilityForRange4297 struct for BTEnumOptionVisibilityForRange4297
type BTEnumOptionVisibilityForRange4297 struct {
	BTEnumOptionVisibilityCondition3455
	BtType          *string                            `json:"btType,omitempty"`
	Condition       *BTParameterVisibilityCondition177 `json:"condition,omitempty"`
	ControlledRange *BTEnumOptionRange3741             `json:"controlledRange,omitempty"`
}

// NewBTEnumOptionVisibilityForRange4297 instantiates a new BTEnumOptionVisibilityForRange4297 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTEnumOptionVisibilityForRange4297() *BTEnumOptionVisibilityForRange4297 {
	this := BTEnumOptionVisibilityForRange4297{}
	return &this
}

// NewBTEnumOptionVisibilityForRange4297WithDefaults instantiates a new BTEnumOptionVisibilityForRange4297 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTEnumOptionVisibilityForRange4297WithDefaults() *BTEnumOptionVisibilityForRange4297 {
	this := BTEnumOptionVisibilityForRange4297{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTEnumOptionVisibilityForRange4297) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEnumOptionVisibilityForRange4297) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTEnumOptionVisibilityForRange4297) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTEnumOptionVisibilityForRange4297) SetBtType(v string) {
	o.BtType = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *BTEnumOptionVisibilityForRange4297) GetCondition() BTParameterVisibilityCondition177 {
	if o == nil || o.Condition == nil {
		var ret BTParameterVisibilityCondition177
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEnumOptionVisibilityForRange4297) GetConditionOk() (*BTParameterVisibilityCondition177, bool) {
	if o == nil || o.Condition == nil {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *BTEnumOptionVisibilityForRange4297) HasCondition() bool {
	if o != nil && o.Condition != nil {
		return true
	}

	return false
}

// SetCondition gets a reference to the given BTParameterVisibilityCondition177 and assigns it to the Condition field.
func (o *BTEnumOptionVisibilityForRange4297) SetCondition(v BTParameterVisibilityCondition177) {
	o.Condition = &v
}

// GetControlledRange returns the ControlledRange field value if set, zero value otherwise.
func (o *BTEnumOptionVisibilityForRange4297) GetControlledRange() BTEnumOptionRange3741 {
	if o == nil || o.ControlledRange == nil {
		var ret BTEnumOptionRange3741
		return ret
	}
	return *o.ControlledRange
}

// GetControlledRangeOk returns a tuple with the ControlledRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEnumOptionVisibilityForRange4297) GetControlledRangeOk() (*BTEnumOptionRange3741, bool) {
	if o == nil || o.ControlledRange == nil {
		return nil, false
	}
	return o.ControlledRange, true
}

// HasControlledRange returns a boolean if a field has been set.
func (o *BTEnumOptionVisibilityForRange4297) HasControlledRange() bool {
	if o != nil && o.ControlledRange != nil {
		return true
	}

	return false
}

// SetControlledRange gets a reference to the given BTEnumOptionRange3741 and assigns it to the ControlledRange field.
func (o *BTEnumOptionVisibilityForRange4297) SetControlledRange(v BTEnumOptionRange3741) {
	o.ControlledRange = &v
}

func (o BTEnumOptionVisibilityForRange4297) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTEnumOptionVisibilityCondition3455, errBTEnumOptionVisibilityCondition3455 := json.Marshal(o.BTEnumOptionVisibilityCondition3455)
	if errBTEnumOptionVisibilityCondition3455 != nil {
		return []byte{}, errBTEnumOptionVisibilityCondition3455
	}
	errBTEnumOptionVisibilityCondition3455 = json.Unmarshal([]byte(serializedBTEnumOptionVisibilityCondition3455), &toSerialize)
	if errBTEnumOptionVisibilityCondition3455 != nil {
		return []byte{}, errBTEnumOptionVisibilityCondition3455
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	if o.ControlledRange != nil {
		toSerialize["controlledRange"] = o.ControlledRange
	}
	return json.Marshal(toSerialize)
}

type NullableBTEnumOptionVisibilityForRange4297 struct {
	value *BTEnumOptionVisibilityForRange4297
	isSet bool
}

func (v NullableBTEnumOptionVisibilityForRange4297) Get() *BTEnumOptionVisibilityForRange4297 {
	return v.value
}

func (v *NullableBTEnumOptionVisibilityForRange4297) Set(val *BTEnumOptionVisibilityForRange4297) {
	v.value = val
	v.isSet = true
}

func (v NullableBTEnumOptionVisibilityForRange4297) IsSet() bool {
	return v.isSet
}

func (v *NullableBTEnumOptionVisibilityForRange4297) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTEnumOptionVisibilityForRange4297(val *BTEnumOptionVisibilityForRange4297) *NullableBTEnumOptionVisibilityForRange4297 {
	return &NullableBTEnumOptionVisibilityForRange4297{value: val, isSet: true}
}

func (v NullableBTEnumOptionVisibilityForRange4297) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTEnumOptionVisibilityForRange4297) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// SchemaObject struct for SchemaObject
type SchemaObject struct {
	AdditionalItems           *Schema                           `json:"additionalItems,omitempty"`
	AdditionalPropertiesField map[string]interface{}            `json:"additionalProperties,omitempty"`
	AllOf                     []Schema                          `json:"allOf,omitempty"`
	AnyOf                     []Schema                          `json:"anyOf,omitempty"`
	BooleanSchemaValue        *bool                             `json:"booleanSchemaValue,omitempty"`
	Const                     map[string]interface{}            `json:"const,omitempty"`
	Contains                  *Schema                           `json:"contains,omitempty"`
	ContentEncoding           *string                           `json:"contentEncoding,omitempty"`
	ContentMediaType          *string                           `json:"contentMediaType,omitempty"`
	ContentSchema             *Schema                           `json:"contentSchema,omitempty"`
	Default                   map[string]interface{}            `json:"default,omitempty"`
	DependentRequired         *map[string][]string              `json:"dependentRequired,omitempty"`
	Deprecated                *bool                             `json:"deprecated,omitempty"`
	Description               *string                           `json:"description,omitempty"`
	Discriminator             *Discriminator                    `json:"discriminator,omitempty"`
	Else                      *Schema                           `json:"else,omitempty"`
	Enum                      []map[string]interface{}          `json:"enum,omitempty"`
	Example                   map[string]interface{}            `json:"example,omitempty"`
	ExampleSetFlag            *bool                             `json:"exampleSetFlag,omitempty"`
	Examples                  []map[string]interface{}          `json:"examples,omitempty"`
	ExclusiveMaximum          *bool                             `json:"exclusiveMaximum,omitempty"`
	ExclusiveMaximumValue     *float32                          `json:"exclusiveMaximumValue,omitempty"`
	ExclusiveMinimum          *bool                             `json:"exclusiveMinimum,omitempty"`
	ExclusiveMinimumValue     *float32                          `json:"exclusiveMinimumValue,omitempty"`
	Extensions                map[string]map[string]interface{} `json:"extensions,omitempty"`
	ExternalDocs              *ExternalDocumentation            `json:"externalDocs,omitempty"`
	Format                    *string                           `json:"format,omitempty"`
	Getanchor                 *string                           `json:"get$anchor,omitempty"`
	Getcomment                *string                           `json:"get$comment,omitempty"`
	Getid                     *string                           `json:"get$id,omitempty"`
	Getref                    *string                           `json:"get$ref,omitempty"`
	Getschema                 *string                           `json:"get$schema,omitempty"`
	If                        *Schema                           `json:"if,omitempty"`
	Items                     *SchemaObject                     `json:"items,omitempty"`
	JsonSchema                map[string]map[string]interface{} `json:"jsonSchema,omitempty"`
	JsonSchemaImpl            map[string]interface{}            `json:"jsonSchemaImpl,omitempty"`
	MaxContains               *int32                            `json:"maxContains,omitempty"`
	MaxItems                  *int32                            `json:"maxItems,omitempty"`
	MaxLength                 *int32                            `json:"maxLength,omitempty"`
	MaxProperties             *int32                            `json:"maxProperties,omitempty"`
	Maximum                   *float32                          `json:"maximum,omitempty"`
	MinContains               *int32                            `json:"minContains,omitempty"`
	MinItems                  *int32                            `json:"minItems,omitempty"`
	MinLength                 *int32                            `json:"minLength,omitempty"`
	MinProperties             *int32                            `json:"minProperties,omitempty"`
	Minimum                   *float32                          `json:"minimum,omitempty"`
	MultipleOf                *float32                          `json:"multipleOf,omitempty"`
	Not                       *Schema                           `json:"not,omitempty"`
	Nullable                  *bool                             `json:"nullable,omitempty"`
	OneOf                     []Schema                          `json:"oneOf,omitempty"`
	Pattern                   *string                           `json:"pattern,omitempty"`
	PrefixItems               []Schema                          `json:"prefixItems,omitempty"`
	PropertyNames             *Schema                           `json:"propertyNames,omitempty"`
	ReadOnly                  *bool                             `json:"readOnly,omitempty"`
	Required                  []string                          `json:"required,omitempty"`
	Then                      *Schema                           `json:"then,omitempty"`
	Title                     *string                           `json:"title,omitempty"`
	Type                      *string                           `json:"type,omitempty"`
	Types                     []string                          `json:"types,omitempty"`
	UnevaluatedItems          *Schema                           `json:"unevaluatedItems,omitempty"`
	UnevaluatedProperties     *Schema                           `json:"unevaluatedProperties,omitempty"`
	UniqueItems               *bool                             `json:"uniqueItems,omitempty"`
	WriteOnly                 *bool                             `json:"writeOnly,omitempty"`
	Xml                       *XML                              `json:"xml,omitempty"`
}

// NewSchemaObject instantiates a new SchemaObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaObject() *SchemaObject {
	this := SchemaObject{}
	return &this
}

// NewSchemaObjectWithDefaults instantiates a new SchemaObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaObjectWithDefaults() *SchemaObject {
	this := SchemaObject{}
	return &this
}

// GetAdditionalItems returns the AdditionalItems field value if set, zero value otherwise.
func (o *SchemaObject) GetAdditionalItems() Schema {
	if o == nil || o.AdditionalItems == nil {
		var ret Schema
		return ret
	}
	return *o.AdditionalItems
}

// GetAdditionalItemsOk returns a tuple with the AdditionalItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetAdditionalItemsOk() (*Schema, bool) {
	if o == nil || o.AdditionalItems == nil {
		return nil, false
	}
	return o.AdditionalItems, true
}

// HasAdditionalItems returns a boolean if a field has been set.
func (o *SchemaObject) HasAdditionalItems() bool {
	if o != nil && o.AdditionalItems != nil {
		return true
	}

	return false
}

// SetAdditionalItems gets a reference to the given Schema and assigns it to the AdditionalItems field.
func (o *SchemaObject) SetAdditionalItems(v Schema) {
	o.AdditionalItems = &v
}

// GetAdditionalPropertiesField returns the AdditionalPropertiesField field value if set, zero value otherwise.
func (o *SchemaObject) GetAdditionalPropertiesField() map[string]interface{} {
	if o == nil || o.AdditionalPropertiesField == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalPropertiesField
}

// GetAdditionalPropertiesFieldOk returns a tuple with the AdditionalPropertiesField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetAdditionalPropertiesFieldOk() (map[string]interface{}, bool) {
	if o == nil || o.AdditionalPropertiesField == nil {
		return nil, false
	}
	return o.AdditionalPropertiesField, true
}

// HasAdditionalPropertiesField returns a boolean if a field has been set.
func (o *SchemaObject) HasAdditionalPropertiesField() bool {
	if o != nil && o.AdditionalPropertiesField != nil {
		return true
	}

	return false
}

// SetAdditionalPropertiesField gets a reference to the given map[string]interface{} and assigns it to the AdditionalPropertiesField field.
func (o *SchemaObject) SetAdditionalPropertiesField(v map[string]interface{}) {
	o.AdditionalPropertiesField = v
}

// GetAllOf returns the AllOf field value if set, zero value otherwise.
func (o *SchemaObject) GetAllOf() []Schema {
	if o == nil || o.AllOf == nil {
		var ret []Schema
		return ret
	}
	return o.AllOf
}

// GetAllOfOk returns a tuple with the AllOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetAllOfOk() ([]Schema, bool) {
	if o == nil || o.AllOf == nil {
		return nil, false
	}
	return o.AllOf, true
}

// HasAllOf returns a boolean if a field has been set.
func (o *SchemaObject) HasAllOf() bool {
	if o != nil && o.AllOf != nil {
		return true
	}

	return false
}

// SetAllOf gets a reference to the given []Schema and assigns it to the AllOf field.
func (o *SchemaObject) SetAllOf(v []Schema) {
	o.AllOf = v
}

// GetAnyOf returns the AnyOf field value if set, zero value otherwise.
func (o *SchemaObject) GetAnyOf() []Schema {
	if o == nil || o.AnyOf == nil {
		var ret []Schema
		return ret
	}
	return o.AnyOf
}

// GetAnyOfOk returns a tuple with the AnyOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetAnyOfOk() ([]Schema, bool) {
	if o == nil || o.AnyOf == nil {
		return nil, false
	}
	return o.AnyOf, true
}

// HasAnyOf returns a boolean if a field has been set.
func (o *SchemaObject) HasAnyOf() bool {
	if o != nil && o.AnyOf != nil {
		return true
	}

	return false
}

// SetAnyOf gets a reference to the given []Schema and assigns it to the AnyOf field.
func (o *SchemaObject) SetAnyOf(v []Schema) {
	o.AnyOf = v
}

// GetBooleanSchemaValue returns the BooleanSchemaValue field value if set, zero value otherwise.
func (o *SchemaObject) GetBooleanSchemaValue() bool {
	if o == nil || o.BooleanSchemaValue == nil {
		var ret bool
		return ret
	}
	return *o.BooleanSchemaValue
}

// GetBooleanSchemaValueOk returns a tuple with the BooleanSchemaValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetBooleanSchemaValueOk() (*bool, bool) {
	if o == nil || o.BooleanSchemaValue == nil {
		return nil, false
	}
	return o.BooleanSchemaValue, true
}

// HasBooleanSchemaValue returns a boolean if a field has been set.
func (o *SchemaObject) HasBooleanSchemaValue() bool {
	if o != nil && o.BooleanSchemaValue != nil {
		return true
	}

	return false
}

// SetBooleanSchemaValue gets a reference to the given bool and assigns it to the BooleanSchemaValue field.
func (o *SchemaObject) SetBooleanSchemaValue(v bool) {
	o.BooleanSchemaValue = &v
}

// GetConst returns the Const field value if set, zero value otherwise.
func (o *SchemaObject) GetConst() map[string]interface{} {
	if o == nil || o.Const == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Const
}

// GetConstOk returns a tuple with the Const field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetConstOk() (map[string]interface{}, bool) {
	if o == nil || o.Const == nil {
		return nil, false
	}
	return o.Const, true
}

// HasConst returns a boolean if a field has been set.
func (o *SchemaObject) HasConst() bool {
	if o != nil && o.Const != nil {
		return true
	}

	return false
}

// SetConst gets a reference to the given map[string]interface{} and assigns it to the Const field.
func (o *SchemaObject) SetConst(v map[string]interface{}) {
	o.Const = v
}

// GetContains returns the Contains field value if set, zero value otherwise.
func (o *SchemaObject) GetContains() Schema {
	if o == nil || o.Contains == nil {
		var ret Schema
		return ret
	}
	return *o.Contains
}

// GetContainsOk returns a tuple with the Contains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetContainsOk() (*Schema, bool) {
	if o == nil || o.Contains == nil {
		return nil, false
	}
	return o.Contains, true
}

// HasContains returns a boolean if a field has been set.
func (o *SchemaObject) HasContains() bool {
	if o != nil && o.Contains != nil {
		return true
	}

	return false
}

// SetContains gets a reference to the given Schema and assigns it to the Contains field.
func (o *SchemaObject) SetContains(v Schema) {
	o.Contains = &v
}

// GetContentEncoding returns the ContentEncoding field value if set, zero value otherwise.
func (o *SchemaObject) GetContentEncoding() string {
	if o == nil || o.ContentEncoding == nil {
		var ret string
		return ret
	}
	return *o.ContentEncoding
}

// GetContentEncodingOk returns a tuple with the ContentEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetContentEncodingOk() (*string, bool) {
	if o == nil || o.ContentEncoding == nil {
		return nil, false
	}
	return o.ContentEncoding, true
}

// HasContentEncoding returns a boolean if a field has been set.
func (o *SchemaObject) HasContentEncoding() bool {
	if o != nil && o.ContentEncoding != nil {
		return true
	}

	return false
}

// SetContentEncoding gets a reference to the given string and assigns it to the ContentEncoding field.
func (o *SchemaObject) SetContentEncoding(v string) {
	o.ContentEncoding = &v
}

// GetContentMediaType returns the ContentMediaType field value if set, zero value otherwise.
func (o *SchemaObject) GetContentMediaType() string {
	if o == nil || o.ContentMediaType == nil {
		var ret string
		return ret
	}
	return *o.ContentMediaType
}

// GetContentMediaTypeOk returns a tuple with the ContentMediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetContentMediaTypeOk() (*string, bool) {
	if o == nil || o.ContentMediaType == nil {
		return nil, false
	}
	return o.ContentMediaType, true
}

// HasContentMediaType returns a boolean if a field has been set.
func (o *SchemaObject) HasContentMediaType() bool {
	if o != nil && o.ContentMediaType != nil {
		return true
	}

	return false
}

// SetContentMediaType gets a reference to the given string and assigns it to the ContentMediaType field.
func (o *SchemaObject) SetContentMediaType(v string) {
	o.ContentMediaType = &v
}

// GetContentSchema returns the ContentSchema field value if set, zero value otherwise.
func (o *SchemaObject) GetContentSchema() Schema {
	if o == nil || o.ContentSchema == nil {
		var ret Schema
		return ret
	}
	return *o.ContentSchema
}

// GetContentSchemaOk returns a tuple with the ContentSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetContentSchemaOk() (*Schema, bool) {
	if o == nil || o.ContentSchema == nil {
		return nil, false
	}
	return o.ContentSchema, true
}

// HasContentSchema returns a boolean if a field has been set.
func (o *SchemaObject) HasContentSchema() bool {
	if o != nil && o.ContentSchema != nil {
		return true
	}

	return false
}

// SetContentSchema gets a reference to the given Schema and assigns it to the ContentSchema field.
func (o *SchemaObject) SetContentSchema(v Schema) {
	o.ContentSchema = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *SchemaObject) GetDefault() map[string]interface{} {
	if o == nil || o.Default == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetDefaultOk() (map[string]interface{}, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *SchemaObject) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given map[string]interface{} and assigns it to the Default field.
func (o *SchemaObject) SetDefault(v map[string]interface{}) {
	o.Default = v
}

// GetDependentRequired returns the DependentRequired field value if set, zero value otherwise.
func (o *SchemaObject) GetDependentRequired() map[string][]string {
	if o == nil || o.DependentRequired == nil {
		var ret map[string][]string
		return ret
	}
	return *o.DependentRequired
}

// GetDependentRequiredOk returns a tuple with the DependentRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetDependentRequiredOk() (*map[string][]string, bool) {
	if o == nil || o.DependentRequired == nil {
		return nil, false
	}
	return o.DependentRequired, true
}

// HasDependentRequired returns a boolean if a field has been set.
func (o *SchemaObject) HasDependentRequired() bool {
	if o != nil && o.DependentRequired != nil {
		return true
	}

	return false
}

// SetDependentRequired gets a reference to the given map[string][]string and assigns it to the DependentRequired field.
func (o *SchemaObject) SetDependentRequired(v map[string][]string) {
	o.DependentRequired = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *SchemaObject) GetDeprecated() bool {
	if o == nil || o.Deprecated == nil {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetDeprecatedOk() (*bool, bool) {
	if o == nil || o.Deprecated == nil {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *SchemaObject) HasDeprecated() bool {
	if o != nil && o.Deprecated != nil {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *SchemaObject) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaObject) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaObject) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaObject) SetDescription(v string) {
	o.Description = &v
}

// GetDiscriminator returns the Discriminator field value if set, zero value otherwise.
func (o *SchemaObject) GetDiscriminator() Discriminator {
	if o == nil || o.Discriminator == nil {
		var ret Discriminator
		return ret
	}
	return *o.Discriminator
}

// GetDiscriminatorOk returns a tuple with the Discriminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetDiscriminatorOk() (*Discriminator, bool) {
	if o == nil || o.Discriminator == nil {
		return nil, false
	}
	return o.Discriminator, true
}

// HasDiscriminator returns a boolean if a field has been set.
func (o *SchemaObject) HasDiscriminator() bool {
	if o != nil && o.Discriminator != nil {
		return true
	}

	return false
}

// SetDiscriminator gets a reference to the given Discriminator and assigns it to the Discriminator field.
func (o *SchemaObject) SetDiscriminator(v Discriminator) {
	o.Discriminator = &v
}

// GetElse returns the Else field value if set, zero value otherwise.
func (o *SchemaObject) GetElse() Schema {
	if o == nil || o.Else == nil {
		var ret Schema
		return ret
	}
	return *o.Else
}

// GetElseOk returns a tuple with the Else field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetElseOk() (*Schema, bool) {
	if o == nil || o.Else == nil {
		return nil, false
	}
	return o.Else, true
}

// HasElse returns a boolean if a field has been set.
func (o *SchemaObject) HasElse() bool {
	if o != nil && o.Else != nil {
		return true
	}

	return false
}

// SetElse gets a reference to the given Schema and assigns it to the Else field.
func (o *SchemaObject) SetElse(v Schema) {
	o.Else = &v
}

// GetEnum returns the Enum field value if set, zero value otherwise.
func (o *SchemaObject) GetEnum() []map[string]interface{} {
	if o == nil || o.Enum == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Enum
}

// GetEnumOk returns a tuple with the Enum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetEnumOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Enum == nil {
		return nil, false
	}
	return o.Enum, true
}

// HasEnum returns a boolean if a field has been set.
func (o *SchemaObject) HasEnum() bool {
	if o != nil && o.Enum != nil {
		return true
	}

	return false
}

// SetEnum gets a reference to the given []map[string]interface{} and assigns it to the Enum field.
func (o *SchemaObject) SetEnum(v []map[string]interface{}) {
	o.Enum = v
}

// GetExample returns the Example field value if set, zero value otherwise.
func (o *SchemaObject) GetExample() map[string]interface{} {
	if o == nil || o.Example == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Example
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExampleOk() (map[string]interface{}, bool) {
	if o == nil || o.Example == nil {
		return nil, false
	}
	return o.Example, true
}

// HasExample returns a boolean if a field has been set.
func (o *SchemaObject) HasExample() bool {
	if o != nil && o.Example != nil {
		return true
	}

	return false
}

// SetExample gets a reference to the given map[string]interface{} and assigns it to the Example field.
func (o *SchemaObject) SetExample(v map[string]interface{}) {
	o.Example = v
}

// GetExampleSetFlag returns the ExampleSetFlag field value if set, zero value otherwise.
func (o *SchemaObject) GetExampleSetFlag() bool {
	if o == nil || o.ExampleSetFlag == nil {
		var ret bool
		return ret
	}
	return *o.ExampleSetFlag
}

// GetExampleSetFlagOk returns a tuple with the ExampleSetFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExampleSetFlagOk() (*bool, bool) {
	if o == nil || o.ExampleSetFlag == nil {
		return nil, false
	}
	return o.ExampleSetFlag, true
}

// HasExampleSetFlag returns a boolean if a field has been set.
func (o *SchemaObject) HasExampleSetFlag() bool {
	if o != nil && o.ExampleSetFlag != nil {
		return true
	}

	return false
}

// SetExampleSetFlag gets a reference to the given bool and assigns it to the ExampleSetFlag field.
func (o *SchemaObject) SetExampleSetFlag(v bool) {
	o.ExampleSetFlag = &v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *SchemaObject) GetExamples() []map[string]interface{} {
	if o == nil || o.Examples == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExamplesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Examples == nil {
		return nil, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *SchemaObject) HasExamples() bool {
	if o != nil && o.Examples != nil {
		return true
	}

	return false
}

// SetExamples gets a reference to the given []map[string]interface{} and assigns it to the Examples field.
func (o *SchemaObject) SetExamples(v []map[string]interface{}) {
	o.Examples = v
}

// GetExclusiveMaximum returns the ExclusiveMaximum field value if set, zero value otherwise.
func (o *SchemaObject) GetExclusiveMaximum() bool {
	if o == nil || o.ExclusiveMaximum == nil {
		var ret bool
		return ret
	}
	return *o.ExclusiveMaximum
}

// GetExclusiveMaximumOk returns a tuple with the ExclusiveMaximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExclusiveMaximumOk() (*bool, bool) {
	if o == nil || o.ExclusiveMaximum == nil {
		return nil, false
	}
	return o.ExclusiveMaximum, true
}

// HasExclusiveMaximum returns a boolean if a field has been set.
func (o *SchemaObject) HasExclusiveMaximum() bool {
	if o != nil && o.ExclusiveMaximum != nil {
		return true
	}

	return false
}

// SetExclusiveMaximum gets a reference to the given bool and assigns it to the ExclusiveMaximum field.
func (o *SchemaObject) SetExclusiveMaximum(v bool) {
	o.ExclusiveMaximum = &v
}

// GetExclusiveMaximumValue returns the ExclusiveMaximumValue field value if set, zero value otherwise.
func (o *SchemaObject) GetExclusiveMaximumValue() float32 {
	if o == nil || o.ExclusiveMaximumValue == nil {
		var ret float32
		return ret
	}
	return *o.ExclusiveMaximumValue
}

// GetExclusiveMaximumValueOk returns a tuple with the ExclusiveMaximumValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExclusiveMaximumValueOk() (*float32, bool) {
	if o == nil || o.ExclusiveMaximumValue == nil {
		return nil, false
	}
	return o.ExclusiveMaximumValue, true
}

// HasExclusiveMaximumValue returns a boolean if a field has been set.
func (o *SchemaObject) HasExclusiveMaximumValue() bool {
	if o != nil && o.ExclusiveMaximumValue != nil {
		return true
	}

	return false
}

// SetExclusiveMaximumValue gets a reference to the given float32 and assigns it to the ExclusiveMaximumValue field.
func (o *SchemaObject) SetExclusiveMaximumValue(v float32) {
	o.ExclusiveMaximumValue = &v
}

// GetExclusiveMinimum returns the ExclusiveMinimum field value if set, zero value otherwise.
func (o *SchemaObject) GetExclusiveMinimum() bool {
	if o == nil || o.ExclusiveMinimum == nil {
		var ret bool
		return ret
	}
	return *o.ExclusiveMinimum
}

// GetExclusiveMinimumOk returns a tuple with the ExclusiveMinimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExclusiveMinimumOk() (*bool, bool) {
	if o == nil || o.ExclusiveMinimum == nil {
		return nil, false
	}
	return o.ExclusiveMinimum, true
}

// HasExclusiveMinimum returns a boolean if a field has been set.
func (o *SchemaObject) HasExclusiveMinimum() bool {
	if o != nil && o.ExclusiveMinimum != nil {
		return true
	}

	return false
}

// SetExclusiveMinimum gets a reference to the given bool and assigns it to the ExclusiveMinimum field.
func (o *SchemaObject) SetExclusiveMinimum(v bool) {
	o.ExclusiveMinimum = &v
}

// GetExclusiveMinimumValue returns the ExclusiveMinimumValue field value if set, zero value otherwise.
func (o *SchemaObject) GetExclusiveMinimumValue() float32 {
	if o == nil || o.ExclusiveMinimumValue == nil {
		var ret float32
		return ret
	}
	return *o.ExclusiveMinimumValue
}

// GetExclusiveMinimumValueOk returns a tuple with the ExclusiveMinimumValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExclusiveMinimumValueOk() (*float32, bool) {
	if o == nil || o.ExclusiveMinimumValue == nil {
		return nil, false
	}
	return o.ExclusiveMinimumValue, true
}

// HasExclusiveMinimumValue returns a boolean if a field has been set.
func (o *SchemaObject) HasExclusiveMinimumValue() bool {
	if o != nil && o.ExclusiveMinimumValue != nil {
		return true
	}

	return false
}

// SetExclusiveMinimumValue gets a reference to the given float32 and assigns it to the ExclusiveMinimumValue field.
func (o *SchemaObject) SetExclusiveMinimumValue(v float32) {
	o.ExclusiveMinimumValue = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *SchemaObject) GetExtensions() map[string]map[string]interface{} {
	if o == nil || o.Extensions == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExtensionsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *SchemaObject) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given map[string]map[string]interface{} and assigns it to the Extensions field.
func (o *SchemaObject) SetExtensions(v map[string]map[string]interface{}) {
	o.Extensions = v
}

// GetExternalDocs returns the ExternalDocs field value if set, zero value otherwise.
func (o *SchemaObject) GetExternalDocs() ExternalDocumentation {
	if o == nil || o.ExternalDocs == nil {
		var ret ExternalDocumentation
		return ret
	}
	return *o.ExternalDocs
}

// GetExternalDocsOk returns a tuple with the ExternalDocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetExternalDocsOk() (*ExternalDocumentation, bool) {
	if o == nil || o.ExternalDocs == nil {
		return nil, false
	}
	return o.ExternalDocs, true
}

// HasExternalDocs returns a boolean if a field has been set.
func (o *SchemaObject) HasExternalDocs() bool {
	if o != nil && o.ExternalDocs != nil {
		return true
	}

	return false
}

// SetExternalDocs gets a reference to the given ExternalDocumentation and assigns it to the ExternalDocs field.
func (o *SchemaObject) SetExternalDocs(v ExternalDocumentation) {
	o.ExternalDocs = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *SchemaObject) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *SchemaObject) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *SchemaObject) SetFormat(v string) {
	o.Format = &v
}

// GetGetanchor returns the Getanchor field value if set, zero value otherwise.
func (o *SchemaObject) GetGetanchor() string {
	if o == nil || o.Getanchor == nil {
		var ret string
		return ret
	}
	return *o.Getanchor
}

// GetGetanchorOk returns a tuple with the Getanchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetGetanchorOk() (*string, bool) {
	if o == nil || o.Getanchor == nil {
		return nil, false
	}
	return o.Getanchor, true
}

// HasGetanchor returns a boolean if a field has been set.
func (o *SchemaObject) HasGetanchor() bool {
	if o != nil && o.Getanchor != nil {
		return true
	}

	return false
}

// SetGetanchor gets a reference to the given string and assigns it to the Getanchor field.
func (o *SchemaObject) SetGetanchor(v string) {
	o.Getanchor = &v
}

// GetGetcomment returns the Getcomment field value if set, zero value otherwise.
func (o *SchemaObject) GetGetcomment() string {
	if o == nil || o.Getcomment == nil {
		var ret string
		return ret
	}
	return *o.Getcomment
}

// GetGetcommentOk returns a tuple with the Getcomment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetGetcommentOk() (*string, bool) {
	if o == nil || o.Getcomment == nil {
		return nil, false
	}
	return o.Getcomment, true
}

// HasGetcomment returns a boolean if a field has been set.
func (o *SchemaObject) HasGetcomment() bool {
	if o != nil && o.Getcomment != nil {
		return true
	}

	return false
}

// SetGetcomment gets a reference to the given string and assigns it to the Getcomment field.
func (o *SchemaObject) SetGetcomment(v string) {
	o.Getcomment = &v
}

// GetGetid returns the Getid field value if set, zero value otherwise.
func (o *SchemaObject) GetGetid() string {
	if o == nil || o.Getid == nil {
		var ret string
		return ret
	}
	return *o.Getid
}

// GetGetidOk returns a tuple with the Getid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetGetidOk() (*string, bool) {
	if o == nil || o.Getid == nil {
		return nil, false
	}
	return o.Getid, true
}

// HasGetid returns a boolean if a field has been set.
func (o *SchemaObject) HasGetid() bool {
	if o != nil && o.Getid != nil {
		return true
	}

	return false
}

// SetGetid gets a reference to the given string and assigns it to the Getid field.
func (o *SchemaObject) SetGetid(v string) {
	o.Getid = &v
}

// GetGetref returns the Getref field value if set, zero value otherwise.
func (o *SchemaObject) GetGetref() string {
	if o == nil || o.Getref == nil {
		var ret string
		return ret
	}
	return *o.Getref
}

// GetGetrefOk returns a tuple with the Getref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetGetrefOk() (*string, bool) {
	if o == nil || o.Getref == nil {
		return nil, false
	}
	return o.Getref, true
}

// HasGetref returns a boolean if a field has been set.
func (o *SchemaObject) HasGetref() bool {
	if o != nil && o.Getref != nil {
		return true
	}

	return false
}

// SetGetref gets a reference to the given string and assigns it to the Getref field.
func (o *SchemaObject) SetGetref(v string) {
	o.Getref = &v
}

// GetGetschema returns the Getschema field value if set, zero value otherwise.
func (o *SchemaObject) GetGetschema() string {
	if o == nil || o.Getschema == nil {
		var ret string
		return ret
	}
	return *o.Getschema
}

// GetGetschemaOk returns a tuple with the Getschema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetGetschemaOk() (*string, bool) {
	if o == nil || o.Getschema == nil {
		return nil, false
	}
	return o.Getschema, true
}

// HasGetschema returns a boolean if a field has been set.
func (o *SchemaObject) HasGetschema() bool {
	if o != nil && o.Getschema != nil {
		return true
	}

	return false
}

// SetGetschema gets a reference to the given string and assigns it to the Getschema field.
func (o *SchemaObject) SetGetschema(v string) {
	o.Getschema = &v
}

// GetIf returns the If field value if set, zero value otherwise.
func (o *SchemaObject) GetIf() Schema {
	if o == nil || o.If == nil {
		var ret Schema
		return ret
	}
	return *o.If
}

// GetIfOk returns a tuple with the If field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetIfOk() (*Schema, bool) {
	if o == nil || o.If == nil {
		return nil, false
	}
	return o.If, true
}

// HasIf returns a boolean if a field has been set.
func (o *SchemaObject) HasIf() bool {
	if o != nil && o.If != nil {
		return true
	}

	return false
}

// SetIf gets a reference to the given Schema and assigns it to the If field.
func (o *SchemaObject) SetIf(v Schema) {
	o.If = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *SchemaObject) GetItems() SchemaObject {
	if o == nil || o.Items == nil {
		var ret SchemaObject
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetItemsOk() (*SchemaObject, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SchemaObject) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given SchemaObject and assigns it to the Items field.
func (o *SchemaObject) SetItems(v SchemaObject) {
	o.Items = &v
}

// GetJsonSchema returns the JsonSchema field value if set, zero value otherwise.
func (o *SchemaObject) GetJsonSchema() map[string]map[string]interface{} {
	if o == nil || o.JsonSchema == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.JsonSchema
}

// GetJsonSchemaOk returns a tuple with the JsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetJsonSchemaOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.JsonSchema == nil {
		return nil, false
	}
	return o.JsonSchema, true
}

// HasJsonSchema returns a boolean if a field has been set.
func (o *SchemaObject) HasJsonSchema() bool {
	if o != nil && o.JsonSchema != nil {
		return true
	}

	return false
}

// SetJsonSchema gets a reference to the given map[string]map[string]interface{} and assigns it to the JsonSchema field.
func (o *SchemaObject) SetJsonSchema(v map[string]map[string]interface{}) {
	o.JsonSchema = v
}

// GetJsonSchemaImpl returns the JsonSchemaImpl field value if set, zero value otherwise.
func (o *SchemaObject) GetJsonSchemaImpl() map[string]interface{} {
	if o == nil || o.JsonSchemaImpl == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.JsonSchemaImpl
}

// GetJsonSchemaImplOk returns a tuple with the JsonSchemaImpl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetJsonSchemaImplOk() (map[string]interface{}, bool) {
	if o == nil || o.JsonSchemaImpl == nil {
		return nil, false
	}
	return o.JsonSchemaImpl, true
}

// HasJsonSchemaImpl returns a boolean if a field has been set.
func (o *SchemaObject) HasJsonSchemaImpl() bool {
	if o != nil && o.JsonSchemaImpl != nil {
		return true
	}

	return false
}

// SetJsonSchemaImpl gets a reference to the given map[string]interface{} and assigns it to the JsonSchemaImpl field.
func (o *SchemaObject) SetJsonSchemaImpl(v map[string]interface{}) {
	o.JsonSchemaImpl = v
}

// GetMaxContains returns the MaxContains field value if set, zero value otherwise.
func (o *SchemaObject) GetMaxContains() int32 {
	if o == nil || o.MaxContains == nil {
		var ret int32
		return ret
	}
	return *o.MaxContains
}

// GetMaxContainsOk returns a tuple with the MaxContains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMaxContainsOk() (*int32, bool) {
	if o == nil || o.MaxContains == nil {
		return nil, false
	}
	return o.MaxContains, true
}

// HasMaxContains returns a boolean if a field has been set.
func (o *SchemaObject) HasMaxContains() bool {
	if o != nil && o.MaxContains != nil {
		return true
	}

	return false
}

// SetMaxContains gets a reference to the given int32 and assigns it to the MaxContains field.
func (o *SchemaObject) SetMaxContains(v int32) {
	o.MaxContains = &v
}

// GetMaxItems returns the MaxItems field value if set, zero value otherwise.
func (o *SchemaObject) GetMaxItems() int32 {
	if o == nil || o.MaxItems == nil {
		var ret int32
		return ret
	}
	return *o.MaxItems
}

// GetMaxItemsOk returns a tuple with the MaxItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMaxItemsOk() (*int32, bool) {
	if o == nil || o.MaxItems == nil {
		return nil, false
	}
	return o.MaxItems, true
}

// HasMaxItems returns a boolean if a field has been set.
func (o *SchemaObject) HasMaxItems() bool {
	if o != nil && o.MaxItems != nil {
		return true
	}

	return false
}

// SetMaxItems gets a reference to the given int32 and assigns it to the MaxItems field.
func (o *SchemaObject) SetMaxItems(v int32) {
	o.MaxItems = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *SchemaObject) GetMaxLength() int32 {
	if o == nil || o.MaxLength == nil {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMaxLengthOk() (*int32, bool) {
	if o == nil || o.MaxLength == nil {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *SchemaObject) HasMaxLength() bool {
	if o != nil && o.MaxLength != nil {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *SchemaObject) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetMaxProperties returns the MaxProperties field value if set, zero value otherwise.
func (o *SchemaObject) GetMaxProperties() int32 {
	if o == nil || o.MaxProperties == nil {
		var ret int32
		return ret
	}
	return *o.MaxProperties
}

// GetMaxPropertiesOk returns a tuple with the MaxProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMaxPropertiesOk() (*int32, bool) {
	if o == nil || o.MaxProperties == nil {
		return nil, false
	}
	return o.MaxProperties, true
}

// HasMaxProperties returns a boolean if a field has been set.
func (o *SchemaObject) HasMaxProperties() bool {
	if o != nil && o.MaxProperties != nil {
		return true
	}

	return false
}

// SetMaxProperties gets a reference to the given int32 and assigns it to the MaxProperties field.
func (o *SchemaObject) SetMaxProperties(v int32) {
	o.MaxProperties = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *SchemaObject) GetMaximum() float32 {
	if o == nil || o.Maximum == nil {
		var ret float32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMaximumOk() (*float32, bool) {
	if o == nil || o.Maximum == nil {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *SchemaObject) HasMaximum() bool {
	if o != nil && o.Maximum != nil {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given float32 and assigns it to the Maximum field.
func (o *SchemaObject) SetMaximum(v float32) {
	o.Maximum = &v
}

// GetMinContains returns the MinContains field value if set, zero value otherwise.
func (o *SchemaObject) GetMinContains() int32 {
	if o == nil || o.MinContains == nil {
		var ret int32
		return ret
	}
	return *o.MinContains
}

// GetMinContainsOk returns a tuple with the MinContains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMinContainsOk() (*int32, bool) {
	if o == nil || o.MinContains == nil {
		return nil, false
	}
	return o.MinContains, true
}

// HasMinContains returns a boolean if a field has been set.
func (o *SchemaObject) HasMinContains() bool {
	if o != nil && o.MinContains != nil {
		return true
	}

	return false
}

// SetMinContains gets a reference to the given int32 and assigns it to the MinContains field.
func (o *SchemaObject) SetMinContains(v int32) {
	o.MinContains = &v
}

// GetMinItems returns the MinItems field value if set, zero value otherwise.
func (o *SchemaObject) GetMinItems() int32 {
	if o == nil || o.MinItems == nil {
		var ret int32
		return ret
	}
	return *o.MinItems
}

// GetMinItemsOk returns a tuple with the MinItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMinItemsOk() (*int32, bool) {
	if o == nil || o.MinItems == nil {
		return nil, false
	}
	return o.MinItems, true
}

// HasMinItems returns a boolean if a field has been set.
func (o *SchemaObject) HasMinItems() bool {
	if o != nil && o.MinItems != nil {
		return true
	}

	return false
}

// SetMinItems gets a reference to the given int32 and assigns it to the MinItems field.
func (o *SchemaObject) SetMinItems(v int32) {
	o.MinItems = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *SchemaObject) GetMinLength() int32 {
	if o == nil || o.MinLength == nil {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMinLengthOk() (*int32, bool) {
	if o == nil || o.MinLength == nil {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *SchemaObject) HasMinLength() bool {
	if o != nil && o.MinLength != nil {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *SchemaObject) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetMinProperties returns the MinProperties field value if set, zero value otherwise.
func (o *SchemaObject) GetMinProperties() int32 {
	if o == nil || o.MinProperties == nil {
		var ret int32
		return ret
	}
	return *o.MinProperties
}

// GetMinPropertiesOk returns a tuple with the MinProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMinPropertiesOk() (*int32, bool) {
	if o == nil || o.MinProperties == nil {
		return nil, false
	}
	return o.MinProperties, true
}

// HasMinProperties returns a boolean if a field has been set.
func (o *SchemaObject) HasMinProperties() bool {
	if o != nil && o.MinProperties != nil {
		return true
	}

	return false
}

// SetMinProperties gets a reference to the given int32 and assigns it to the MinProperties field.
func (o *SchemaObject) SetMinProperties(v int32) {
	o.MinProperties = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *SchemaObject) GetMinimum() float32 {
	if o == nil || o.Minimum == nil {
		var ret float32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMinimumOk() (*float32, bool) {
	if o == nil || o.Minimum == nil {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *SchemaObject) HasMinimum() bool {
	if o != nil && o.Minimum != nil {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given float32 and assigns it to the Minimum field.
func (o *SchemaObject) SetMinimum(v float32) {
	o.Minimum = &v
}

// GetMultipleOf returns the MultipleOf field value if set, zero value otherwise.
func (o *SchemaObject) GetMultipleOf() float32 {
	if o == nil || o.MultipleOf == nil {
		var ret float32
		return ret
	}
	return *o.MultipleOf
}

// GetMultipleOfOk returns a tuple with the MultipleOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMultipleOfOk() (*float32, bool) {
	if o == nil || o.MultipleOf == nil {
		return nil, false
	}
	return o.MultipleOf, true
}

// HasMultipleOf returns a boolean if a field has been set.
func (o *SchemaObject) HasMultipleOf() bool {
	if o != nil && o.MultipleOf != nil {
		return true
	}

	return false
}

// SetMultipleOf gets a reference to the given float32 and assigns it to the MultipleOf field.
func (o *SchemaObject) SetMultipleOf(v float32) {
	o.MultipleOf = &v
}

// GetNot returns the Not field value if set, zero value otherwise.
func (o *SchemaObject) GetNot() Schema {
	if o == nil || o.Not == nil {
		var ret Schema
		return ret
	}
	return *o.Not
}

// GetNotOk returns a tuple with the Not field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetNotOk() (*Schema, bool) {
	if o == nil || o.Not == nil {
		return nil, false
	}
	return o.Not, true
}

// HasNot returns a boolean if a field has been set.
func (o *SchemaObject) HasNot() bool {
	if o != nil && o.Not != nil {
		return true
	}

	return false
}

// SetNot gets a reference to the given Schema and assigns it to the Not field.
func (o *SchemaObject) SetNot(v Schema) {
	o.Not = &v
}

// GetNullable returns the Nullable field value if set, zero value otherwise.
func (o *SchemaObject) GetNullable() bool {
	if o == nil || o.Nullable == nil {
		var ret bool
		return ret
	}
	return *o.Nullable
}

// GetNullableOk returns a tuple with the Nullable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetNullableOk() (*bool, bool) {
	if o == nil || o.Nullable == nil {
		return nil, false
	}
	return o.Nullable, true
}

// HasNullable returns a boolean if a field has been set.
func (o *SchemaObject) HasNullable() bool {
	if o != nil && o.Nullable != nil {
		return true
	}

	return false
}

// SetNullable gets a reference to the given bool and assigns it to the Nullable field.
func (o *SchemaObject) SetNullable(v bool) {
	o.Nullable = &v
}

// GetOneOf returns the OneOf field value if set, zero value otherwise.
func (o *SchemaObject) GetOneOf() []Schema {
	if o == nil || o.OneOf == nil {
		var ret []Schema
		return ret
	}
	return o.OneOf
}

// GetOneOfOk returns a tuple with the OneOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetOneOfOk() ([]Schema, bool) {
	if o == nil || o.OneOf == nil {
		return nil, false
	}
	return o.OneOf, true
}

// HasOneOf returns a boolean if a field has been set.
func (o *SchemaObject) HasOneOf() bool {
	if o != nil && o.OneOf != nil {
		return true
	}

	return false
}

// SetOneOf gets a reference to the given []Schema and assigns it to the OneOf field.
func (o *SchemaObject) SetOneOf(v []Schema) {
	o.OneOf = v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *SchemaObject) GetPattern() string {
	if o == nil || o.Pattern == nil {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetPatternOk() (*string, bool) {
	if o == nil || o.Pattern == nil {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *SchemaObject) HasPattern() bool {
	if o != nil && o.Pattern != nil {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *SchemaObject) SetPattern(v string) {
	o.Pattern = &v
}

// GetPrefixItems returns the PrefixItems field value if set, zero value otherwise.
func (o *SchemaObject) GetPrefixItems() []Schema {
	if o == nil || o.PrefixItems == nil {
		var ret []Schema
		return ret
	}
	return o.PrefixItems
}

// GetPrefixItemsOk returns a tuple with the PrefixItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetPrefixItemsOk() ([]Schema, bool) {
	if o == nil || o.PrefixItems == nil {
		return nil, false
	}
	return o.PrefixItems, true
}

// HasPrefixItems returns a boolean if a field has been set.
func (o *SchemaObject) HasPrefixItems() bool {
	if o != nil && o.PrefixItems != nil {
		return true
	}

	return false
}

// SetPrefixItems gets a reference to the given []Schema and assigns it to the PrefixItems field.
func (o *SchemaObject) SetPrefixItems(v []Schema) {
	o.PrefixItems = v
}

// GetPropertyNames returns the PropertyNames field value if set, zero value otherwise.
func (o *SchemaObject) GetPropertyNames() Schema {
	if o == nil || o.PropertyNames == nil {
		var ret Schema
		return ret
	}
	return *o.PropertyNames
}

// GetPropertyNamesOk returns a tuple with the PropertyNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetPropertyNamesOk() (*Schema, bool) {
	if o == nil || o.PropertyNames == nil {
		return nil, false
	}
	return o.PropertyNames, true
}

// HasPropertyNames returns a boolean if a field has been set.
func (o *SchemaObject) HasPropertyNames() bool {
	if o != nil && o.PropertyNames != nil {
		return true
	}

	return false
}

// SetPropertyNames gets a reference to the given Schema and assigns it to the PropertyNames field.
func (o *SchemaObject) SetPropertyNames(v Schema) {
	o.PropertyNames = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *SchemaObject) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *SchemaObject) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *SchemaObject) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *SchemaObject) GetRequired() []string {
	if o == nil || o.Required == nil {
		var ret []string
		return ret
	}
	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetRequiredOk() ([]string, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *SchemaObject) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given []string and assigns it to the Required field.
func (o *SchemaObject) SetRequired(v []string) {
	o.Required = v
}

// GetThen returns the Then field value if set, zero value otherwise.
func (o *SchemaObject) GetThen() Schema {
	if o == nil || o.Then == nil {
		var ret Schema
		return ret
	}
	return *o.Then
}

// GetThenOk returns a tuple with the Then field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetThenOk() (*Schema, bool) {
	if o == nil || o.Then == nil {
		return nil, false
	}
	return o.Then, true
}

// HasThen returns a boolean if a field has been set.
func (o *SchemaObject) HasThen() bool {
	if o != nil && o.Then != nil {
		return true
	}

	return false
}

// SetThen gets a reference to the given Schema and assigns it to the Then field.
func (o *SchemaObject) SetThen(v Schema) {
	o.Then = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SchemaObject) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SchemaObject) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SchemaObject) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SchemaObject) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SchemaObject) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SchemaObject) SetType(v string) {
	o.Type = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *SchemaObject) GetTypes() []string {
	if o == nil || o.Types == nil {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetTypesOk() ([]string, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *SchemaObject) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *SchemaObject) SetTypes(v []string) {
	o.Types = v
}

// GetUnevaluatedItems returns the UnevaluatedItems field value if set, zero value otherwise.
func (o *SchemaObject) GetUnevaluatedItems() Schema {
	if o == nil || o.UnevaluatedItems == nil {
		var ret Schema
		return ret
	}
	return *o.UnevaluatedItems
}

// GetUnevaluatedItemsOk returns a tuple with the UnevaluatedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetUnevaluatedItemsOk() (*Schema, bool) {
	if o == nil || o.UnevaluatedItems == nil {
		return nil, false
	}
	return o.UnevaluatedItems, true
}

// HasUnevaluatedItems returns a boolean if a field has been set.
func (o *SchemaObject) HasUnevaluatedItems() bool {
	if o != nil && o.UnevaluatedItems != nil {
		return true
	}

	return false
}

// SetUnevaluatedItems gets a reference to the given Schema and assigns it to the UnevaluatedItems field.
func (o *SchemaObject) SetUnevaluatedItems(v Schema) {
	o.UnevaluatedItems = &v
}

// GetUnevaluatedProperties returns the UnevaluatedProperties field value if set, zero value otherwise.
func (o *SchemaObject) GetUnevaluatedProperties() Schema {
	if o == nil || o.UnevaluatedProperties == nil {
		var ret Schema
		return ret
	}
	return *o.UnevaluatedProperties
}

// GetUnevaluatedPropertiesOk returns a tuple with the UnevaluatedProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetUnevaluatedPropertiesOk() (*Schema, bool) {
	if o == nil || o.UnevaluatedProperties == nil {
		return nil, false
	}
	return o.UnevaluatedProperties, true
}

// HasUnevaluatedProperties returns a boolean if a field has been set.
func (o *SchemaObject) HasUnevaluatedProperties() bool {
	if o != nil && o.UnevaluatedProperties != nil {
		return true
	}

	return false
}

// SetUnevaluatedProperties gets a reference to the given Schema and assigns it to the UnevaluatedProperties field.
func (o *SchemaObject) SetUnevaluatedProperties(v Schema) {
	o.UnevaluatedProperties = &v
}

// GetUniqueItems returns the UniqueItems field value if set, zero value otherwise.
func (o *SchemaObject) GetUniqueItems() bool {
	if o == nil || o.UniqueItems == nil {
		var ret bool
		return ret
	}
	return *o.UniqueItems
}

// GetUniqueItemsOk returns a tuple with the UniqueItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetUniqueItemsOk() (*bool, bool) {
	if o == nil || o.UniqueItems == nil {
		return nil, false
	}
	return o.UniqueItems, true
}

// HasUniqueItems returns a boolean if a field has been set.
func (o *SchemaObject) HasUniqueItems() bool {
	if o != nil && o.UniqueItems != nil {
		return true
	}

	return false
}

// SetUniqueItems gets a reference to the given bool and assigns it to the UniqueItems field.
func (o *SchemaObject) SetUniqueItems(v bool) {
	o.UniqueItems = &v
}

// GetWriteOnly returns the WriteOnly field value if set, zero value otherwise.
func (o *SchemaObject) GetWriteOnly() bool {
	if o == nil || o.WriteOnly == nil {
		var ret bool
		return ret
	}
	return *o.WriteOnly
}

// GetWriteOnlyOk returns a tuple with the WriteOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetWriteOnlyOk() (*bool, bool) {
	if o == nil || o.WriteOnly == nil {
		return nil, false
	}
	return o.WriteOnly, true
}

// HasWriteOnly returns a boolean if a field has been set.
func (o *SchemaObject) HasWriteOnly() bool {
	if o != nil && o.WriteOnly != nil {
		return true
	}

	return false
}

// SetWriteOnly gets a reference to the given bool and assigns it to the WriteOnly field.
func (o *SchemaObject) SetWriteOnly(v bool) {
	o.WriteOnly = &v
}

// GetXml returns the Xml field value if set, zero value otherwise.
func (o *SchemaObject) GetXml() XML {
	if o == nil || o.Xml == nil {
		var ret XML
		return ret
	}
	return *o.Xml
}

// GetXmlOk returns a tuple with the Xml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetXmlOk() (*XML, bool) {
	if o == nil || o.Xml == nil {
		return nil, false
	}
	return o.Xml, true
}

// HasXml returns a boolean if a field has been set.
func (o *SchemaObject) HasXml() bool {
	if o != nil && o.Xml != nil {
		return true
	}

	return false
}

// SetXml gets a reference to the given XML and assigns it to the Xml field.
func (o *SchemaObject) SetXml(v XML) {
	o.Xml = &v
}

func (o SchemaObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalItems != nil {
		toSerialize["additionalItems"] = o.AdditionalItems
	}
	if o.AdditionalPropertiesField != nil {
		toSerialize["additionalProperties"] = o.AdditionalPropertiesField
	}
	if o.AllOf != nil {
		toSerialize["allOf"] = o.AllOf
	}
	if o.AnyOf != nil {
		toSerialize["anyOf"] = o.AnyOf
	}
	if o.BooleanSchemaValue != nil {
		toSerialize["booleanSchemaValue"] = o.BooleanSchemaValue
	}
	if o.Const != nil {
		toSerialize["const"] = o.Const
	}
	if o.Contains != nil {
		toSerialize["contains"] = o.Contains
	}
	if o.ContentEncoding != nil {
		toSerialize["contentEncoding"] = o.ContentEncoding
	}
	if o.ContentMediaType != nil {
		toSerialize["contentMediaType"] = o.ContentMediaType
	}
	if o.ContentSchema != nil {
		toSerialize["contentSchema"] = o.ContentSchema
	}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	if o.DependentRequired != nil {
		toSerialize["dependentRequired"] = o.DependentRequired
	}
	if o.Deprecated != nil {
		toSerialize["deprecated"] = o.Deprecated
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Discriminator != nil {
		toSerialize["discriminator"] = o.Discriminator
	}
	if o.Else != nil {
		toSerialize["else"] = o.Else
	}
	if o.Enum != nil {
		toSerialize["enum"] = o.Enum
	}
	if o.Example != nil {
		toSerialize["example"] = o.Example
	}
	if o.ExampleSetFlag != nil {
		toSerialize["exampleSetFlag"] = o.ExampleSetFlag
	}
	if o.Examples != nil {
		toSerialize["examples"] = o.Examples
	}
	if o.ExclusiveMaximum != nil {
		toSerialize["exclusiveMaximum"] = o.ExclusiveMaximum
	}
	if o.ExclusiveMaximumValue != nil {
		toSerialize["exclusiveMaximumValue"] = o.ExclusiveMaximumValue
	}
	if o.ExclusiveMinimum != nil {
		toSerialize["exclusiveMinimum"] = o.ExclusiveMinimum
	}
	if o.ExclusiveMinimumValue != nil {
		toSerialize["exclusiveMinimumValue"] = o.ExclusiveMinimumValue
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.ExternalDocs != nil {
		toSerialize["externalDocs"] = o.ExternalDocs
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Getanchor != nil {
		toSerialize["get$anchor"] = o.Getanchor
	}
	if o.Getcomment != nil {
		toSerialize["get$comment"] = o.Getcomment
	}
	if o.Getid != nil {
		toSerialize["get$id"] = o.Getid
	}
	if o.Getref != nil {
		toSerialize["get$ref"] = o.Getref
	}
	if o.Getschema != nil {
		toSerialize["get$schema"] = o.Getschema
	}
	if o.If != nil {
		toSerialize["if"] = o.If
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.JsonSchema != nil {
		toSerialize["jsonSchema"] = o.JsonSchema
	}
	if o.JsonSchemaImpl != nil {
		toSerialize["jsonSchemaImpl"] = o.JsonSchemaImpl
	}
	if o.MaxContains != nil {
		toSerialize["maxContains"] = o.MaxContains
	}
	if o.MaxItems != nil {
		toSerialize["maxItems"] = o.MaxItems
	}
	if o.MaxLength != nil {
		toSerialize["maxLength"] = o.MaxLength
	}
	if o.MaxProperties != nil {
		toSerialize["maxProperties"] = o.MaxProperties
	}
	if o.Maximum != nil {
		toSerialize["maximum"] = o.Maximum
	}
	if o.MinContains != nil {
		toSerialize["minContains"] = o.MinContains
	}
	if o.MinItems != nil {
		toSerialize["minItems"] = o.MinItems
	}
	if o.MinLength != nil {
		toSerialize["minLength"] = o.MinLength
	}
	if o.MinProperties != nil {
		toSerialize["minProperties"] = o.MinProperties
	}
	if o.Minimum != nil {
		toSerialize["minimum"] = o.Minimum
	}
	if o.MultipleOf != nil {
		toSerialize["multipleOf"] = o.MultipleOf
	}
	if o.Not != nil {
		toSerialize["not"] = o.Not
	}
	if o.Nullable != nil {
		toSerialize["nullable"] = o.Nullable
	}
	if o.OneOf != nil {
		toSerialize["oneOf"] = o.OneOf
	}
	if o.Pattern != nil {
		toSerialize["pattern"] = o.Pattern
	}
	if o.PrefixItems != nil {
		toSerialize["prefixItems"] = o.PrefixItems
	}
	if o.PropertyNames != nil {
		toSerialize["propertyNames"] = o.PropertyNames
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Then != nil {
		toSerialize["then"] = o.Then
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	if o.UnevaluatedItems != nil {
		toSerialize["unevaluatedItems"] = o.UnevaluatedItems
	}
	if o.UnevaluatedProperties != nil {
		toSerialize["unevaluatedProperties"] = o.UnevaluatedProperties
	}
	if o.UniqueItems != nil {
		toSerialize["uniqueItems"] = o.UniqueItems
	}
	if o.WriteOnly != nil {
		toSerialize["writeOnly"] = o.WriteOnly
	}
	if o.Xml != nil {
		toSerialize["xml"] = o.Xml
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaObject struct {
	value *SchemaObject
	isSet bool
}

func (v NullableSchemaObject) Get() *SchemaObject {
	return v.value
}

func (v *NullableSchemaObject) Set(val *SchemaObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaObject(val *SchemaObject) *NullableSchemaObject {
	return &NullableSchemaObject{value: val, isSet: true}
}

func (v NullableSchemaObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

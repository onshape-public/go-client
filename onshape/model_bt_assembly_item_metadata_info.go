/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTAssemblyItemMetadataInfo struct for BTAssemblyItemMetadataInfo
type BTAssemblyItemMetadataInfo struct {
	Children                   []BTAssemblyItemMetadataInfo       `json:"children,omitempty"`
	PropertyIdToError          *map[string]string                 `json:"propertyIdToError,omitempty"`
	PropertyIdToEvalInfo       *map[string]string                 `json:"propertyIdToEvalInfo,omitempty"`
	PropertyIdToOverrideStatus *map[string]string                 `json:"propertyIdToOverrideStatus,omitempty"`
	PropertyIdToSourceType     *map[string]string                 `json:"propertyIdToSourceType,omitempty"`
	PropertyIdToValue          *map[string]string                 `json:"propertyIdToValue,omitempty"`
	RequestInfo                *BTAssemblyItemMetadataRequestInfo `json:"requestInfo,omitempty"`
}

// NewBTAssemblyItemMetadataInfo instantiates a new BTAssemblyItemMetadataInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTAssemblyItemMetadataInfo() *BTAssemblyItemMetadataInfo {
	this := BTAssemblyItemMetadataInfo{}
	return &this
}

// NewBTAssemblyItemMetadataInfoWithDefaults instantiates a new BTAssemblyItemMetadataInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTAssemblyItemMetadataInfoWithDefaults() *BTAssemblyItemMetadataInfo {
	this := BTAssemblyItemMetadataInfo{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *BTAssemblyItemMetadataInfo) GetChildren() []BTAssemblyItemMetadataInfo {
	if o == nil || o.Children == nil {
		var ret []BTAssemblyItemMetadataInfo
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyItemMetadataInfo) GetChildrenOk() ([]BTAssemblyItemMetadataInfo, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *BTAssemblyItemMetadataInfo) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []BTAssemblyItemMetadataInfo and assigns it to the Children field.
func (o *BTAssemblyItemMetadataInfo) SetChildren(v []BTAssemblyItemMetadataInfo) {
	o.Children = v
}

// GetPropertyIdToError returns the PropertyIdToError field value if set, zero value otherwise.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToError() map[string]string {
	if o == nil || o.PropertyIdToError == nil {
		var ret map[string]string
		return ret
	}
	return *o.PropertyIdToError
}

// GetPropertyIdToErrorOk returns a tuple with the PropertyIdToError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToErrorOk() (*map[string]string, bool) {
	if o == nil || o.PropertyIdToError == nil {
		return nil, false
	}
	return o.PropertyIdToError, true
}

// HasPropertyIdToError returns a boolean if a field has been set.
func (o *BTAssemblyItemMetadataInfo) HasPropertyIdToError() bool {
	if o != nil && o.PropertyIdToError != nil {
		return true
	}

	return false
}

// SetPropertyIdToError gets a reference to the given map[string]string and assigns it to the PropertyIdToError field.
func (o *BTAssemblyItemMetadataInfo) SetPropertyIdToError(v map[string]string) {
	o.PropertyIdToError = &v
}

// GetPropertyIdToEvalInfo returns the PropertyIdToEvalInfo field value if set, zero value otherwise.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToEvalInfo() map[string]string {
	if o == nil || o.PropertyIdToEvalInfo == nil {
		var ret map[string]string
		return ret
	}
	return *o.PropertyIdToEvalInfo
}

// GetPropertyIdToEvalInfoOk returns a tuple with the PropertyIdToEvalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToEvalInfoOk() (*map[string]string, bool) {
	if o == nil || o.PropertyIdToEvalInfo == nil {
		return nil, false
	}
	return o.PropertyIdToEvalInfo, true
}

// HasPropertyIdToEvalInfo returns a boolean if a field has been set.
func (o *BTAssemblyItemMetadataInfo) HasPropertyIdToEvalInfo() bool {
	if o != nil && o.PropertyIdToEvalInfo != nil {
		return true
	}

	return false
}

// SetPropertyIdToEvalInfo gets a reference to the given map[string]string and assigns it to the PropertyIdToEvalInfo field.
func (o *BTAssemblyItemMetadataInfo) SetPropertyIdToEvalInfo(v map[string]string) {
	o.PropertyIdToEvalInfo = &v
}

// GetPropertyIdToOverrideStatus returns the PropertyIdToOverrideStatus field value if set, zero value otherwise.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToOverrideStatus() map[string]string {
	if o == nil || o.PropertyIdToOverrideStatus == nil {
		var ret map[string]string
		return ret
	}
	return *o.PropertyIdToOverrideStatus
}

// GetPropertyIdToOverrideStatusOk returns a tuple with the PropertyIdToOverrideStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToOverrideStatusOk() (*map[string]string, bool) {
	if o == nil || o.PropertyIdToOverrideStatus == nil {
		return nil, false
	}
	return o.PropertyIdToOverrideStatus, true
}

// HasPropertyIdToOverrideStatus returns a boolean if a field has been set.
func (o *BTAssemblyItemMetadataInfo) HasPropertyIdToOverrideStatus() bool {
	if o != nil && o.PropertyIdToOverrideStatus != nil {
		return true
	}

	return false
}

// SetPropertyIdToOverrideStatus gets a reference to the given map[string]string and assigns it to the PropertyIdToOverrideStatus field.
func (o *BTAssemblyItemMetadataInfo) SetPropertyIdToOverrideStatus(v map[string]string) {
	o.PropertyIdToOverrideStatus = &v
}

// GetPropertyIdToSourceType returns the PropertyIdToSourceType field value if set, zero value otherwise.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToSourceType() map[string]string {
	if o == nil || o.PropertyIdToSourceType == nil {
		var ret map[string]string
		return ret
	}
	return *o.PropertyIdToSourceType
}

// GetPropertyIdToSourceTypeOk returns a tuple with the PropertyIdToSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToSourceTypeOk() (*map[string]string, bool) {
	if o == nil || o.PropertyIdToSourceType == nil {
		return nil, false
	}
	return o.PropertyIdToSourceType, true
}

// HasPropertyIdToSourceType returns a boolean if a field has been set.
func (o *BTAssemblyItemMetadataInfo) HasPropertyIdToSourceType() bool {
	if o != nil && o.PropertyIdToSourceType != nil {
		return true
	}

	return false
}

// SetPropertyIdToSourceType gets a reference to the given map[string]string and assigns it to the PropertyIdToSourceType field.
func (o *BTAssemblyItemMetadataInfo) SetPropertyIdToSourceType(v map[string]string) {
	o.PropertyIdToSourceType = &v
}

// GetPropertyIdToValue returns the PropertyIdToValue field value if set, zero value otherwise.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToValue() map[string]string {
	if o == nil || o.PropertyIdToValue == nil {
		var ret map[string]string
		return ret
	}
	return *o.PropertyIdToValue
}

// GetPropertyIdToValueOk returns a tuple with the PropertyIdToValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyItemMetadataInfo) GetPropertyIdToValueOk() (*map[string]string, bool) {
	if o == nil || o.PropertyIdToValue == nil {
		return nil, false
	}
	return o.PropertyIdToValue, true
}

// HasPropertyIdToValue returns a boolean if a field has been set.
func (o *BTAssemblyItemMetadataInfo) HasPropertyIdToValue() bool {
	if o != nil && o.PropertyIdToValue != nil {
		return true
	}

	return false
}

// SetPropertyIdToValue gets a reference to the given map[string]string and assigns it to the PropertyIdToValue field.
func (o *BTAssemblyItemMetadataInfo) SetPropertyIdToValue(v map[string]string) {
	o.PropertyIdToValue = &v
}

// GetRequestInfo returns the RequestInfo field value if set, zero value otherwise.
func (o *BTAssemblyItemMetadataInfo) GetRequestInfo() BTAssemblyItemMetadataRequestInfo {
	if o == nil || o.RequestInfo == nil {
		var ret BTAssemblyItemMetadataRequestInfo
		return ret
	}
	return *o.RequestInfo
}

// GetRequestInfoOk returns a tuple with the RequestInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyItemMetadataInfo) GetRequestInfoOk() (*BTAssemblyItemMetadataRequestInfo, bool) {
	if o == nil || o.RequestInfo == nil {
		return nil, false
	}
	return o.RequestInfo, true
}

// HasRequestInfo returns a boolean if a field has been set.
func (o *BTAssemblyItemMetadataInfo) HasRequestInfo() bool {
	if o != nil && o.RequestInfo != nil {
		return true
	}

	return false
}

// SetRequestInfo gets a reference to the given BTAssemblyItemMetadataRequestInfo and assigns it to the RequestInfo field.
func (o *BTAssemblyItemMetadataInfo) SetRequestInfo(v BTAssemblyItemMetadataRequestInfo) {
	o.RequestInfo = &v
}

func (o BTAssemblyItemMetadataInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.PropertyIdToError != nil {
		toSerialize["propertyIdToError"] = o.PropertyIdToError
	}
	if o.PropertyIdToEvalInfo != nil {
		toSerialize["propertyIdToEvalInfo"] = o.PropertyIdToEvalInfo
	}
	if o.PropertyIdToOverrideStatus != nil {
		toSerialize["propertyIdToOverrideStatus"] = o.PropertyIdToOverrideStatus
	}
	if o.PropertyIdToSourceType != nil {
		toSerialize["propertyIdToSourceType"] = o.PropertyIdToSourceType
	}
	if o.PropertyIdToValue != nil {
		toSerialize["propertyIdToValue"] = o.PropertyIdToValue
	}
	if o.RequestInfo != nil {
		toSerialize["requestInfo"] = o.RequestInfo
	}
	return json.Marshal(toSerialize)
}

type NullableBTAssemblyItemMetadataInfo struct {
	value *BTAssemblyItemMetadataInfo
	isSet bool
}

func (v NullableBTAssemblyItemMetadataInfo) Get() *BTAssemblyItemMetadataInfo {
	return v.value
}

func (v *NullableBTAssemblyItemMetadataInfo) Set(val *BTAssemblyItemMetadataInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTAssemblyItemMetadataInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTAssemblyItemMetadataInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTAssemblyItemMetadataInfo(val *BTAssemblyItemMetadataInfo) *NullableBTAssemblyItemMetadataInfo {
	return &NullableBTAssemblyItemMetadataInfo{value: val, isSet: true}
}

func (v NullableBTAssemblyItemMetadataInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTAssemblyItemMetadataInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

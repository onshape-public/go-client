/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTAclParams struct for BTAclParams
type BTAclParams struct {
	AnonymousAccessAllowed *bool              `json:"anonymousAccessAllowed,omitempty"`
	AnonymousAllowsExport  *bool              `json:"anonymousAllowsExport,omitempty"`
	DocStateParams         *map[string]string `json:"docStateParams,omitempty"`
	DocumentId             *string            `json:"documentId,omitempty"`
	ElementId              *string            `json:"elementId,omitempty"`
	Public                 *bool              `json:"public,omitempty"`
	WorkspaceId            *string            `json:"workspaceId,omitempty"`
}

// NewBTAclParams instantiates a new BTAclParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTAclParams() *BTAclParams {
	this := BTAclParams{}
	return &this
}

// NewBTAclParamsWithDefaults instantiates a new BTAclParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTAclParamsWithDefaults() *BTAclParams {
	this := BTAclParams{}
	return &this
}

// GetAnonymousAccessAllowed returns the AnonymousAccessAllowed field value if set, zero value otherwise.
func (o *BTAclParams) GetAnonymousAccessAllowed() bool {
	if o == nil || o.AnonymousAccessAllowed == nil {
		var ret bool
		return ret
	}
	return *o.AnonymousAccessAllowed
}

// GetAnonymousAccessAllowedOk returns a tuple with the AnonymousAccessAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAclParams) GetAnonymousAccessAllowedOk() (*bool, bool) {
	if o == nil || o.AnonymousAccessAllowed == nil {
		return nil, false
	}
	return o.AnonymousAccessAllowed, true
}

// HasAnonymousAccessAllowed returns a boolean if a field has been set.
func (o *BTAclParams) HasAnonymousAccessAllowed() bool {
	if o != nil && o.AnonymousAccessAllowed != nil {
		return true
	}

	return false
}

// SetAnonymousAccessAllowed gets a reference to the given bool and assigns it to the AnonymousAccessAllowed field.
func (o *BTAclParams) SetAnonymousAccessAllowed(v bool) {
	o.AnonymousAccessAllowed = &v
}

// GetAnonymousAllowsExport returns the AnonymousAllowsExport field value if set, zero value otherwise.
func (o *BTAclParams) GetAnonymousAllowsExport() bool {
	if o == nil || o.AnonymousAllowsExport == nil {
		var ret bool
		return ret
	}
	return *o.AnonymousAllowsExport
}

// GetAnonymousAllowsExportOk returns a tuple with the AnonymousAllowsExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAclParams) GetAnonymousAllowsExportOk() (*bool, bool) {
	if o == nil || o.AnonymousAllowsExport == nil {
		return nil, false
	}
	return o.AnonymousAllowsExport, true
}

// HasAnonymousAllowsExport returns a boolean if a field has been set.
func (o *BTAclParams) HasAnonymousAllowsExport() bool {
	if o != nil && o.AnonymousAllowsExport != nil {
		return true
	}

	return false
}

// SetAnonymousAllowsExport gets a reference to the given bool and assigns it to the AnonymousAllowsExport field.
func (o *BTAclParams) SetAnonymousAllowsExport(v bool) {
	o.AnonymousAllowsExport = &v
}

// GetDocStateParams returns the DocStateParams field value if set, zero value otherwise.
func (o *BTAclParams) GetDocStateParams() map[string]string {
	if o == nil || o.DocStateParams == nil {
		var ret map[string]string
		return ret
	}
	return *o.DocStateParams
}

// GetDocStateParamsOk returns a tuple with the DocStateParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAclParams) GetDocStateParamsOk() (*map[string]string, bool) {
	if o == nil || o.DocStateParams == nil {
		return nil, false
	}
	return o.DocStateParams, true
}

// HasDocStateParams returns a boolean if a field has been set.
func (o *BTAclParams) HasDocStateParams() bool {
	if o != nil && o.DocStateParams != nil {
		return true
	}

	return false
}

// SetDocStateParams gets a reference to the given map[string]string and assigns it to the DocStateParams field.
func (o *BTAclParams) SetDocStateParams(v map[string]string) {
	o.DocStateParams = &v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *BTAclParams) GetDocumentId() string {
	if o == nil || o.DocumentId == nil {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAclParams) GetDocumentIdOk() (*string, bool) {
	if o == nil || o.DocumentId == nil {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *BTAclParams) HasDocumentId() bool {
	if o != nil && o.DocumentId != nil {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *BTAclParams) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *BTAclParams) GetElementId() string {
	if o == nil || o.ElementId == nil {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAclParams) GetElementIdOk() (*string, bool) {
	if o == nil || o.ElementId == nil {
		return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *BTAclParams) HasElementId() bool {
	if o != nil && o.ElementId != nil {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *BTAclParams) SetElementId(v string) {
	o.ElementId = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *BTAclParams) GetPublic() bool {
	if o == nil || o.Public == nil {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAclParams) GetPublicOk() (*bool, bool) {
	if o == nil || o.Public == nil {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *BTAclParams) HasPublic() bool {
	if o != nil && o.Public != nil {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *BTAclParams) SetPublic(v bool) {
	o.Public = &v
}

// GetWorkspaceId returns the WorkspaceId field value if set, zero value otherwise.
func (o *BTAclParams) GetWorkspaceId() string {
	if o == nil || o.WorkspaceId == nil {
		var ret string
		return ret
	}
	return *o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAclParams) GetWorkspaceIdOk() (*string, bool) {
	if o == nil || o.WorkspaceId == nil {
		return nil, false
	}
	return o.WorkspaceId, true
}

// HasWorkspaceId returns a boolean if a field has been set.
func (o *BTAclParams) HasWorkspaceId() bool {
	if o != nil && o.WorkspaceId != nil {
		return true
	}

	return false
}

// SetWorkspaceId gets a reference to the given string and assigns it to the WorkspaceId field.
func (o *BTAclParams) SetWorkspaceId(v string) {
	o.WorkspaceId = &v
}

func (o BTAclParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AnonymousAccessAllowed != nil {
		toSerialize["anonymousAccessAllowed"] = o.AnonymousAccessAllowed
	}
	if o.AnonymousAllowsExport != nil {
		toSerialize["anonymousAllowsExport"] = o.AnonymousAllowsExport
	}
	if o.DocStateParams != nil {
		toSerialize["docStateParams"] = o.DocStateParams
	}
	if o.DocumentId != nil {
		toSerialize["documentId"] = o.DocumentId
	}
	if o.ElementId != nil {
		toSerialize["elementId"] = o.ElementId
	}
	if o.Public != nil {
		toSerialize["public"] = o.Public
	}
	if o.WorkspaceId != nil {
		toSerialize["workspaceId"] = o.WorkspaceId
	}
	return json.Marshal(toSerialize)
}

type NullableBTAclParams struct {
	value *BTAclParams
	isSet bool
}

func (v NullableBTAclParams) Get() *BTAclParams {
	return v.value
}

func (v *NullableBTAclParams) Set(val *BTAclParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBTAclParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBTAclParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTAclParams(val *BTAclParams) *NullableBTAclParams {
	return &NullableBTAclParams{value: val, isSet: true}
}

func (v NullableBTAclParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTAclParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

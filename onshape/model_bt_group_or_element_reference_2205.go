/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTGroupOrElementReference2205 - List of folders or elements in this group (folder).
type BTGroupOrElementReference2205 struct {
	implBTGroupOrElementReference2205 interface{}
}

// BTDocumentElementReference2484AsBTGroupOrElementReference2205 is a convenience function that returns BTDocumentElementReference2484 wrapped in BTGroupOrElementReference2205
func (o *BTDocumentElementReference2484) AsBTGroupOrElementReference2205() *BTGroupOrElementReference2205 {
	return &BTGroupOrElementReference2205{o}
}

// BTElementGroup1458AsBTGroupOrElementReference2205 is a convenience function that returns BTElementGroup1458 wrapped in BTGroupOrElementReference2205
func (o *BTElementGroup1458) AsBTGroupOrElementReference2205() *BTGroupOrElementReference2205 {
	return &BTGroupOrElementReference2205{o}
}

// NewBTGroupOrElementReference2205 instantiates a new BTGroupOrElementReference2205 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTGroupOrElementReference2205() *BTGroupOrElementReference2205 {
	this := BTGroupOrElementReference2205{Newbase_BTGroupOrElementReference2205()}
	return &this
}

// NewBTGroupOrElementReference2205WithDefaults instantiates a new BTGroupOrElementReference2205 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTGroupOrElementReference2205WithDefaults() *BTGroupOrElementReference2205 {
	this := BTGroupOrElementReference2205{Newbase_BTGroupOrElementReference2205WithDefaults()}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTGroupOrElementReference2205) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTGroupOrElementReference2205) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTGroupOrElementReference2205) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTGroupOrElementReference2205) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTGroupOrElementReference2205) GetNodeId() string {
	type getResult interface {
		GetNodeId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeId()
	} else {
		var de string
		return de
	}
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTGroupOrElementReference2205) GetNodeIdOk() (*string, bool) {
	type getResult interface {
		GetNodeIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeIdOk()
	} else {
		return nil, false
	}
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTGroupOrElementReference2205) HasNodeId() bool {
	type getResult interface {
		HasNodeId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNodeId()
	} else {
		return false
	}
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTGroupOrElementReference2205) SetNodeId(v string) {
	type getResult interface {
		SetNodeId(v string)
	}

	o.GetActualInstance().(getResult).SetNodeId(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTGroupOrElementReference2205) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTDocumentElementReference-2484'
	if jsonDict["btType"] == "BTDocumentElementReference-2484" {
		// try to unmarshal JSON data into BTDocumentElementReference2484
		var qr *BTDocumentElementReference2484
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTGroupOrElementReference2205 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTGroupOrElementReference2205 = nil
			return fmt.Errorf("failed to unmarshal BTGroupOrElementReference2205 as BTDocumentElementReference2484: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTElementGroup-1458'
	if jsonDict["btType"] == "BTElementGroup-1458" {
		// try to unmarshal JSON data into BTElementGroup1458
		var qr *BTElementGroup1458
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTGroupOrElementReference2205 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTGroupOrElementReference2205 = nil
			return fmt.Errorf("failed to unmarshal BTGroupOrElementReference2205 as BTElementGroup1458: %s", err.Error())
		}
	}

	var qtx *base_BTGroupOrElementReference2205
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTGroupOrElementReference2205 = qtx
		return nil // data stored in dst.base_BTGroupOrElementReference2205, return on the first match
	} else {
		dst.implBTGroupOrElementReference2205 = nil
		return fmt.Errorf("failed to unmarshal BTGroupOrElementReference2205 as base_BTGroupOrElementReference2205: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTGroupOrElementReference2205) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTGroupOrElementReference2205) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTGroupOrElementReference2205
}

type NullableBTGroupOrElementReference2205 struct {
	value *BTGroupOrElementReference2205
	isSet bool
}

func (v NullableBTGroupOrElementReference2205) Get() *BTGroupOrElementReference2205 {
	return v.value
}

func (v *NullableBTGroupOrElementReference2205) Set(val *BTGroupOrElementReference2205) {
	v.value = val
	v.isSet = true
}

func (v NullableBTGroupOrElementReference2205) IsSet() bool {
	return v.isSet
}

func (v *NullableBTGroupOrElementReference2205) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTGroupOrElementReference2205(val *BTGroupOrElementReference2205) *NullableBTGroupOrElementReference2205 {
	return &NullableBTGroupOrElementReference2205{value: val, isSet: true}
}

func (v NullableBTGroupOrElementReference2205) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTGroupOrElementReference2205) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTGroupOrElementReference2205 struct {
	// Type of JSON object.
	BtType *string `json:"btType,omitempty"`
	NodeId *string `json:"nodeId,omitempty"`
}

// Newbase_BTGroupOrElementReference2205 instantiates a new base_BTGroupOrElementReference2205 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTGroupOrElementReference2205() *base_BTGroupOrElementReference2205 {
	this := base_BTGroupOrElementReference2205{}
	return &this
}

// Newbase_BTGroupOrElementReference2205WithDefaults instantiates a new base_BTGroupOrElementReference2205 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTGroupOrElementReference2205WithDefaults() *base_BTGroupOrElementReference2205 {
	this := base_BTGroupOrElementReference2205{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTGroupOrElementReference2205) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTGroupOrElementReference2205) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTGroupOrElementReference2205) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTGroupOrElementReference2205) SetBtType(v string) {
	o.BtType = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *base_BTGroupOrElementReference2205) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTGroupOrElementReference2205) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *base_BTGroupOrElementReference2205) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *base_BTGroupOrElementReference2205) SetNodeId(v string) {
	o.NodeId = &v
}

func (o base_BTGroupOrElementReference2205) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	return json.Marshal(toSerialize)
}

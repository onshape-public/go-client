/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTAssemblyMateValueInfo Quantities for length are specified in meters, and quantities for angles are specified in radians.
type BTAssemblyMateValueInfo struct {
	// The ID of the assembly mate feature.
	FeatureId *string `json:"featureId,omitempty"`
	JsonType  string  `json:"jsonType"`
	// The name of the assembly mate feature.
	MateName *string `json:"mateName,omitempty"`
}

// NewBTAssemblyMateValueInfo instantiates a new BTAssemblyMateValueInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTAssemblyMateValueInfo(jsonType string) *BTAssemblyMateValueInfo {
	this := BTAssemblyMateValueInfo{}
	this.JsonType = jsonType
	return &this
}

// NewBTAssemblyMateValueInfoWithDefaults instantiates a new BTAssemblyMateValueInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTAssemblyMateValueInfoWithDefaults() *BTAssemblyMateValueInfo {
	this := BTAssemblyMateValueInfo{}
	return &this
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *BTAssemblyMateValueInfo) GetFeatureId() string {
	if o == nil || o.FeatureId == nil {
		var ret string
		return ret
	}
	return *o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyMateValueInfo) GetFeatureIdOk() (*string, bool) {
	if o == nil || o.FeatureId == nil {
		return nil, false
	}
	return o.FeatureId, true
}

// HasFeatureId returns a boolean if a field has been set.
func (o *BTAssemblyMateValueInfo) HasFeatureId() bool {
	if o != nil && o.FeatureId != nil {
		return true
	}

	return false
}

// SetFeatureId gets a reference to the given string and assigns it to the FeatureId field.
func (o *BTAssemblyMateValueInfo) SetFeatureId(v string) {
	o.FeatureId = &v
}

// GetJsonType returns the JsonType field value
func (o *BTAssemblyMateValueInfo) GetJsonType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JsonType
}

// GetJsonTypeOk returns a tuple with the JsonType field value
// and a boolean to check if the value has been set.
func (o *BTAssemblyMateValueInfo) GetJsonTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JsonType, true
}

// SetJsonType sets field value
func (o *BTAssemblyMateValueInfo) SetJsonType(v string) {
	o.JsonType = v
}

// GetMateName returns the MateName field value if set, zero value otherwise.
func (o *BTAssemblyMateValueInfo) GetMateName() string {
	if o == nil || o.MateName == nil {
		var ret string
		return ret
	}
	return *o.MateName
}

// GetMateNameOk returns a tuple with the MateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyMateValueInfo) GetMateNameOk() (*string, bool) {
	if o == nil || o.MateName == nil {
		return nil, false
	}
	return o.MateName, true
}

// HasMateName returns a boolean if a field has been set.
func (o *BTAssemblyMateValueInfo) HasMateName() bool {
	if o != nil && o.MateName != nil {
		return true
	}

	return false
}

// SetMateName gets a reference to the given string and assigns it to the MateName field.
func (o *BTAssemblyMateValueInfo) SetMateName(v string) {
	o.MateName = &v
}

func (o BTAssemblyMateValueInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeatureId != nil {
		toSerialize["featureId"] = o.FeatureId
	}
	if true {
		toSerialize["jsonType"] = o.JsonType
	}
	if o.MateName != nil {
		toSerialize["mateName"] = o.MateName
	}
	return json.Marshal(toSerialize)
}

type NullableBTAssemblyMateValueInfo struct {
	value *BTAssemblyMateValueInfo
	isSet bool
}

func (v NullableBTAssemblyMateValueInfo) Get() *BTAssemblyMateValueInfo {
	return v.value
}

func (v *NullableBTAssemblyMateValueInfo) Set(val *BTAssemblyMateValueInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTAssemblyMateValueInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTAssemblyMateValueInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTAssemblyMateValueInfo(val *BTAssemblyMateValueInfo) *NullableBTAssemblyMateValueInfo {
	return &NullableBTAssemblyMateValueInfo{value: val, isSet: true}
}

func (v NullableBTAssemblyMateValueInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTAssemblyMateValueInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

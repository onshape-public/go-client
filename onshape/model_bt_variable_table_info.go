/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTVariableTableInfo struct for BTVariableTableInfo
type BTVariableTableInfo struct {
	VariableStudioReference *BTVariableStudioReferenceInfo `json:"variableStudioReference,omitempty"`
	// Variables in the VariableTable
	Variables []BTVariableInfo `json:"variables"`
}

// NewBTVariableTableInfo instantiates a new BTVariableTableInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTVariableTableInfo(variables []BTVariableInfo) *BTVariableTableInfo {
	this := BTVariableTableInfo{}
	this.Variables = variables
	return &this
}

// NewBTVariableTableInfoWithDefaults instantiates a new BTVariableTableInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTVariableTableInfoWithDefaults() *BTVariableTableInfo {
	this := BTVariableTableInfo{}
	return &this
}

// GetVariableStudioReference returns the VariableStudioReference field value if set, zero value otherwise.
func (o *BTVariableTableInfo) GetVariableStudioReference() BTVariableStudioReferenceInfo {
	if o == nil || o.VariableStudioReference == nil {
		var ret BTVariableStudioReferenceInfo
		return ret
	}
	return *o.VariableStudioReference
}

// GetVariableStudioReferenceOk returns a tuple with the VariableStudioReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVariableTableInfo) GetVariableStudioReferenceOk() (*BTVariableStudioReferenceInfo, bool) {
	if o == nil || o.VariableStudioReference == nil {
		return nil, false
	}
	return o.VariableStudioReference, true
}

// HasVariableStudioReference returns a boolean if a field has been set.
func (o *BTVariableTableInfo) HasVariableStudioReference() bool {
	if o != nil && o.VariableStudioReference != nil {
		return true
	}

	return false
}

// SetVariableStudioReference gets a reference to the given BTVariableStudioReferenceInfo and assigns it to the VariableStudioReference field.
func (o *BTVariableTableInfo) SetVariableStudioReference(v BTVariableStudioReferenceInfo) {
	o.VariableStudioReference = &v
}

// GetVariables returns the Variables field value
func (o *BTVariableTableInfo) GetVariables() []BTVariableInfo {
	if o == nil {
		var ret []BTVariableInfo
		return ret
	}

	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value
// and a boolean to check if the value has been set.
func (o *BTVariableTableInfo) GetVariablesOk() ([]BTVariableInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Variables, true
}

// SetVariables sets field value
func (o *BTVariableTableInfo) SetVariables(v []BTVariableInfo) {
	o.Variables = v
}

func (o BTVariableTableInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VariableStudioReference != nil {
		toSerialize["variableStudioReference"] = o.VariableStudioReference
	}
	if true {
		toSerialize["variables"] = o.Variables
	}
	return json.Marshal(toSerialize)
}

type NullableBTVariableTableInfo struct {
	value *BTVariableTableInfo
	isSet bool
}

func (v NullableBTVariableTableInfo) Get() *BTVariableTableInfo {
	return v.value
}

func (v *NullableBTVariableTableInfo) Set(val *BTVariableTableInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTVariableTableInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTVariableTableInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTVariableTableInfo(val *BTVariableTableInfo) *NullableBTVariableTableInfo {
	return &NullableBTVariableTableInfo{value: val, isSet: true}
}

func (v NullableBTVariableTableInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTVariableTableInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

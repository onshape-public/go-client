/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTElementMergeInfo struct for BTElementMergeInfo
type BTElementMergeInfo struct {
	BranchPointElementName    *string                 `json:"branchPointElementName,omitempty"`
	BranchPointElementPath    []string                `json:"branchPointElementPath,omitempty"`
	DependentElementMergeInfo *BTElementMergeInfo     `json:"dependentElementMergeInfo,omitempty"`
	ElementDataType           *string                 `json:"elementDataType,omitempty"`
	ElementId                 *string                 `json:"elementId,omitempty"`
	ElementType               *GBTElementType         `json:"elementType,omitempty"`
	Mergeable                 *bool                   `json:"mergeable,omitempty"`
	SourceElementName         *string                 `json:"sourceElementName,omitempty"`
	SourceElementPath         []string                `json:"sourceElementPath,omitempty"`
	SourceElementStatus       *GBTElementBranchStatus `json:"sourceElementStatus,omitempty"`
	SourceLibraryVersion      *int32                  `json:"sourceLibraryVersion,omitempty"`
	SourceModifiedAt          *JSONTime               `json:"sourceModifiedAt,omitempty"`
	SourceModifiedBy          *BTUserBasicSummaryInfo `json:"sourceModifiedBy,omitempty"`
	SourceOutOfDate           *bool                   `json:"sourceOutOfDate,omitempty"`
	TargetElementName         *string                 `json:"targetElementName,omitempty"`
	TargetElementPath         []string                `json:"targetElementPath,omitempty"`
	TargetElementStatus       *GBTElementBranchStatus `json:"targetElementStatus,omitempty"`
	TargetLibraryVersion      *int32                  `json:"targetLibraryVersion,omitempty"`
	TargetModifiedAt          *JSONTime               `json:"targetModifiedAt,omitempty"`
	TargetModifiedBy          *BTUserBasicSummaryInfo `json:"targetModifiedBy,omitempty"`
	TargetOutOfDate           *bool                   `json:"targetOutOfDate,omitempty"`
	VersionCompatible         *bool                   `json:"versionCompatible,omitempty"`
}

// NewBTElementMergeInfo instantiates a new BTElementMergeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTElementMergeInfo() *BTElementMergeInfo {
	this := BTElementMergeInfo{}
	return &this
}

// NewBTElementMergeInfoWithDefaults instantiates a new BTElementMergeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTElementMergeInfoWithDefaults() *BTElementMergeInfo {
	this := BTElementMergeInfo{}
	return &this
}

// GetBranchPointElementName returns the BranchPointElementName field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetBranchPointElementName() string {
	if o == nil || o.BranchPointElementName == nil {
		var ret string
		return ret
	}
	return *o.BranchPointElementName
}

// GetBranchPointElementNameOk returns a tuple with the BranchPointElementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetBranchPointElementNameOk() (*string, bool) {
	if o == nil || o.BranchPointElementName == nil {
		return nil, false
	}
	return o.BranchPointElementName, true
}

// HasBranchPointElementName returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasBranchPointElementName() bool {
	if o != nil && o.BranchPointElementName != nil {
		return true
	}

	return false
}

// SetBranchPointElementName gets a reference to the given string and assigns it to the BranchPointElementName field.
func (o *BTElementMergeInfo) SetBranchPointElementName(v string) {
	o.BranchPointElementName = &v
}

// GetBranchPointElementPath returns the BranchPointElementPath field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetBranchPointElementPath() []string {
	if o == nil || o.BranchPointElementPath == nil {
		var ret []string
		return ret
	}
	return o.BranchPointElementPath
}

// GetBranchPointElementPathOk returns a tuple with the BranchPointElementPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetBranchPointElementPathOk() ([]string, bool) {
	if o == nil || o.BranchPointElementPath == nil {
		return nil, false
	}
	return o.BranchPointElementPath, true
}

// HasBranchPointElementPath returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasBranchPointElementPath() bool {
	if o != nil && o.BranchPointElementPath != nil {
		return true
	}

	return false
}

// SetBranchPointElementPath gets a reference to the given []string and assigns it to the BranchPointElementPath field.
func (o *BTElementMergeInfo) SetBranchPointElementPath(v []string) {
	o.BranchPointElementPath = v
}

// GetDependentElementMergeInfo returns the DependentElementMergeInfo field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetDependentElementMergeInfo() BTElementMergeInfo {
	if o == nil || o.DependentElementMergeInfo == nil {
		var ret BTElementMergeInfo
		return ret
	}
	return *o.DependentElementMergeInfo
}

// GetDependentElementMergeInfoOk returns a tuple with the DependentElementMergeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetDependentElementMergeInfoOk() (*BTElementMergeInfo, bool) {
	if o == nil || o.DependentElementMergeInfo == nil {
		return nil, false
	}
	return o.DependentElementMergeInfo, true
}

// HasDependentElementMergeInfo returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasDependentElementMergeInfo() bool {
	if o != nil && o.DependentElementMergeInfo != nil {
		return true
	}

	return false
}

// SetDependentElementMergeInfo gets a reference to the given BTElementMergeInfo and assigns it to the DependentElementMergeInfo field.
func (o *BTElementMergeInfo) SetDependentElementMergeInfo(v BTElementMergeInfo) {
	o.DependentElementMergeInfo = &v
}

// GetElementDataType returns the ElementDataType field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetElementDataType() string {
	if o == nil || o.ElementDataType == nil {
		var ret string
		return ret
	}
	return *o.ElementDataType
}

// GetElementDataTypeOk returns a tuple with the ElementDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetElementDataTypeOk() (*string, bool) {
	if o == nil || o.ElementDataType == nil {
		return nil, false
	}
	return o.ElementDataType, true
}

// HasElementDataType returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasElementDataType() bool {
	if o != nil && o.ElementDataType != nil {
		return true
	}

	return false
}

// SetElementDataType gets a reference to the given string and assigns it to the ElementDataType field.
func (o *BTElementMergeInfo) SetElementDataType(v string) {
	o.ElementDataType = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetElementId() string {
	if o == nil || o.ElementId == nil {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetElementIdOk() (*string, bool) {
	if o == nil || o.ElementId == nil {
		return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasElementId() bool {
	if o != nil && o.ElementId != nil {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *BTElementMergeInfo) SetElementId(v string) {
	o.ElementId = &v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetElementType() GBTElementType {
	if o == nil || o.ElementType == nil {
		var ret GBTElementType
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetElementTypeOk() (*GBTElementType, bool) {
	if o == nil || o.ElementType == nil {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasElementType() bool {
	if o != nil && o.ElementType != nil {
		return true
	}

	return false
}

// SetElementType gets a reference to the given GBTElementType and assigns it to the ElementType field.
func (o *BTElementMergeInfo) SetElementType(v GBTElementType) {
	o.ElementType = &v
}

// GetMergeable returns the Mergeable field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetMergeable() bool {
	if o == nil || o.Mergeable == nil {
		var ret bool
		return ret
	}
	return *o.Mergeable
}

// GetMergeableOk returns a tuple with the Mergeable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetMergeableOk() (*bool, bool) {
	if o == nil || o.Mergeable == nil {
		return nil, false
	}
	return o.Mergeable, true
}

// HasMergeable returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasMergeable() bool {
	if o != nil && o.Mergeable != nil {
		return true
	}

	return false
}

// SetMergeable gets a reference to the given bool and assigns it to the Mergeable field.
func (o *BTElementMergeInfo) SetMergeable(v bool) {
	o.Mergeable = &v
}

// GetSourceElementName returns the SourceElementName field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetSourceElementName() string {
	if o == nil || o.SourceElementName == nil {
		var ret string
		return ret
	}
	return *o.SourceElementName
}

// GetSourceElementNameOk returns a tuple with the SourceElementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetSourceElementNameOk() (*string, bool) {
	if o == nil || o.SourceElementName == nil {
		return nil, false
	}
	return o.SourceElementName, true
}

// HasSourceElementName returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasSourceElementName() bool {
	if o != nil && o.SourceElementName != nil {
		return true
	}

	return false
}

// SetSourceElementName gets a reference to the given string and assigns it to the SourceElementName field.
func (o *BTElementMergeInfo) SetSourceElementName(v string) {
	o.SourceElementName = &v
}

// GetSourceElementPath returns the SourceElementPath field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetSourceElementPath() []string {
	if o == nil || o.SourceElementPath == nil {
		var ret []string
		return ret
	}
	return o.SourceElementPath
}

// GetSourceElementPathOk returns a tuple with the SourceElementPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetSourceElementPathOk() ([]string, bool) {
	if o == nil || o.SourceElementPath == nil {
		return nil, false
	}
	return o.SourceElementPath, true
}

// HasSourceElementPath returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasSourceElementPath() bool {
	if o != nil && o.SourceElementPath != nil {
		return true
	}

	return false
}

// SetSourceElementPath gets a reference to the given []string and assigns it to the SourceElementPath field.
func (o *BTElementMergeInfo) SetSourceElementPath(v []string) {
	o.SourceElementPath = v
}

// GetSourceElementStatus returns the SourceElementStatus field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetSourceElementStatus() GBTElementBranchStatus {
	if o == nil || o.SourceElementStatus == nil {
		var ret GBTElementBranchStatus
		return ret
	}
	return *o.SourceElementStatus
}

// GetSourceElementStatusOk returns a tuple with the SourceElementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetSourceElementStatusOk() (*GBTElementBranchStatus, bool) {
	if o == nil || o.SourceElementStatus == nil {
		return nil, false
	}
	return o.SourceElementStatus, true
}

// HasSourceElementStatus returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasSourceElementStatus() bool {
	if o != nil && o.SourceElementStatus != nil {
		return true
	}

	return false
}

// SetSourceElementStatus gets a reference to the given GBTElementBranchStatus and assigns it to the SourceElementStatus field.
func (o *BTElementMergeInfo) SetSourceElementStatus(v GBTElementBranchStatus) {
	o.SourceElementStatus = &v
}

// GetSourceLibraryVersion returns the SourceLibraryVersion field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetSourceLibraryVersion() int32 {
	if o == nil || o.SourceLibraryVersion == nil {
		var ret int32
		return ret
	}
	return *o.SourceLibraryVersion
}

// GetSourceLibraryVersionOk returns a tuple with the SourceLibraryVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetSourceLibraryVersionOk() (*int32, bool) {
	if o == nil || o.SourceLibraryVersion == nil {
		return nil, false
	}
	return o.SourceLibraryVersion, true
}

// HasSourceLibraryVersion returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasSourceLibraryVersion() bool {
	if o != nil && o.SourceLibraryVersion != nil {
		return true
	}

	return false
}

// SetSourceLibraryVersion gets a reference to the given int32 and assigns it to the SourceLibraryVersion field.
func (o *BTElementMergeInfo) SetSourceLibraryVersion(v int32) {
	o.SourceLibraryVersion = &v
}

// GetSourceModifiedAt returns the SourceModifiedAt field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetSourceModifiedAt() JSONTime {
	if o == nil || o.SourceModifiedAt == nil {
		var ret JSONTime
		return ret
	}
	return *o.SourceModifiedAt
}

// GetSourceModifiedAtOk returns a tuple with the SourceModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetSourceModifiedAtOk() (*JSONTime, bool) {
	if o == nil || o.SourceModifiedAt == nil {
		return nil, false
	}
	return o.SourceModifiedAt, true
}

// HasSourceModifiedAt returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasSourceModifiedAt() bool {
	if o != nil && o.SourceModifiedAt != nil {
		return true
	}

	return false
}

// SetSourceModifiedAt gets a reference to the given JSONTime and assigns it to the SourceModifiedAt field.
func (o *BTElementMergeInfo) SetSourceModifiedAt(v JSONTime) {
	o.SourceModifiedAt = &v
}

// GetSourceModifiedBy returns the SourceModifiedBy field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetSourceModifiedBy() BTUserBasicSummaryInfo {
	if o == nil || o.SourceModifiedBy == nil {
		var ret BTUserBasicSummaryInfo
		return ret
	}
	return *o.SourceModifiedBy
}

// GetSourceModifiedByOk returns a tuple with the SourceModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetSourceModifiedByOk() (*BTUserBasicSummaryInfo, bool) {
	if o == nil || o.SourceModifiedBy == nil {
		return nil, false
	}
	return o.SourceModifiedBy, true
}

// HasSourceModifiedBy returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasSourceModifiedBy() bool {
	if o != nil && o.SourceModifiedBy != nil {
		return true
	}

	return false
}

// SetSourceModifiedBy gets a reference to the given BTUserBasicSummaryInfo and assigns it to the SourceModifiedBy field.
func (o *BTElementMergeInfo) SetSourceModifiedBy(v BTUserBasicSummaryInfo) {
	o.SourceModifiedBy = &v
}

// GetSourceOutOfDate returns the SourceOutOfDate field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetSourceOutOfDate() bool {
	if o == nil || o.SourceOutOfDate == nil {
		var ret bool
		return ret
	}
	return *o.SourceOutOfDate
}

// GetSourceOutOfDateOk returns a tuple with the SourceOutOfDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetSourceOutOfDateOk() (*bool, bool) {
	if o == nil || o.SourceOutOfDate == nil {
		return nil, false
	}
	return o.SourceOutOfDate, true
}

// HasSourceOutOfDate returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasSourceOutOfDate() bool {
	if o != nil && o.SourceOutOfDate != nil {
		return true
	}

	return false
}

// SetSourceOutOfDate gets a reference to the given bool and assigns it to the SourceOutOfDate field.
func (o *BTElementMergeInfo) SetSourceOutOfDate(v bool) {
	o.SourceOutOfDate = &v
}

// GetTargetElementName returns the TargetElementName field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetTargetElementName() string {
	if o == nil || o.TargetElementName == nil {
		var ret string
		return ret
	}
	return *o.TargetElementName
}

// GetTargetElementNameOk returns a tuple with the TargetElementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetTargetElementNameOk() (*string, bool) {
	if o == nil || o.TargetElementName == nil {
		return nil, false
	}
	return o.TargetElementName, true
}

// HasTargetElementName returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasTargetElementName() bool {
	if o != nil && o.TargetElementName != nil {
		return true
	}

	return false
}

// SetTargetElementName gets a reference to the given string and assigns it to the TargetElementName field.
func (o *BTElementMergeInfo) SetTargetElementName(v string) {
	o.TargetElementName = &v
}

// GetTargetElementPath returns the TargetElementPath field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetTargetElementPath() []string {
	if o == nil || o.TargetElementPath == nil {
		var ret []string
		return ret
	}
	return o.TargetElementPath
}

// GetTargetElementPathOk returns a tuple with the TargetElementPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetTargetElementPathOk() ([]string, bool) {
	if o == nil || o.TargetElementPath == nil {
		return nil, false
	}
	return o.TargetElementPath, true
}

// HasTargetElementPath returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasTargetElementPath() bool {
	if o != nil && o.TargetElementPath != nil {
		return true
	}

	return false
}

// SetTargetElementPath gets a reference to the given []string and assigns it to the TargetElementPath field.
func (o *BTElementMergeInfo) SetTargetElementPath(v []string) {
	o.TargetElementPath = v
}

// GetTargetElementStatus returns the TargetElementStatus field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetTargetElementStatus() GBTElementBranchStatus {
	if o == nil || o.TargetElementStatus == nil {
		var ret GBTElementBranchStatus
		return ret
	}
	return *o.TargetElementStatus
}

// GetTargetElementStatusOk returns a tuple with the TargetElementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetTargetElementStatusOk() (*GBTElementBranchStatus, bool) {
	if o == nil || o.TargetElementStatus == nil {
		return nil, false
	}
	return o.TargetElementStatus, true
}

// HasTargetElementStatus returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasTargetElementStatus() bool {
	if o != nil && o.TargetElementStatus != nil {
		return true
	}

	return false
}

// SetTargetElementStatus gets a reference to the given GBTElementBranchStatus and assigns it to the TargetElementStatus field.
func (o *BTElementMergeInfo) SetTargetElementStatus(v GBTElementBranchStatus) {
	o.TargetElementStatus = &v
}

// GetTargetLibraryVersion returns the TargetLibraryVersion field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetTargetLibraryVersion() int32 {
	if o == nil || o.TargetLibraryVersion == nil {
		var ret int32
		return ret
	}
	return *o.TargetLibraryVersion
}

// GetTargetLibraryVersionOk returns a tuple with the TargetLibraryVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetTargetLibraryVersionOk() (*int32, bool) {
	if o == nil || o.TargetLibraryVersion == nil {
		return nil, false
	}
	return o.TargetLibraryVersion, true
}

// HasTargetLibraryVersion returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasTargetLibraryVersion() bool {
	if o != nil && o.TargetLibraryVersion != nil {
		return true
	}

	return false
}

// SetTargetLibraryVersion gets a reference to the given int32 and assigns it to the TargetLibraryVersion field.
func (o *BTElementMergeInfo) SetTargetLibraryVersion(v int32) {
	o.TargetLibraryVersion = &v
}

// GetTargetModifiedAt returns the TargetModifiedAt field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetTargetModifiedAt() JSONTime {
	if o == nil || o.TargetModifiedAt == nil {
		var ret JSONTime
		return ret
	}
	return *o.TargetModifiedAt
}

// GetTargetModifiedAtOk returns a tuple with the TargetModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetTargetModifiedAtOk() (*JSONTime, bool) {
	if o == nil || o.TargetModifiedAt == nil {
		return nil, false
	}
	return o.TargetModifiedAt, true
}

// HasTargetModifiedAt returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasTargetModifiedAt() bool {
	if o != nil && o.TargetModifiedAt != nil {
		return true
	}

	return false
}

// SetTargetModifiedAt gets a reference to the given JSONTime and assigns it to the TargetModifiedAt field.
func (o *BTElementMergeInfo) SetTargetModifiedAt(v JSONTime) {
	o.TargetModifiedAt = &v
}

// GetTargetModifiedBy returns the TargetModifiedBy field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetTargetModifiedBy() BTUserBasicSummaryInfo {
	if o == nil || o.TargetModifiedBy == nil {
		var ret BTUserBasicSummaryInfo
		return ret
	}
	return *o.TargetModifiedBy
}

// GetTargetModifiedByOk returns a tuple with the TargetModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetTargetModifiedByOk() (*BTUserBasicSummaryInfo, bool) {
	if o == nil || o.TargetModifiedBy == nil {
		return nil, false
	}
	return o.TargetModifiedBy, true
}

// HasTargetModifiedBy returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasTargetModifiedBy() bool {
	if o != nil && o.TargetModifiedBy != nil {
		return true
	}

	return false
}

// SetTargetModifiedBy gets a reference to the given BTUserBasicSummaryInfo and assigns it to the TargetModifiedBy field.
func (o *BTElementMergeInfo) SetTargetModifiedBy(v BTUserBasicSummaryInfo) {
	o.TargetModifiedBy = &v
}

// GetTargetOutOfDate returns the TargetOutOfDate field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetTargetOutOfDate() bool {
	if o == nil || o.TargetOutOfDate == nil {
		var ret bool
		return ret
	}
	return *o.TargetOutOfDate
}

// GetTargetOutOfDateOk returns a tuple with the TargetOutOfDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetTargetOutOfDateOk() (*bool, bool) {
	if o == nil || o.TargetOutOfDate == nil {
		return nil, false
	}
	return o.TargetOutOfDate, true
}

// HasTargetOutOfDate returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasTargetOutOfDate() bool {
	if o != nil && o.TargetOutOfDate != nil {
		return true
	}

	return false
}

// SetTargetOutOfDate gets a reference to the given bool and assigns it to the TargetOutOfDate field.
func (o *BTElementMergeInfo) SetTargetOutOfDate(v bool) {
	o.TargetOutOfDate = &v
}

// GetVersionCompatible returns the VersionCompatible field value if set, zero value otherwise.
func (o *BTElementMergeInfo) GetVersionCompatible() bool {
	if o == nil || o.VersionCompatible == nil {
		var ret bool
		return ret
	}
	return *o.VersionCompatible
}

// GetVersionCompatibleOk returns a tuple with the VersionCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementMergeInfo) GetVersionCompatibleOk() (*bool, bool) {
	if o == nil || o.VersionCompatible == nil {
		return nil, false
	}
	return o.VersionCompatible, true
}

// HasVersionCompatible returns a boolean if a field has been set.
func (o *BTElementMergeInfo) HasVersionCompatible() bool {
	if o != nil && o.VersionCompatible != nil {
		return true
	}

	return false
}

// SetVersionCompatible gets a reference to the given bool and assigns it to the VersionCompatible field.
func (o *BTElementMergeInfo) SetVersionCompatible(v bool) {
	o.VersionCompatible = &v
}

func (o BTElementMergeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BranchPointElementName != nil {
		toSerialize["branchPointElementName"] = o.BranchPointElementName
	}
	if o.BranchPointElementPath != nil {
		toSerialize["branchPointElementPath"] = o.BranchPointElementPath
	}
	if o.DependentElementMergeInfo != nil {
		toSerialize["dependentElementMergeInfo"] = o.DependentElementMergeInfo
	}
	if o.ElementDataType != nil {
		toSerialize["elementDataType"] = o.ElementDataType
	}
	if o.ElementId != nil {
		toSerialize["elementId"] = o.ElementId
	}
	if o.ElementType != nil {
		toSerialize["elementType"] = o.ElementType
	}
	if o.Mergeable != nil {
		toSerialize["mergeable"] = o.Mergeable
	}
	if o.SourceElementName != nil {
		toSerialize["sourceElementName"] = o.SourceElementName
	}
	if o.SourceElementPath != nil {
		toSerialize["sourceElementPath"] = o.SourceElementPath
	}
	if o.SourceElementStatus != nil {
		toSerialize["sourceElementStatus"] = o.SourceElementStatus
	}
	if o.SourceLibraryVersion != nil {
		toSerialize["sourceLibraryVersion"] = o.SourceLibraryVersion
	}
	if o.SourceModifiedAt != nil {
		toSerialize["sourceModifiedAt"] = o.SourceModifiedAt
	}
	if o.SourceModifiedBy != nil {
		toSerialize["sourceModifiedBy"] = o.SourceModifiedBy
	}
	if o.SourceOutOfDate != nil {
		toSerialize["sourceOutOfDate"] = o.SourceOutOfDate
	}
	if o.TargetElementName != nil {
		toSerialize["targetElementName"] = o.TargetElementName
	}
	if o.TargetElementPath != nil {
		toSerialize["targetElementPath"] = o.TargetElementPath
	}
	if o.TargetElementStatus != nil {
		toSerialize["targetElementStatus"] = o.TargetElementStatus
	}
	if o.TargetLibraryVersion != nil {
		toSerialize["targetLibraryVersion"] = o.TargetLibraryVersion
	}
	if o.TargetModifiedAt != nil {
		toSerialize["targetModifiedAt"] = o.TargetModifiedAt
	}
	if o.TargetModifiedBy != nil {
		toSerialize["targetModifiedBy"] = o.TargetModifiedBy
	}
	if o.TargetOutOfDate != nil {
		toSerialize["targetOutOfDate"] = o.TargetOutOfDate
	}
	if o.VersionCompatible != nil {
		toSerialize["versionCompatible"] = o.VersionCompatible
	}
	return json.Marshal(toSerialize)
}

type NullableBTElementMergeInfo struct {
	value *BTElementMergeInfo
	isSet bool
}

func (v NullableBTElementMergeInfo) Get() *BTElementMergeInfo {
	return v.value
}

func (v *NullableBTElementMergeInfo) Set(val *BTElementMergeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTElementMergeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTElementMergeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTElementMergeInfo(val *BTElementMergeInfo) *NullableBTElementMergeInfo {
	return &NullableBTElementMergeInfo{value: val, isSet: true}
}

func (v NullableBTElementMergeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTElementMergeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

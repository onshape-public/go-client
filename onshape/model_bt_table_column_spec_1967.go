/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTTableColumnSpec1967 struct for BTTableColumnSpec1967
type BTTableColumnSpec1967 struct {
	BtType                  *string                   `json:"btType,omitempty"`
	DefaultCellSpec         *BTParameterSpec6         `json:"defaultCellSpec,omitempty"`
	DefaultColumnWidthUnits *GBTTableColumnWidthUnits `json:"defaultColumnWidthUnits,omitempty"`
	DefaultColumnWidthValue *int32                    `json:"defaultColumnWidthValue,omitempty"`
	DefaultHeaderName       *string                   `json:"defaultHeaderName,omitempty"`
	DefaultTextAlignment    *GBTTableTextAlignment    `json:"defaultTextAlignment,omitempty"`
	ReadOnly                *bool                     `json:"readOnly,omitempty"`
}

// NewBTTableColumnSpec1967 instantiates a new BTTableColumnSpec1967 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTTableColumnSpec1967() *BTTableColumnSpec1967 {
	this := BTTableColumnSpec1967{}
	return &this
}

// NewBTTableColumnSpec1967WithDefaults instantiates a new BTTableColumnSpec1967 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTTableColumnSpec1967WithDefaults() *BTTableColumnSpec1967 {
	this := BTTableColumnSpec1967{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTTableColumnSpec1967) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableColumnSpec1967) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTTableColumnSpec1967) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTTableColumnSpec1967) SetBtType(v string) {
	o.BtType = &v
}

// GetDefaultCellSpec returns the DefaultCellSpec field value if set, zero value otherwise.
func (o *BTTableColumnSpec1967) GetDefaultCellSpec() BTParameterSpec6 {
	if o == nil || o.DefaultCellSpec == nil {
		var ret BTParameterSpec6
		return ret
	}
	return *o.DefaultCellSpec
}

// GetDefaultCellSpecOk returns a tuple with the DefaultCellSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableColumnSpec1967) GetDefaultCellSpecOk() (*BTParameterSpec6, bool) {
	if o == nil || o.DefaultCellSpec == nil {
		return nil, false
	}
	return o.DefaultCellSpec, true
}

// HasDefaultCellSpec returns a boolean if a field has been set.
func (o *BTTableColumnSpec1967) HasDefaultCellSpec() bool {
	if o != nil && o.DefaultCellSpec != nil {
		return true
	}

	return false
}

// SetDefaultCellSpec gets a reference to the given BTParameterSpec6 and assigns it to the DefaultCellSpec field.
func (o *BTTableColumnSpec1967) SetDefaultCellSpec(v BTParameterSpec6) {
	o.DefaultCellSpec = &v
}

// GetDefaultColumnWidthUnits returns the DefaultColumnWidthUnits field value if set, zero value otherwise.
func (o *BTTableColumnSpec1967) GetDefaultColumnWidthUnits() GBTTableColumnWidthUnits {
	if o == nil || o.DefaultColumnWidthUnits == nil {
		var ret GBTTableColumnWidthUnits
		return ret
	}
	return *o.DefaultColumnWidthUnits
}

// GetDefaultColumnWidthUnitsOk returns a tuple with the DefaultColumnWidthUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableColumnSpec1967) GetDefaultColumnWidthUnitsOk() (*GBTTableColumnWidthUnits, bool) {
	if o == nil || o.DefaultColumnWidthUnits == nil {
		return nil, false
	}
	return o.DefaultColumnWidthUnits, true
}

// HasDefaultColumnWidthUnits returns a boolean if a field has been set.
func (o *BTTableColumnSpec1967) HasDefaultColumnWidthUnits() bool {
	if o != nil && o.DefaultColumnWidthUnits != nil {
		return true
	}

	return false
}

// SetDefaultColumnWidthUnits gets a reference to the given GBTTableColumnWidthUnits and assigns it to the DefaultColumnWidthUnits field.
func (o *BTTableColumnSpec1967) SetDefaultColumnWidthUnits(v GBTTableColumnWidthUnits) {
	o.DefaultColumnWidthUnits = &v
}

// GetDefaultColumnWidthValue returns the DefaultColumnWidthValue field value if set, zero value otherwise.
func (o *BTTableColumnSpec1967) GetDefaultColumnWidthValue() int32 {
	if o == nil || o.DefaultColumnWidthValue == nil {
		var ret int32
		return ret
	}
	return *o.DefaultColumnWidthValue
}

// GetDefaultColumnWidthValueOk returns a tuple with the DefaultColumnWidthValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableColumnSpec1967) GetDefaultColumnWidthValueOk() (*int32, bool) {
	if o == nil || o.DefaultColumnWidthValue == nil {
		return nil, false
	}
	return o.DefaultColumnWidthValue, true
}

// HasDefaultColumnWidthValue returns a boolean if a field has been set.
func (o *BTTableColumnSpec1967) HasDefaultColumnWidthValue() bool {
	if o != nil && o.DefaultColumnWidthValue != nil {
		return true
	}

	return false
}

// SetDefaultColumnWidthValue gets a reference to the given int32 and assigns it to the DefaultColumnWidthValue field.
func (o *BTTableColumnSpec1967) SetDefaultColumnWidthValue(v int32) {
	o.DefaultColumnWidthValue = &v
}

// GetDefaultHeaderName returns the DefaultHeaderName field value if set, zero value otherwise.
func (o *BTTableColumnSpec1967) GetDefaultHeaderName() string {
	if o == nil || o.DefaultHeaderName == nil {
		var ret string
		return ret
	}
	return *o.DefaultHeaderName
}

// GetDefaultHeaderNameOk returns a tuple with the DefaultHeaderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableColumnSpec1967) GetDefaultHeaderNameOk() (*string, bool) {
	if o == nil || o.DefaultHeaderName == nil {
		return nil, false
	}
	return o.DefaultHeaderName, true
}

// HasDefaultHeaderName returns a boolean if a field has been set.
func (o *BTTableColumnSpec1967) HasDefaultHeaderName() bool {
	if o != nil && o.DefaultHeaderName != nil {
		return true
	}

	return false
}

// SetDefaultHeaderName gets a reference to the given string and assigns it to the DefaultHeaderName field.
func (o *BTTableColumnSpec1967) SetDefaultHeaderName(v string) {
	o.DefaultHeaderName = &v
}

// GetDefaultTextAlignment returns the DefaultTextAlignment field value if set, zero value otherwise.
func (o *BTTableColumnSpec1967) GetDefaultTextAlignment() GBTTableTextAlignment {
	if o == nil || o.DefaultTextAlignment == nil {
		var ret GBTTableTextAlignment
		return ret
	}
	return *o.DefaultTextAlignment
}

// GetDefaultTextAlignmentOk returns a tuple with the DefaultTextAlignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableColumnSpec1967) GetDefaultTextAlignmentOk() (*GBTTableTextAlignment, bool) {
	if o == nil || o.DefaultTextAlignment == nil {
		return nil, false
	}
	return o.DefaultTextAlignment, true
}

// HasDefaultTextAlignment returns a boolean if a field has been set.
func (o *BTTableColumnSpec1967) HasDefaultTextAlignment() bool {
	if o != nil && o.DefaultTextAlignment != nil {
		return true
	}

	return false
}

// SetDefaultTextAlignment gets a reference to the given GBTTableTextAlignment and assigns it to the DefaultTextAlignment field.
func (o *BTTableColumnSpec1967) SetDefaultTextAlignment(v GBTTableTextAlignment) {
	o.DefaultTextAlignment = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *BTTableColumnSpec1967) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableColumnSpec1967) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *BTTableColumnSpec1967) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *BTTableColumnSpec1967) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o BTTableColumnSpec1967) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.DefaultCellSpec != nil {
		toSerialize["defaultCellSpec"] = o.DefaultCellSpec
	}
	if o.DefaultColumnWidthUnits != nil {
		toSerialize["defaultColumnWidthUnits"] = o.DefaultColumnWidthUnits
	}
	if o.DefaultColumnWidthValue != nil {
		toSerialize["defaultColumnWidthValue"] = o.DefaultColumnWidthValue
	}
	if o.DefaultHeaderName != nil {
		toSerialize["defaultHeaderName"] = o.DefaultHeaderName
	}
	if o.DefaultTextAlignment != nil {
		toSerialize["defaultTextAlignment"] = o.DefaultTextAlignment
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	return json.Marshal(toSerialize)
}

type NullableBTTableColumnSpec1967 struct {
	value *BTTableColumnSpec1967
	isSet bool
}

func (v NullableBTTableColumnSpec1967) Get() *BTTableColumnSpec1967 {
	return v.value
}

func (v *NullableBTTableColumnSpec1967) Set(val *BTTableColumnSpec1967) {
	v.value = val
	v.isSet = true
}

func (v NullableBTTableColumnSpec1967) IsSet() bool {
	return v.isSet
}

func (v *NullableBTTableColumnSpec1967) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTTableColumnSpec1967(val *BTTableColumnSpec1967) *NullableBTTableColumnSpec1967 {
	return &NullableBTTableColumnSpec1967{value: val, isSet: true}
}

func (v NullableBTTableColumnSpec1967) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTTableColumnSpec1967) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Onshape REST API

The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.

API version: 1.171.24257-687de06de652
Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTEntityFace31 - struct for BTEntityFace31
type BTEntityFace31 struct {
	implBTEntityFace31 interface{}
}

// BTSimulationFace2147AsBTEntityFace31 is a convenience function that returns BTSimulationFace2147 wrapped in BTEntityFace31
func (o *BTSimulationFace2147) AsBTEntityFace31() *BTEntityFace31 {
	return &BTEntityFace31{o}
}

// NewBTEntityFace31 instantiates a new BTEntityFace31 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTEntityFace31() *BTEntityFace31 {
	this := BTEntityFace31{Newbase_BTEntityFace31()}
	return &this
}

// NewBTEntityFace31WithDefaults instantiates a new BTEntityFace31 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTEntityFace31WithDefaults() *BTEntityFace31 {
	this := BTEntityFace31{Newbase_BTEntityFace31WithDefaults()}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTEntityFace31) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTEntityFace31) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTEntityFace31) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetCompressed returns the Compressed field value if set, zero value otherwise.
func (o *BTEntityFace31) GetCompressed() bool {
	type getResult interface {
		GetCompressed() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCompressed()
	} else {
		var de bool
		return de
	}
}

// GetCompressedOk returns a tuple with the Compressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetCompressedOk() (*bool, bool) {
	type getResult interface {
		GetCompressedOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCompressedOk()
	} else {
		return nil, false
	}
}

// HasCompressed returns a boolean if a field has been set.
func (o *BTEntityFace31) HasCompressed() bool {
	type getResult interface {
		HasCompressed() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasCompressed()
	} else {
		return false
	}
}

// SetCompressed gets a reference to the given bool and assigns it to the Compressed field.
func (o *BTEntityFace31) SetCompressed(v bool) {
	type getResult interface {
		SetCompressed(v bool)
	}

	o.GetActualInstance().(getResult).SetCompressed(v)
}

// GetDecompressed returns the Decompressed field value if set, zero value otherwise.
func (o *BTEntityFace31) GetDecompressed() BTEntityGeometry35 {
	type getResult interface {
		GetDecompressed() BTEntityGeometry35
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDecompressed()
	} else {
		var de BTEntityGeometry35
		return de
	}
}

// GetDecompressedOk returns a tuple with the Decompressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetDecompressedOk() (*BTEntityGeometry35, bool) {
	type getResult interface {
		GetDecompressedOk() (*BTEntityGeometry35, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDecompressedOk()
	} else {
		return nil, false
	}
}

// HasDecompressed returns a boolean if a field has been set.
func (o *BTEntityFace31) HasDecompressed() bool {
	type getResult interface {
		HasDecompressed() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDecompressed()
	} else {
		return false
	}
}

// SetDecompressed gets a reference to the given BTEntityGeometry35 and assigns it to the Decompressed field.
func (o *BTEntityFace31) SetDecompressed(v BTEntityGeometry35) {
	type getResult interface {
		SetDecompressed(v BTEntityGeometry35)
	}

	o.GetActualInstance().(getResult).SetDecompressed(v)
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *BTEntityFace31) GetErrorCode() int32 {
	type getResult interface {
		GetErrorCode() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetErrorCode()
	} else {
		var de int32
		return de
	}
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetErrorCodeOk() (*int32, bool) {
	type getResult interface {
		GetErrorCodeOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetErrorCodeOk()
	} else {
		return nil, false
	}
}

// HasErrorCode returns a boolean if a field has been set.
func (o *BTEntityFace31) HasErrorCode() bool {
	type getResult interface {
		HasErrorCode() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasErrorCode()
	} else {
		return false
	}
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *BTEntityFace31) SetErrorCode(v int32) {
	type getResult interface {
		SetErrorCode(v int32)
	}

	o.GetActualInstance().(getResult).SetErrorCode(v)
}

// GetEstimatedMemoryUsageInBytes returns the EstimatedMemoryUsageInBytes field value if set, zero value otherwise.
func (o *BTEntityFace31) GetEstimatedMemoryUsageInBytes() int32 {
	type getResult interface {
		GetEstimatedMemoryUsageInBytes() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEstimatedMemoryUsageInBytes()
	} else {
		var de int32
		return de
	}
}

// GetEstimatedMemoryUsageInBytesOk returns a tuple with the EstimatedMemoryUsageInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetEstimatedMemoryUsageInBytesOk() (*int32, bool) {
	type getResult interface {
		GetEstimatedMemoryUsageInBytesOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEstimatedMemoryUsageInBytesOk()
	} else {
		return nil, false
	}
}

// HasEstimatedMemoryUsageInBytes returns a boolean if a field has been set.
func (o *BTEntityFace31) HasEstimatedMemoryUsageInBytes() bool {
	type getResult interface {
		HasEstimatedMemoryUsageInBytes() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEstimatedMemoryUsageInBytes()
	} else {
		return false
	}
}

// SetEstimatedMemoryUsageInBytes gets a reference to the given int32 and assigns it to the EstimatedMemoryUsageInBytes field.
func (o *BTEntityFace31) SetEstimatedMemoryUsageInBytes(v int32) {
	type getResult interface {
		SetEstimatedMemoryUsageInBytes(v int32)
	}

	o.GetActualInstance().(getResult).SetEstimatedMemoryUsageInBytes(v)
}

// GetFace returns the Face field value if set, zero value otherwise.
func (o *BTEntityFace31) GetFace() bool {
	type getResult interface {
		GetFace() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFace()
	} else {
		var de bool
		return de
	}
}

// GetFaceOk returns a tuple with the Face field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetFaceOk() (*bool, bool) {
	type getResult interface {
		GetFaceOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFaceOk()
	} else {
		return nil, false
	}
}

// HasFace returns a boolean if a field has been set.
func (o *BTEntityFace31) HasFace() bool {
	type getResult interface {
		HasFace() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFace()
	} else {
		return false
	}
}

// SetFace gets a reference to the given bool and assigns it to the Face field.
func (o *BTEntityFace31) SetFace(v bool) {
	type getResult interface {
		SetFace(v bool)
	}

	o.GetActualInstance().(getResult).SetFace(v)
}

// GetHasTessellationError returns the HasTessellationError field value if set, zero value otherwise.
func (o *BTEntityFace31) GetHasTessellationError() bool {
	type getResult interface {
		GetHasTessellationError() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetHasTessellationError()
	} else {
		var de bool
		return de
	}
}

// GetHasTessellationErrorOk returns a tuple with the HasTessellationError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetHasTessellationErrorOk() (*bool, bool) {
	type getResult interface {
		GetHasTessellationErrorOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetHasTessellationErrorOk()
	} else {
		return nil, false
	}
}

// HasHasTessellationError returns a boolean if a field has been set.
func (o *BTEntityFace31) HasHasTessellationError() bool {
	type getResult interface {
		HasHasTessellationError() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasHasTessellationError()
	} else {
		return false
	}
}

// SetHasTessellationError gets a reference to the given bool and assigns it to the HasTessellationError field.
func (o *BTEntityFace31) SetHasTessellationError(v bool) {
	type getResult interface {
		SetHasTessellationError(v bool)
	}

	o.GetActualInstance().(getResult).SetHasTessellationError(v)
}

// GetSettingIndex returns the SettingIndex field value if set, zero value otherwise.
func (o *BTEntityFace31) GetSettingIndex() int32 {
	type getResult interface {
		GetSettingIndex() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSettingIndex()
	} else {
		var de int32
		return de
	}
}

// GetSettingIndexOk returns a tuple with the SettingIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetSettingIndexOk() (*int32, bool) {
	type getResult interface {
		GetSettingIndexOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSettingIndexOk()
	} else {
		return nil, false
	}
}

// HasSettingIndex returns a boolean if a field has been set.
func (o *BTEntityFace31) HasSettingIndex() bool {
	type getResult interface {
		HasSettingIndex() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSettingIndex()
	} else {
		return false
	}
}

// SetSettingIndex gets a reference to the given int32 and assigns it to the SettingIndex field.
func (o *BTEntityFace31) SetSettingIndex(v int32) {
	type getResult interface {
		SetSettingIndex(v int32)
	}

	o.GetActualInstance().(getResult).SetSettingIndex(v)
}

// GetCompressedUvs returns the CompressedUvs field value if set, zero value otherwise.
func (o *BTEntityFace31) GetCompressedUvs() BTImmutableByteArray {
	type getResult interface {
		GetCompressedUvs() BTImmutableByteArray
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCompressedUvs()
	} else {
		var de BTImmutableByteArray
		return de
	}
}

// GetCompressedUvsOk returns a tuple with the CompressedUvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetCompressedUvsOk() (*BTImmutableByteArray, bool) {
	type getResult interface {
		GetCompressedUvsOk() (*BTImmutableByteArray, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCompressedUvsOk()
	} else {
		return nil, false
	}
}

// HasCompressedUvs returns a boolean if a field has been set.
func (o *BTEntityFace31) HasCompressedUvs() bool {
	type getResult interface {
		HasCompressedUvs() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasCompressedUvs()
	} else {
		return false
	}
}

// SetCompressedUvs gets a reference to the given BTImmutableByteArray and assigns it to the CompressedUvs field.
func (o *BTEntityFace31) SetCompressedUvs(v BTImmutableByteArray) {
	type getResult interface {
		SetCompressedUvs(v BTImmutableByteArray)
	}

	o.GetActualInstance().(getResult).SetCompressedUvs(v)
}

// GetFlipComputedNormals returns the FlipComputedNormals field value if set, zero value otherwise.
func (o *BTEntityFace31) GetFlipComputedNormals() bool {
	type getResult interface {
		GetFlipComputedNormals() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFlipComputedNormals()
	} else {
		var de bool
		return de
	}
}

// GetFlipComputedNormalsOk returns a tuple with the FlipComputedNormals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetFlipComputedNormalsOk() (*bool, bool) {
	type getResult interface {
		GetFlipComputedNormalsOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFlipComputedNormalsOk()
	} else {
		return nil, false
	}
}

// HasFlipComputedNormals returns a boolean if a field has been set.
func (o *BTEntityFace31) HasFlipComputedNormals() bool {
	type getResult interface {
		HasFlipComputedNormals() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFlipComputedNormals()
	} else {
		return false
	}
}

// SetFlipComputedNormals gets a reference to the given bool and assigns it to the FlipComputedNormals field.
func (o *BTEntityFace31) SetFlipComputedNormals(v bool) {
	type getResult interface {
		SetFlipComputedNormals(v bool)
	}

	o.GetActualInstance().(getResult).SetFlipComputedNormals(v)
}

// GetIndices returns the Indices field value if set, zero value otherwise.
func (o *BTEntityFace31) GetIndices() BTImmutableIntArray {
	type getResult interface {
		GetIndices() BTImmutableIntArray
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIndices()
	} else {
		var de BTImmutableIntArray
		return de
	}
}

// GetIndicesOk returns a tuple with the Indices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetIndicesOk() (*BTImmutableIntArray, bool) {
	type getResult interface {
		GetIndicesOk() (*BTImmutableIntArray, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIndicesOk()
	} else {
		return nil, false
	}
}

// HasIndices returns a boolean if a field has been set.
func (o *BTEntityFace31) HasIndices() bool {
	type getResult interface {
		HasIndices() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIndices()
	} else {
		return false
	}
}

// SetIndices gets a reference to the given BTImmutableIntArray and assigns it to the Indices field.
func (o *BTEntityFace31) SetIndices(v BTImmutableIntArray) {
	type getResult interface {
		SetIndices(v BTImmutableIntArray)
	}

	o.GetActualInstance().(getResult).SetIndices(v)
}

// GetIndicesStoredAsDifferences returns the IndicesStoredAsDifferences field value if set, zero value otherwise.
func (o *BTEntityFace31) GetIndicesStoredAsDifferences() bool {
	type getResult interface {
		GetIndicesStoredAsDifferences() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIndicesStoredAsDifferences()
	} else {
		var de bool
		return de
	}
}

// GetIndicesStoredAsDifferencesOk returns a tuple with the IndicesStoredAsDifferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetIndicesStoredAsDifferencesOk() (*bool, bool) {
	type getResult interface {
		GetIndicesStoredAsDifferencesOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIndicesStoredAsDifferencesOk()
	} else {
		return nil, false
	}
}

// HasIndicesStoredAsDifferences returns a boolean if a field has been set.
func (o *BTEntityFace31) HasIndicesStoredAsDifferences() bool {
	type getResult interface {
		HasIndicesStoredAsDifferences() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIndicesStoredAsDifferences()
	} else {
		return false
	}
}

// SetIndicesStoredAsDifferences gets a reference to the given bool and assigns it to the IndicesStoredAsDifferences field.
func (o *BTEntityFace31) SetIndicesStoredAsDifferences(v bool) {
	type getResult interface {
		SetIndicesStoredAsDifferences(v bool)
	}

	o.GetActualInstance().(getResult).SetIndicesStoredAsDifferences(v)
}

// GetIsPlanar returns the IsPlanar field value if set, zero value otherwise.
func (o *BTEntityFace31) GetIsPlanar() bool {
	type getResult interface {
		GetIsPlanar() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsPlanar()
	} else {
		var de bool
		return de
	}
}

// GetIsPlanarOk returns a tuple with the IsPlanar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetIsPlanarOk() (*bool, bool) {
	type getResult interface {
		GetIsPlanarOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsPlanarOk()
	} else {
		return nil, false
	}
}

// HasIsPlanar returns a boolean if a field has been set.
func (o *BTEntityFace31) HasIsPlanar() bool {
	type getResult interface {
		HasIsPlanar() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsPlanar()
	} else {
		return false
	}
}

// SetIsPlanar gets a reference to the given bool and assigns it to the IsPlanar field.
func (o *BTEntityFace31) SetIsPlanar(v bool) {
	type getResult interface {
		SetIsPlanar(v bool)
	}

	o.GetActualInstance().(getResult).SetIsPlanar(v)
}

// GetMaxPrincipleCurvatureMagnitudes returns the MaxPrincipleCurvatureMagnitudes field value if set, zero value otherwise.
func (o *BTEntityFace31) GetMaxPrincipleCurvatureMagnitudes() BTImmutableFloatArray {
	type getResult interface {
		GetMaxPrincipleCurvatureMagnitudes() BTImmutableFloatArray
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetMaxPrincipleCurvatureMagnitudes()
	} else {
		var de BTImmutableFloatArray
		return de
	}
}

// GetMaxPrincipleCurvatureMagnitudesOk returns a tuple with the MaxPrincipleCurvatureMagnitudes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetMaxPrincipleCurvatureMagnitudesOk() (*BTImmutableFloatArray, bool) {
	type getResult interface {
		GetMaxPrincipleCurvatureMagnitudesOk() (*BTImmutableFloatArray, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetMaxPrincipleCurvatureMagnitudesOk()
	} else {
		return nil, false
	}
}

// HasMaxPrincipleCurvatureMagnitudes returns a boolean if a field has been set.
func (o *BTEntityFace31) HasMaxPrincipleCurvatureMagnitudes() bool {
	type getResult interface {
		HasMaxPrincipleCurvatureMagnitudes() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasMaxPrincipleCurvatureMagnitudes()
	} else {
		return false
	}
}

// SetMaxPrincipleCurvatureMagnitudes gets a reference to the given BTImmutableFloatArray and assigns it to the MaxPrincipleCurvatureMagnitudes field.
func (o *BTEntityFace31) SetMaxPrincipleCurvatureMagnitudes(v BTImmutableFloatArray) {
	type getResult interface {
		SetMaxPrincipleCurvatureMagnitudes(v BTImmutableFloatArray)
	}

	o.GetActualInstance().(getResult).SetMaxPrincipleCurvatureMagnitudes(v)
}

// GetMinPrincipleCurvatureMagnitudes returns the MinPrincipleCurvatureMagnitudes field value if set, zero value otherwise.
func (o *BTEntityFace31) GetMinPrincipleCurvatureMagnitudes() BTImmutableFloatArray {
	type getResult interface {
		GetMinPrincipleCurvatureMagnitudes() BTImmutableFloatArray
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetMinPrincipleCurvatureMagnitudes()
	} else {
		var de BTImmutableFloatArray
		return de
	}
}

// GetMinPrincipleCurvatureMagnitudesOk returns a tuple with the MinPrincipleCurvatureMagnitudes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetMinPrincipleCurvatureMagnitudesOk() (*BTImmutableFloatArray, bool) {
	type getResult interface {
		GetMinPrincipleCurvatureMagnitudesOk() (*BTImmutableFloatArray, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetMinPrincipleCurvatureMagnitudesOk()
	} else {
		return nil, false
	}
}

// HasMinPrincipleCurvatureMagnitudes returns a boolean if a field has been set.
func (o *BTEntityFace31) HasMinPrincipleCurvatureMagnitudes() bool {
	type getResult interface {
		HasMinPrincipleCurvatureMagnitudes() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasMinPrincipleCurvatureMagnitudes()
	} else {
		return false
	}
}

// SetMinPrincipleCurvatureMagnitudes gets a reference to the given BTImmutableFloatArray and assigns it to the MinPrincipleCurvatureMagnitudes field.
func (o *BTEntityFace31) SetMinPrincipleCurvatureMagnitudes(v BTImmutableFloatArray) {
	type getResult interface {
		SetMinPrincipleCurvatureMagnitudes(v BTImmutableFloatArray)
	}

	o.GetActualInstance().(getResult).SetMinPrincipleCurvatureMagnitudes(v)
}

// GetNormals returns the Normals field value if set, zero value otherwise.
func (o *BTEntityFace31) GetNormals() BTImmutableFloatArray {
	type getResult interface {
		GetNormals() BTImmutableFloatArray
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNormals()
	} else {
		var de BTImmutableFloatArray
		return de
	}
}

// GetNormalsOk returns a tuple with the Normals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetNormalsOk() (*BTImmutableFloatArray, bool) {
	type getResult interface {
		GetNormalsOk() (*BTImmutableFloatArray, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNormalsOk()
	} else {
		return nil, false
	}
}

// HasNormals returns a boolean if a field has been set.
func (o *BTEntityFace31) HasNormals() bool {
	type getResult interface {
		HasNormals() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNormals()
	} else {
		return false
	}
}

// SetNormals gets a reference to the given BTImmutableFloatArray and assigns it to the Normals field.
func (o *BTEntityFace31) SetNormals(v BTImmutableFloatArray) {
	type getResult interface {
		SetNormals(v BTImmutableFloatArray)
	}

	o.GetActualInstance().(getResult).SetNormals(v)
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *BTEntityFace31) GetPoints() BTImmutableFloatArray {
	type getResult interface {
		GetPoints() BTImmutableFloatArray
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetPoints()
	} else {
		var de BTImmutableFloatArray
		return de
	}
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetPointsOk() (*BTImmutableFloatArray, bool) {
	type getResult interface {
		GetPointsOk() (*BTImmutableFloatArray, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetPointsOk()
	} else {
		return nil, false
	}
}

// HasPoints returns a boolean if a field has been set.
func (o *BTEntityFace31) HasPoints() bool {
	type getResult interface {
		HasPoints() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasPoints()
	} else {
		return false
	}
}

// SetPoints gets a reference to the given BTImmutableFloatArray and assigns it to the Points field.
func (o *BTEntityFace31) SetPoints(v BTImmutableFloatArray) {
	type getResult interface {
		SetPoints(v BTImmutableFloatArray)
	}

	o.GetActualInstance().(getResult).SetPoints(v)
}

// GetSurfaceParameters returns the SurfaceParameters field value if set, zero value otherwise.
func (o *BTEntityFace31) GetSurfaceParameters() BTImmutableDoubleArray {
	type getResult interface {
		GetSurfaceParameters() BTImmutableDoubleArray
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSurfaceParameters()
	} else {
		var de BTImmutableDoubleArray
		return de
	}
}

// GetSurfaceParametersOk returns a tuple with the SurfaceParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetSurfaceParametersOk() (*BTImmutableDoubleArray, bool) {
	type getResult interface {
		GetSurfaceParametersOk() (*BTImmutableDoubleArray, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSurfaceParametersOk()
	} else {
		return nil, false
	}
}

// HasSurfaceParameters returns a boolean if a field has been set.
func (o *BTEntityFace31) HasSurfaceParameters() bool {
	type getResult interface {
		HasSurfaceParameters() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSurfaceParameters()
	} else {
		return false
	}
}

// SetSurfaceParameters gets a reference to the given BTImmutableDoubleArray and assigns it to the SurfaceParameters field.
func (o *BTEntityFace31) SetSurfaceParameters(v BTImmutableDoubleArray) {
	type getResult interface {
		SetSurfaceParameters(v BTImmutableDoubleArray)
	}

	o.GetActualInstance().(getResult).SetSurfaceParameters(v)
}

// GetSurfaceType returns the SurfaceType field value if set, zero value otherwise.
func (o *BTEntityFace31) GetSurfaceType() GBTSurfaceType {
	type getResult interface {
		GetSurfaceType() GBTSurfaceType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSurfaceType()
	} else {
		var de GBTSurfaceType
		return de
	}
}

// GetSurfaceTypeOk returns a tuple with the SurfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetSurfaceTypeOk() (*GBTSurfaceType, bool) {
	type getResult interface {
		GetSurfaceTypeOk() (*GBTSurfaceType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSurfaceTypeOk()
	} else {
		return nil, false
	}
}

// HasSurfaceType returns a boolean if a field has been set.
func (o *BTEntityFace31) HasSurfaceType() bool {
	type getResult interface {
		HasSurfaceType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSurfaceType()
	} else {
		return false
	}
}

// SetSurfaceType gets a reference to the given GBTSurfaceType and assigns it to the SurfaceType field.
func (o *BTEntityFace31) SetSurfaceType(v GBTSurfaceType) {
	type getResult interface {
		SetSurfaceType(v GBTSurfaceType)
	}

	o.GetActualInstance().(getResult).SetSurfaceType(v)
}

// GetTextureCoordinates returns the TextureCoordinates field value if set, zero value otherwise.
func (o *BTEntityFace31) GetTextureCoordinates() BTImmutableFloatArray {
	type getResult interface {
		GetTextureCoordinates() BTImmutableFloatArray
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetTextureCoordinates()
	} else {
		var de BTImmutableFloatArray
		return de
	}
}

// GetTextureCoordinatesOk returns a tuple with the TextureCoordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetTextureCoordinatesOk() (*BTImmutableFloatArray, bool) {
	type getResult interface {
		GetTextureCoordinatesOk() (*BTImmutableFloatArray, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetTextureCoordinatesOk()
	} else {
		return nil, false
	}
}

// HasTextureCoordinates returns a boolean if a field has been set.
func (o *BTEntityFace31) HasTextureCoordinates() bool {
	type getResult interface {
		HasTextureCoordinates() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasTextureCoordinates()
	} else {
		return false
	}
}

// SetTextureCoordinates gets a reference to the given BTImmutableFloatArray and assigns it to the TextureCoordinates field.
func (o *BTEntityFace31) SetTextureCoordinates(v BTImmutableFloatArray) {
	type getResult interface {
		SetTextureCoordinates(v BTImmutableFloatArray)
	}

	o.GetActualInstance().(getResult).SetTextureCoordinates(v)
}

// GetTriangleCount returns the TriangleCount field value if set, zero value otherwise.
func (o *BTEntityFace31) GetTriangleCount() int32 {
	type getResult interface {
		GetTriangleCount() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetTriangleCount()
	} else {
		var de int32
		return de
	}
}

// GetTriangleCountOk returns a tuple with the TriangleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTEntityFace31) GetTriangleCountOk() (*int32, bool) {
	type getResult interface {
		GetTriangleCountOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetTriangleCountOk()
	} else {
		return nil, false
	}
}

// HasTriangleCount returns a boolean if a field has been set.
func (o *BTEntityFace31) HasTriangleCount() bool {
	type getResult interface {
		HasTriangleCount() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasTriangleCount()
	} else {
		return false
	}
}

// SetTriangleCount gets a reference to the given int32 and assigns it to the TriangleCount field.
func (o *BTEntityFace31) SetTriangleCount(v int32) {
	type getResult interface {
		SetTriangleCount(v int32)
	}

	o.GetActualInstance().(getResult).SetTriangleCount(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTEntityFace31) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'BTSimulationFace-2147'
	if jsonDict["btType"] == "BTSimulationFace-2147" {
		// try to unmarshal JSON data into BTSimulationFace2147
		var qr *BTSimulationFace2147
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTEntityFace31 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTEntityFace31 = nil
			return fmt.Errorf("Failed to unmarshal BTEntityFace31 as BTSimulationFace2147: %s", err.Error())
		}
	}

	var qtx *base_BTEntityFace31
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTEntityFace31 = qtx
		return nil // data stored in dst.base_BTEntityFace31, return on the first match
	} else {
		dst.implBTEntityFace31 = nil
		return fmt.Errorf("Failed to unmarshal BTEntityFace31 as base_BTEntityFace31: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTEntityFace31) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTEntityFace31) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTEntityFace31
}

type NullableBTEntityFace31 struct {
	value *BTEntityFace31
	isSet bool
}

func (v NullableBTEntityFace31) Get() *BTEntityFace31 {
	return v.value
}

func (v *NullableBTEntityFace31) Set(val *BTEntityFace31) {
	v.value = val
	v.isSet = true
}

func (v NullableBTEntityFace31) IsSet() bool {
	return v.isSet
}

func (v *NullableBTEntityFace31) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTEntityFace31(val *BTEntityFace31) *NullableBTEntityFace31 {
	return &NullableBTEntityFace31{value: val, isSet: true}
}

func (v NullableBTEntityFace31) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTEntityFace31) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTEntityFace31 struct {
	BtType                          *string                 `json:"btType,omitempty"`
	Compressed                      *bool                   `json:"compressed,omitempty"`
	Decompressed                    *BTEntityGeometry35     `json:"decompressed,omitempty"`
	ErrorCode                       *int32                  `json:"errorCode,omitempty"`
	EstimatedMemoryUsageInBytes     *int32                  `json:"estimatedMemoryUsageInBytes,omitempty"`
	Face                            *bool                   `json:"face,omitempty"`
	HasTessellationError            *bool                   `json:"hasTessellationError,omitempty"`
	SettingIndex                    *int32                  `json:"settingIndex,omitempty"`
	CompressedUvs                   *BTImmutableByteArray   `json:"compressedUvs,omitempty"`
	FlipComputedNormals             *bool                   `json:"flipComputedNormals,omitempty"`
	Indices                         *BTImmutableIntArray    `json:"indices,omitempty"`
	IndicesStoredAsDifferences      *bool                   `json:"indicesStoredAsDifferences,omitempty"`
	IsPlanar                        *bool                   `json:"isPlanar,omitempty"`
	MaxPrincipleCurvatureMagnitudes *BTImmutableFloatArray  `json:"maxPrincipleCurvatureMagnitudes,omitempty"`
	MinPrincipleCurvatureMagnitudes *BTImmutableFloatArray  `json:"minPrincipleCurvatureMagnitudes,omitempty"`
	Normals                         *BTImmutableFloatArray  `json:"normals,omitempty"`
	Points                          *BTImmutableFloatArray  `json:"points,omitempty"`
	SurfaceParameters               *BTImmutableDoubleArray `json:"surfaceParameters,omitempty"`
	SurfaceType                     *GBTSurfaceType         `json:"surfaceType,omitempty"`
	TextureCoordinates              *BTImmutableFloatArray  `json:"textureCoordinates,omitempty"`
	TriangleCount                   *int32                  `json:"triangleCount,omitempty"`
}

// Newbase_BTEntityFace31 instantiates a new base_BTEntityFace31 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTEntityFace31() *base_BTEntityFace31 {
	this := base_BTEntityFace31{}
	return &this
}

// Newbase_BTEntityFace31WithDefaults instantiates a new base_BTEntityFace31 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTEntityFace31WithDefaults() *base_BTEntityFace31 {
	this := base_BTEntityFace31{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTEntityFace31) SetBtType(v string) {
	o.BtType = &v
}

// GetCompressed returns the Compressed field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetCompressed() bool {
	if o == nil || o.Compressed == nil {
		var ret bool
		return ret
	}
	return *o.Compressed
}

// GetCompressedOk returns a tuple with the Compressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetCompressedOk() (*bool, bool) {
	if o == nil || o.Compressed == nil {
		return nil, false
	}
	return o.Compressed, true
}

// HasCompressed returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasCompressed() bool {
	if o != nil && o.Compressed != nil {
		return true
	}

	return false
}

// SetCompressed gets a reference to the given bool and assigns it to the Compressed field.
func (o *base_BTEntityFace31) SetCompressed(v bool) {
	o.Compressed = &v
}

// GetDecompressed returns the Decompressed field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetDecompressed() BTEntityGeometry35 {
	if o == nil || o.Decompressed == nil {
		var ret BTEntityGeometry35
		return ret
	}
	return *o.Decompressed
}

// GetDecompressedOk returns a tuple with the Decompressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetDecompressedOk() (*BTEntityGeometry35, bool) {
	if o == nil || o.Decompressed == nil {
		return nil, false
	}
	return o.Decompressed, true
}

// HasDecompressed returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasDecompressed() bool {
	if o != nil && o.Decompressed != nil {
		return true
	}

	return false
}

// SetDecompressed gets a reference to the given BTEntityGeometry35 and assigns it to the Decompressed field.
func (o *base_BTEntityFace31) SetDecompressed(v BTEntityGeometry35) {
	o.Decompressed = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetErrorCode() int32 {
	if o == nil || o.ErrorCode == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetErrorCodeOk() (*int32, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *base_BTEntityFace31) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetEstimatedMemoryUsageInBytes returns the EstimatedMemoryUsageInBytes field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetEstimatedMemoryUsageInBytes() int32 {
	if o == nil || o.EstimatedMemoryUsageInBytes == nil {
		var ret int32
		return ret
	}
	return *o.EstimatedMemoryUsageInBytes
}

// GetEstimatedMemoryUsageInBytesOk returns a tuple with the EstimatedMemoryUsageInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetEstimatedMemoryUsageInBytesOk() (*int32, bool) {
	if o == nil || o.EstimatedMemoryUsageInBytes == nil {
		return nil, false
	}
	return o.EstimatedMemoryUsageInBytes, true
}

// HasEstimatedMemoryUsageInBytes returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasEstimatedMemoryUsageInBytes() bool {
	if o != nil && o.EstimatedMemoryUsageInBytes != nil {
		return true
	}

	return false
}

// SetEstimatedMemoryUsageInBytes gets a reference to the given int32 and assigns it to the EstimatedMemoryUsageInBytes field.
func (o *base_BTEntityFace31) SetEstimatedMemoryUsageInBytes(v int32) {
	o.EstimatedMemoryUsageInBytes = &v
}

// GetFace returns the Face field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetFace() bool {
	if o == nil || o.Face == nil {
		var ret bool
		return ret
	}
	return *o.Face
}

// GetFaceOk returns a tuple with the Face field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetFaceOk() (*bool, bool) {
	if o == nil || o.Face == nil {
		return nil, false
	}
	return o.Face, true
}

// HasFace returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasFace() bool {
	if o != nil && o.Face != nil {
		return true
	}

	return false
}

// SetFace gets a reference to the given bool and assigns it to the Face field.
func (o *base_BTEntityFace31) SetFace(v bool) {
	o.Face = &v
}

// GetHasTessellationError returns the HasTessellationError field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetHasTessellationError() bool {
	if o == nil || o.HasTessellationError == nil {
		var ret bool
		return ret
	}
	return *o.HasTessellationError
}

// GetHasTessellationErrorOk returns a tuple with the HasTessellationError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetHasTessellationErrorOk() (*bool, bool) {
	if o == nil || o.HasTessellationError == nil {
		return nil, false
	}
	return o.HasTessellationError, true
}

// HasHasTessellationError returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasHasTessellationError() bool {
	if o != nil && o.HasTessellationError != nil {
		return true
	}

	return false
}

// SetHasTessellationError gets a reference to the given bool and assigns it to the HasTessellationError field.
func (o *base_BTEntityFace31) SetHasTessellationError(v bool) {
	o.HasTessellationError = &v
}

// GetSettingIndex returns the SettingIndex field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetSettingIndex() int32 {
	if o == nil || o.SettingIndex == nil {
		var ret int32
		return ret
	}
	return *o.SettingIndex
}

// GetSettingIndexOk returns a tuple with the SettingIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetSettingIndexOk() (*int32, bool) {
	if o == nil || o.SettingIndex == nil {
		return nil, false
	}
	return o.SettingIndex, true
}

// HasSettingIndex returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasSettingIndex() bool {
	if o != nil && o.SettingIndex != nil {
		return true
	}

	return false
}

// SetSettingIndex gets a reference to the given int32 and assigns it to the SettingIndex field.
func (o *base_BTEntityFace31) SetSettingIndex(v int32) {
	o.SettingIndex = &v
}

// GetCompressedUvs returns the CompressedUvs field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetCompressedUvs() BTImmutableByteArray {
	if o == nil || o.CompressedUvs == nil {
		var ret BTImmutableByteArray
		return ret
	}
	return *o.CompressedUvs
}

// GetCompressedUvsOk returns a tuple with the CompressedUvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetCompressedUvsOk() (*BTImmutableByteArray, bool) {
	if o == nil || o.CompressedUvs == nil {
		return nil, false
	}
	return o.CompressedUvs, true
}

// HasCompressedUvs returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasCompressedUvs() bool {
	if o != nil && o.CompressedUvs != nil {
		return true
	}

	return false
}

// SetCompressedUvs gets a reference to the given BTImmutableByteArray and assigns it to the CompressedUvs field.
func (o *base_BTEntityFace31) SetCompressedUvs(v BTImmutableByteArray) {
	o.CompressedUvs = &v
}

// GetFlipComputedNormals returns the FlipComputedNormals field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetFlipComputedNormals() bool {
	if o == nil || o.FlipComputedNormals == nil {
		var ret bool
		return ret
	}
	return *o.FlipComputedNormals
}

// GetFlipComputedNormalsOk returns a tuple with the FlipComputedNormals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetFlipComputedNormalsOk() (*bool, bool) {
	if o == nil || o.FlipComputedNormals == nil {
		return nil, false
	}
	return o.FlipComputedNormals, true
}

// HasFlipComputedNormals returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasFlipComputedNormals() bool {
	if o != nil && o.FlipComputedNormals != nil {
		return true
	}

	return false
}

// SetFlipComputedNormals gets a reference to the given bool and assigns it to the FlipComputedNormals field.
func (o *base_BTEntityFace31) SetFlipComputedNormals(v bool) {
	o.FlipComputedNormals = &v
}

// GetIndices returns the Indices field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetIndices() BTImmutableIntArray {
	if o == nil || o.Indices == nil {
		var ret BTImmutableIntArray
		return ret
	}
	return *o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetIndicesOk() (*BTImmutableIntArray, bool) {
	if o == nil || o.Indices == nil {
		return nil, false
	}
	return o.Indices, true
}

// HasIndices returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasIndices() bool {
	if o != nil && o.Indices != nil {
		return true
	}

	return false
}

// SetIndices gets a reference to the given BTImmutableIntArray and assigns it to the Indices field.
func (o *base_BTEntityFace31) SetIndices(v BTImmutableIntArray) {
	o.Indices = &v
}

// GetIndicesStoredAsDifferences returns the IndicesStoredAsDifferences field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetIndicesStoredAsDifferences() bool {
	if o == nil || o.IndicesStoredAsDifferences == nil {
		var ret bool
		return ret
	}
	return *o.IndicesStoredAsDifferences
}

// GetIndicesStoredAsDifferencesOk returns a tuple with the IndicesStoredAsDifferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetIndicesStoredAsDifferencesOk() (*bool, bool) {
	if o == nil || o.IndicesStoredAsDifferences == nil {
		return nil, false
	}
	return o.IndicesStoredAsDifferences, true
}

// HasIndicesStoredAsDifferences returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasIndicesStoredAsDifferences() bool {
	if o != nil && o.IndicesStoredAsDifferences != nil {
		return true
	}

	return false
}

// SetIndicesStoredAsDifferences gets a reference to the given bool and assigns it to the IndicesStoredAsDifferences field.
func (o *base_BTEntityFace31) SetIndicesStoredAsDifferences(v bool) {
	o.IndicesStoredAsDifferences = &v
}

// GetIsPlanar returns the IsPlanar field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetIsPlanar() bool {
	if o == nil || o.IsPlanar == nil {
		var ret bool
		return ret
	}
	return *o.IsPlanar
}

// GetIsPlanarOk returns a tuple with the IsPlanar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetIsPlanarOk() (*bool, bool) {
	if o == nil || o.IsPlanar == nil {
		return nil, false
	}
	return o.IsPlanar, true
}

// HasIsPlanar returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasIsPlanar() bool {
	if o != nil && o.IsPlanar != nil {
		return true
	}

	return false
}

// SetIsPlanar gets a reference to the given bool and assigns it to the IsPlanar field.
func (o *base_BTEntityFace31) SetIsPlanar(v bool) {
	o.IsPlanar = &v
}

// GetMaxPrincipleCurvatureMagnitudes returns the MaxPrincipleCurvatureMagnitudes field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetMaxPrincipleCurvatureMagnitudes() BTImmutableFloatArray {
	if o == nil || o.MaxPrincipleCurvatureMagnitudes == nil {
		var ret BTImmutableFloatArray
		return ret
	}
	return *o.MaxPrincipleCurvatureMagnitudes
}

// GetMaxPrincipleCurvatureMagnitudesOk returns a tuple with the MaxPrincipleCurvatureMagnitudes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetMaxPrincipleCurvatureMagnitudesOk() (*BTImmutableFloatArray, bool) {
	if o == nil || o.MaxPrincipleCurvatureMagnitudes == nil {
		return nil, false
	}
	return o.MaxPrincipleCurvatureMagnitudes, true
}

// HasMaxPrincipleCurvatureMagnitudes returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasMaxPrincipleCurvatureMagnitudes() bool {
	if o != nil && o.MaxPrincipleCurvatureMagnitudes != nil {
		return true
	}

	return false
}

// SetMaxPrincipleCurvatureMagnitudes gets a reference to the given BTImmutableFloatArray and assigns it to the MaxPrincipleCurvatureMagnitudes field.
func (o *base_BTEntityFace31) SetMaxPrincipleCurvatureMagnitudes(v BTImmutableFloatArray) {
	o.MaxPrincipleCurvatureMagnitudes = &v
}

// GetMinPrincipleCurvatureMagnitudes returns the MinPrincipleCurvatureMagnitudes field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetMinPrincipleCurvatureMagnitudes() BTImmutableFloatArray {
	if o == nil || o.MinPrincipleCurvatureMagnitudes == nil {
		var ret BTImmutableFloatArray
		return ret
	}
	return *o.MinPrincipleCurvatureMagnitudes
}

// GetMinPrincipleCurvatureMagnitudesOk returns a tuple with the MinPrincipleCurvatureMagnitudes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetMinPrincipleCurvatureMagnitudesOk() (*BTImmutableFloatArray, bool) {
	if o == nil || o.MinPrincipleCurvatureMagnitudes == nil {
		return nil, false
	}
	return o.MinPrincipleCurvatureMagnitudes, true
}

// HasMinPrincipleCurvatureMagnitudes returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasMinPrincipleCurvatureMagnitudes() bool {
	if o != nil && o.MinPrincipleCurvatureMagnitudes != nil {
		return true
	}

	return false
}

// SetMinPrincipleCurvatureMagnitudes gets a reference to the given BTImmutableFloatArray and assigns it to the MinPrincipleCurvatureMagnitudes field.
func (o *base_BTEntityFace31) SetMinPrincipleCurvatureMagnitudes(v BTImmutableFloatArray) {
	o.MinPrincipleCurvatureMagnitudes = &v
}

// GetNormals returns the Normals field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetNormals() BTImmutableFloatArray {
	if o == nil || o.Normals == nil {
		var ret BTImmutableFloatArray
		return ret
	}
	return *o.Normals
}

// GetNormalsOk returns a tuple with the Normals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetNormalsOk() (*BTImmutableFloatArray, bool) {
	if o == nil || o.Normals == nil {
		return nil, false
	}
	return o.Normals, true
}

// HasNormals returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasNormals() bool {
	if o != nil && o.Normals != nil {
		return true
	}

	return false
}

// SetNormals gets a reference to the given BTImmutableFloatArray and assigns it to the Normals field.
func (o *base_BTEntityFace31) SetNormals(v BTImmutableFloatArray) {
	o.Normals = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetPoints() BTImmutableFloatArray {
	if o == nil || o.Points == nil {
		var ret BTImmutableFloatArray
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetPointsOk() (*BTImmutableFloatArray, bool) {
	if o == nil || o.Points == nil {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasPoints() bool {
	if o != nil && o.Points != nil {
		return true
	}

	return false
}

// SetPoints gets a reference to the given BTImmutableFloatArray and assigns it to the Points field.
func (o *base_BTEntityFace31) SetPoints(v BTImmutableFloatArray) {
	o.Points = &v
}

// GetSurfaceParameters returns the SurfaceParameters field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetSurfaceParameters() BTImmutableDoubleArray {
	if o == nil || o.SurfaceParameters == nil {
		var ret BTImmutableDoubleArray
		return ret
	}
	return *o.SurfaceParameters
}

// GetSurfaceParametersOk returns a tuple with the SurfaceParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetSurfaceParametersOk() (*BTImmutableDoubleArray, bool) {
	if o == nil || o.SurfaceParameters == nil {
		return nil, false
	}
	return o.SurfaceParameters, true
}

// HasSurfaceParameters returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasSurfaceParameters() bool {
	if o != nil && o.SurfaceParameters != nil {
		return true
	}

	return false
}

// SetSurfaceParameters gets a reference to the given BTImmutableDoubleArray and assigns it to the SurfaceParameters field.
func (o *base_BTEntityFace31) SetSurfaceParameters(v BTImmutableDoubleArray) {
	o.SurfaceParameters = &v
}

// GetSurfaceType returns the SurfaceType field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetSurfaceType() GBTSurfaceType {
	if o == nil || o.SurfaceType == nil {
		var ret GBTSurfaceType
		return ret
	}
	return *o.SurfaceType
}

// GetSurfaceTypeOk returns a tuple with the SurfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetSurfaceTypeOk() (*GBTSurfaceType, bool) {
	if o == nil || o.SurfaceType == nil {
		return nil, false
	}
	return o.SurfaceType, true
}

// HasSurfaceType returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasSurfaceType() bool {
	if o != nil && o.SurfaceType != nil {
		return true
	}

	return false
}

// SetSurfaceType gets a reference to the given GBTSurfaceType and assigns it to the SurfaceType field.
func (o *base_BTEntityFace31) SetSurfaceType(v GBTSurfaceType) {
	o.SurfaceType = &v
}

// GetTextureCoordinates returns the TextureCoordinates field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetTextureCoordinates() BTImmutableFloatArray {
	if o == nil || o.TextureCoordinates == nil {
		var ret BTImmutableFloatArray
		return ret
	}
	return *o.TextureCoordinates
}

// GetTextureCoordinatesOk returns a tuple with the TextureCoordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetTextureCoordinatesOk() (*BTImmutableFloatArray, bool) {
	if o == nil || o.TextureCoordinates == nil {
		return nil, false
	}
	return o.TextureCoordinates, true
}

// HasTextureCoordinates returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasTextureCoordinates() bool {
	if o != nil && o.TextureCoordinates != nil {
		return true
	}

	return false
}

// SetTextureCoordinates gets a reference to the given BTImmutableFloatArray and assigns it to the TextureCoordinates field.
func (o *base_BTEntityFace31) SetTextureCoordinates(v BTImmutableFloatArray) {
	o.TextureCoordinates = &v
}

// GetTriangleCount returns the TriangleCount field value if set, zero value otherwise.
func (o *base_BTEntityFace31) GetTriangleCount() int32 {
	if o == nil || o.TriangleCount == nil {
		var ret int32
		return ret
	}
	return *o.TriangleCount
}

// GetTriangleCountOk returns a tuple with the TriangleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTEntityFace31) GetTriangleCountOk() (*int32, bool) {
	if o == nil || o.TriangleCount == nil {
		return nil, false
	}
	return o.TriangleCount, true
}

// HasTriangleCount returns a boolean if a field has been set.
func (o *base_BTEntityFace31) HasTriangleCount() bool {
	if o != nil && o.TriangleCount != nil {
		return true
	}

	return false
}

// SetTriangleCount gets a reference to the given int32 and assigns it to the TriangleCount field.
func (o *base_BTEntityFace31) SetTriangleCount(v int32) {
	o.TriangleCount = &v
}

func (o base_BTEntityFace31) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Compressed != nil {
		toSerialize["compressed"] = o.Compressed
	}
	if o.Decompressed != nil {
		toSerialize["decompressed"] = o.Decompressed
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.EstimatedMemoryUsageInBytes != nil {
		toSerialize["estimatedMemoryUsageInBytes"] = o.EstimatedMemoryUsageInBytes
	}
	if o.Face != nil {
		toSerialize["face"] = o.Face
	}
	if o.HasTessellationError != nil {
		toSerialize["hasTessellationError"] = o.HasTessellationError
	}
	if o.SettingIndex != nil {
		toSerialize["settingIndex"] = o.SettingIndex
	}
	if o.CompressedUvs != nil {
		toSerialize["compressedUvs"] = o.CompressedUvs
	}
	if o.FlipComputedNormals != nil {
		toSerialize["flipComputedNormals"] = o.FlipComputedNormals
	}
	if o.Indices != nil {
		toSerialize["indices"] = o.Indices
	}
	if o.IndicesStoredAsDifferences != nil {
		toSerialize["indicesStoredAsDifferences"] = o.IndicesStoredAsDifferences
	}
	if o.IsPlanar != nil {
		toSerialize["isPlanar"] = o.IsPlanar
	}
	if o.MaxPrincipleCurvatureMagnitudes != nil {
		toSerialize["maxPrincipleCurvatureMagnitudes"] = o.MaxPrincipleCurvatureMagnitudes
	}
	if o.MinPrincipleCurvatureMagnitudes != nil {
		toSerialize["minPrincipleCurvatureMagnitudes"] = o.MinPrincipleCurvatureMagnitudes
	}
	if o.Normals != nil {
		toSerialize["normals"] = o.Normals
	}
	if o.Points != nil {
		toSerialize["points"] = o.Points
	}
	if o.SurfaceParameters != nil {
		toSerialize["surfaceParameters"] = o.SurfaceParameters
	}
	if o.SurfaceType != nil {
		toSerialize["surfaceType"] = o.SurfaceType
	}
	if o.TextureCoordinates != nil {
		toSerialize["textureCoordinates"] = o.TextureCoordinates
	}
	if o.TriangleCount != nil {
		toSerialize["triangleCount"] = o.TriangleCount
	}
	return json.Marshal(toSerialize)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTNodeWithReference struct for BTNodeWithReference
type BTNodeWithReference struct {
	Configuration          []BTMParameter1                             `json:"configuration,omitempty"`
	DocumentId             *string                                     `json:"documentId,omitempty"`
	ElementId              *string                                     `json:"elementId,omitempty"`
	MicroversionId         *BTMicroversionId366                        `json:"microversionId,omitempty"`
	NodeId                 *string                                     `json:"nodeId,omitempty"`
	ReferenceParameter     *BTMParameterReferenceWithConfiguration3028 `json:"referenceParameter,omitempty"`
	ValidRevisionReference *bool                                       `json:"validRevisionReference,omitempty"`
	VersionId              *string                                     `json:"versionId,omitempty"`
}

// NewBTNodeWithReference instantiates a new BTNodeWithReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTNodeWithReference() *BTNodeWithReference {
	this := BTNodeWithReference{}
	return &this
}

// NewBTNodeWithReferenceWithDefaults instantiates a new BTNodeWithReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTNodeWithReferenceWithDefaults() *BTNodeWithReference {
	this := BTNodeWithReference{}
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *BTNodeWithReference) GetConfiguration() []BTMParameter1 {
	if o == nil || o.Configuration == nil {
		var ret []BTMParameter1
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTNodeWithReference) GetConfigurationOk() ([]BTMParameter1, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *BTNodeWithReference) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given []BTMParameter1 and assigns it to the Configuration field.
func (o *BTNodeWithReference) SetConfiguration(v []BTMParameter1) {
	o.Configuration = v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *BTNodeWithReference) GetDocumentId() string {
	if o == nil || o.DocumentId == nil {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTNodeWithReference) GetDocumentIdOk() (*string, bool) {
	if o == nil || o.DocumentId == nil {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *BTNodeWithReference) HasDocumentId() bool {
	if o != nil && o.DocumentId != nil {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *BTNodeWithReference) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *BTNodeWithReference) GetElementId() string {
	if o == nil || o.ElementId == nil {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTNodeWithReference) GetElementIdOk() (*string, bool) {
	if o == nil || o.ElementId == nil {
		return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *BTNodeWithReference) HasElementId() bool {
	if o != nil && o.ElementId != nil {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *BTNodeWithReference) SetElementId(v string) {
	o.ElementId = &v
}

// GetMicroversionId returns the MicroversionId field value if set, zero value otherwise.
func (o *BTNodeWithReference) GetMicroversionId() BTMicroversionId366 {
	if o == nil || o.MicroversionId == nil {
		var ret BTMicroversionId366
		return ret
	}
	return *o.MicroversionId
}

// GetMicroversionIdOk returns a tuple with the MicroversionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTNodeWithReference) GetMicroversionIdOk() (*BTMicroversionId366, bool) {
	if o == nil || o.MicroversionId == nil {
		return nil, false
	}
	return o.MicroversionId, true
}

// HasMicroversionId returns a boolean if a field has been set.
func (o *BTNodeWithReference) HasMicroversionId() bool {
	if o != nil && o.MicroversionId != nil {
		return true
	}

	return false
}

// SetMicroversionId gets a reference to the given BTMicroversionId366 and assigns it to the MicroversionId field.
func (o *BTNodeWithReference) SetMicroversionId(v BTMicroversionId366) {
	o.MicroversionId = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTNodeWithReference) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTNodeWithReference) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTNodeWithReference) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTNodeWithReference) SetNodeId(v string) {
	o.NodeId = &v
}

// GetReferenceParameter returns the ReferenceParameter field value if set, zero value otherwise.
func (o *BTNodeWithReference) GetReferenceParameter() BTMParameterReferenceWithConfiguration3028 {
	if o == nil || o.ReferenceParameter == nil {
		var ret BTMParameterReferenceWithConfiguration3028
		return ret
	}
	return *o.ReferenceParameter
}

// GetReferenceParameterOk returns a tuple with the ReferenceParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTNodeWithReference) GetReferenceParameterOk() (*BTMParameterReferenceWithConfiguration3028, bool) {
	if o == nil || o.ReferenceParameter == nil {
		return nil, false
	}
	return o.ReferenceParameter, true
}

// HasReferenceParameter returns a boolean if a field has been set.
func (o *BTNodeWithReference) HasReferenceParameter() bool {
	if o != nil && o.ReferenceParameter != nil {
		return true
	}

	return false
}

// SetReferenceParameter gets a reference to the given BTMParameterReferenceWithConfiguration3028 and assigns it to the ReferenceParameter field.
func (o *BTNodeWithReference) SetReferenceParameter(v BTMParameterReferenceWithConfiguration3028) {
	o.ReferenceParameter = &v
}

// GetValidRevisionReference returns the ValidRevisionReference field value if set, zero value otherwise.
func (o *BTNodeWithReference) GetValidRevisionReference() bool {
	if o == nil || o.ValidRevisionReference == nil {
		var ret bool
		return ret
	}
	return *o.ValidRevisionReference
}

// GetValidRevisionReferenceOk returns a tuple with the ValidRevisionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTNodeWithReference) GetValidRevisionReferenceOk() (*bool, bool) {
	if o == nil || o.ValidRevisionReference == nil {
		return nil, false
	}
	return o.ValidRevisionReference, true
}

// HasValidRevisionReference returns a boolean if a field has been set.
func (o *BTNodeWithReference) HasValidRevisionReference() bool {
	if o != nil && o.ValidRevisionReference != nil {
		return true
	}

	return false
}

// SetValidRevisionReference gets a reference to the given bool and assigns it to the ValidRevisionReference field.
func (o *BTNodeWithReference) SetValidRevisionReference(v bool) {
	o.ValidRevisionReference = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *BTNodeWithReference) GetVersionId() string {
	if o == nil || o.VersionId == nil {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTNodeWithReference) GetVersionIdOk() (*string, bool) {
	if o == nil || o.VersionId == nil {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *BTNodeWithReference) HasVersionId() bool {
	if o != nil && o.VersionId != nil {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *BTNodeWithReference) SetVersionId(v string) {
	o.VersionId = &v
}

func (o BTNodeWithReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	if o.DocumentId != nil {
		toSerialize["documentId"] = o.DocumentId
	}
	if o.ElementId != nil {
		toSerialize["elementId"] = o.ElementId
	}
	if o.MicroversionId != nil {
		toSerialize["microversionId"] = o.MicroversionId
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.ReferenceParameter != nil {
		toSerialize["referenceParameter"] = o.ReferenceParameter
	}
	if o.ValidRevisionReference != nil {
		toSerialize["validRevisionReference"] = o.ValidRevisionReference
	}
	if o.VersionId != nil {
		toSerialize["versionId"] = o.VersionId
	}
	return json.Marshal(toSerialize)
}

type NullableBTNodeWithReference struct {
	value *BTNodeWithReference
	isSet bool
}

func (v NullableBTNodeWithReference) Get() *BTNodeWithReference {
	return v.value
}

func (v *NullableBTNodeWithReference) Set(val *BTNodeWithReference) {
	v.value = val
	v.isSet = true
}

func (v NullableBTNodeWithReference) IsSet() bool {
	return v.isSet
}

func (v *NullableBTNodeWithReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTNodeWithReference(val *BTNodeWithReference) *NullableBTNodeWithReference {
	return &NullableBTNodeWithReference{value: val, isSet: true}
}

func (v NullableBTNodeWithReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTNodeWithReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

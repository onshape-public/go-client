/*
Onshape REST API

The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.

API version: 1.171.24257-687de06de652
Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTFeatureSpec129 - struct for BTFeatureSpec129
type BTFeatureSpec129 struct {
	implBTFeatureSpec129 interface{}
}

// BTComputedPartPropertySpec1746AsBTFeatureSpec129 is a convenience function that returns BTComputedPartPropertySpec1746 wrapped in BTFeatureSpec129
func (o *BTComputedPartPropertySpec1746) AsBTFeatureSpec129() *BTFeatureSpec129 {
	return &BTFeatureSpec129{o}
}

// BTTableSpec915AsBTFeatureSpec129 is a convenience function that returns BTTableSpec915 wrapped in BTFeatureSpec129
func (o *BTTableSpec915) AsBTFeatureSpec129() *BTFeatureSpec129 {
	return &BTFeatureSpec129{o}
}

// NewBTFeatureSpec129 instantiates a new BTFeatureSpec129 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTFeatureSpec129() *BTFeatureSpec129 {
	this := BTFeatureSpec129{Newbase_BTFeatureSpec129()}
	return &this
}

// NewBTFeatureSpec129WithDefaults instantiates a new BTFeatureSpec129 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTFeatureSpec129WithDefaults() *BTFeatureSpec129 {
	this := BTFeatureSpec129{Newbase_BTFeatureSpec129WithDefaults()}
	return &this
}

// GetAdditionalLocalizedStrings returns the AdditionalLocalizedStrings field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetAdditionalLocalizedStrings() int32 {
	type getResult interface {
		GetAdditionalLocalizedStrings() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAdditionalLocalizedStrings()
	} else {
		var de int32
		return de
	}
}

// GetAdditionalLocalizedStringsOk returns a tuple with the AdditionalLocalizedStrings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetAdditionalLocalizedStringsOk() (*int32, bool) {
	type getResult interface {
		GetAdditionalLocalizedStringsOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAdditionalLocalizedStringsOk()
	} else {
		return nil, false
	}
}

// HasAdditionalLocalizedStrings returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasAdditionalLocalizedStrings() bool {
	type getResult interface {
		HasAdditionalLocalizedStrings() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasAdditionalLocalizedStrings()
	} else {
		return false
	}
}

// SetAdditionalLocalizedStrings gets a reference to the given int32 and assigns it to the AdditionalLocalizedStrings field.
func (o *BTFeatureSpec129) SetAdditionalLocalizedStrings(v int32) {
	type getResult interface {
		SetAdditionalLocalizedStrings(v int32)
	}

	o.GetActualInstance().(getResult).SetAdditionalLocalizedStrings(v)
}

// GetAllParameters returns the AllParameters field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetAllParameters() []BTParameterSpec6 {
	type getResult interface {
		GetAllParameters() []BTParameterSpec6
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAllParameters()
	} else {
		var de []BTParameterSpec6
		return de
	}
}

// GetAllParametersOk returns a tuple with the AllParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetAllParametersOk() ([]BTParameterSpec6, bool) {
	type getResult interface {
		GetAllParametersOk() ([]BTParameterSpec6, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAllParametersOk()
	} else {
		return nil, false
	}
}

// HasAllParameters returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasAllParameters() bool {
	type getResult interface {
		HasAllParameters() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasAllParameters()
	} else {
		return false
	}
}

// SetAllParameters gets a reference to the given []BTParameterSpec6 and assigns it to the AllParameters field.
func (o *BTFeatureSpec129) SetAllParameters(v []BTParameterSpec6) {
	type getResult interface {
		SetAllParameters(v []BTParameterSpec6)
	}

	o.GetActualInstance().(getResult).SetAllParameters(v)
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTFeatureSpec129) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetComputedPartPropertySpec returns the ComputedPartPropertySpec field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetComputedPartPropertySpec() bool {
	type getResult interface {
		GetComputedPartPropertySpec() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetComputedPartPropertySpec()
	} else {
		var de bool
		return de
	}
}

// GetComputedPartPropertySpecOk returns a tuple with the ComputedPartPropertySpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetComputedPartPropertySpecOk() (*bool, bool) {
	type getResult interface {
		GetComputedPartPropertySpecOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetComputedPartPropertySpecOk()
	} else {
		return nil, false
	}
}

// HasComputedPartPropertySpec returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasComputedPartPropertySpec() bool {
	type getResult interface {
		HasComputedPartPropertySpec() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasComputedPartPropertySpec()
	} else {
		return false
	}
}

// SetComputedPartPropertySpec gets a reference to the given bool and assigns it to the ComputedPartPropertySpec field.
func (o *BTFeatureSpec129) SetComputedPartPropertySpec(v bool) {
	type getResult interface {
		SetComputedPartPropertySpec(v bool)
	}

	o.GetActualInstance().(getResult).SetComputedPartPropertySpec(v)
}

// GetDescriptionImageUri returns the DescriptionImageUri field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetDescriptionImageUri() string {
	type getResult interface {
		GetDescriptionImageUri() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDescriptionImageUri()
	} else {
		var de string
		return de
	}
}

// GetDescriptionImageUriOk returns a tuple with the DescriptionImageUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetDescriptionImageUriOk() (*string, bool) {
	type getResult interface {
		GetDescriptionImageUriOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDescriptionImageUriOk()
	} else {
		return nil, false
	}
}

// HasDescriptionImageUri returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasDescriptionImageUri() bool {
	type getResult interface {
		HasDescriptionImageUri() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDescriptionImageUri()
	} else {
		return false
	}
}

// SetDescriptionImageUri gets a reference to the given string and assigns it to the DescriptionImageUri field.
func (o *BTFeatureSpec129) SetDescriptionImageUri(v string) {
	type getResult interface {
		SetDescriptionImageUri(v string)
	}

	o.GetActualInstance().(getResult).SetDescriptionImageUri(v)
}

// GetEditingLogic returns the EditingLogic field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetEditingLogic() BTEditingLogic2350 {
	type getResult interface {
		GetEditingLogic() BTEditingLogic2350
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEditingLogic()
	} else {
		var de BTEditingLogic2350
		return de
	}
}

// GetEditingLogicOk returns a tuple with the EditingLogic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetEditingLogicOk() (*BTEditingLogic2350, bool) {
	type getResult interface {
		GetEditingLogicOk() (*BTEditingLogic2350, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEditingLogicOk()
	} else {
		return nil, false
	}
}

// HasEditingLogic returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasEditingLogic() bool {
	type getResult interface {
		HasEditingLogic() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEditingLogic()
	} else {
		return false
	}
}

// SetEditingLogic gets a reference to the given BTEditingLogic2350 and assigns it to the EditingLogic field.
func (o *BTFeatureSpec129) SetEditingLogic(v BTEditingLogic2350) {
	type getResult interface {
		SetEditingLogic(v BTEditingLogic2350)
	}

	o.GetActualInstance().(getResult).SetEditingLogic(v)
}

// GetFeatureNameTemplate returns the FeatureNameTemplate field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetFeatureNameTemplate() string {
	type getResult interface {
		GetFeatureNameTemplate() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureNameTemplate()
	} else {
		var de string
		return de
	}
}

// GetFeatureNameTemplateOk returns a tuple with the FeatureNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetFeatureNameTemplateOk() (*string, bool) {
	type getResult interface {
		GetFeatureNameTemplateOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureNameTemplateOk()
	} else {
		return nil, false
	}
}

// HasFeatureNameTemplate returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasFeatureNameTemplate() bool {
	type getResult interface {
		HasFeatureNameTemplate() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFeatureNameTemplate()
	} else {
		return false
	}
}

// SetFeatureNameTemplate gets a reference to the given string and assigns it to the FeatureNameTemplate field.
func (o *BTFeatureSpec129) SetFeatureNameTemplate(v string) {
	type getResult interface {
		SetFeatureNameTemplate(v string)
	}

	o.GetActualInstance().(getResult).SetFeatureNameTemplate(v)
}

// GetFeatureType returns the FeatureType field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetFeatureType() string {
	type getResult interface {
		GetFeatureType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureType()
	} else {
		var de string
		return de
	}
}

// GetFeatureTypeOk returns a tuple with the FeatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetFeatureTypeOk() (*string, bool) {
	type getResult interface {
		GetFeatureTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureTypeOk()
	} else {
		return nil, false
	}
}

// HasFeatureType returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasFeatureType() bool {
	type getResult interface {
		HasFeatureType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFeatureType()
	} else {
		return false
	}
}

// SetFeatureType gets a reference to the given string and assigns it to the FeatureType field.
func (o *BTFeatureSpec129) SetFeatureType(v string) {
	type getResult interface {
		SetFeatureType(v string)
	}

	o.GetActualInstance().(getResult).SetFeatureType(v)
}

// GetFeatureTypeDescription returns the FeatureTypeDescription field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetFeatureTypeDescription() string {
	type getResult interface {
		GetFeatureTypeDescription() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureTypeDescription()
	} else {
		var de string
		return de
	}
}

// GetFeatureTypeDescriptionOk returns a tuple with the FeatureTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetFeatureTypeDescriptionOk() (*string, bool) {
	type getResult interface {
		GetFeatureTypeDescriptionOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureTypeDescriptionOk()
	} else {
		return nil, false
	}
}

// HasFeatureTypeDescription returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasFeatureTypeDescription() bool {
	type getResult interface {
		HasFeatureTypeDescription() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFeatureTypeDescription()
	} else {
		return false
	}
}

// SetFeatureTypeDescription gets a reference to the given string and assigns it to the FeatureTypeDescription field.
func (o *BTFeatureSpec129) SetFeatureTypeDescription(v string) {
	type getResult interface {
		SetFeatureTypeDescription(v string)
	}

	o.GetActualInstance().(getResult).SetFeatureTypeDescription(v)
}

// GetFeatureTypeName returns the FeatureTypeName field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetFeatureTypeName() string {
	type getResult interface {
		GetFeatureTypeName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureTypeName()
	} else {
		var de string
		return de
	}
}

// GetFeatureTypeNameOk returns a tuple with the FeatureTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetFeatureTypeNameOk() (*string, bool) {
	type getResult interface {
		GetFeatureTypeNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureTypeNameOk()
	} else {
		return nil, false
	}
}

// HasFeatureTypeName returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasFeatureTypeName() bool {
	type getResult interface {
		HasFeatureTypeName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFeatureTypeName()
	} else {
		return false
	}
}

// SetFeatureTypeName gets a reference to the given string and assigns it to the FeatureTypeName field.
func (o *BTFeatureSpec129) SetFeatureTypeName(v string) {
	type getResult interface {
		SetFeatureTypeName(v string)
	}

	o.GetActualInstance().(getResult).SetFeatureTypeName(v)
}

// GetFilterSelectors returns the FilterSelectors field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetFilterSelectors() []string {
	type getResult interface {
		GetFilterSelectors() []string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFilterSelectors()
	} else {
		var de []string
		return de
	}
}

// GetFilterSelectorsOk returns a tuple with the FilterSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetFilterSelectorsOk() ([]string, bool) {
	type getResult interface {
		GetFilterSelectorsOk() ([]string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFilterSelectorsOk()
	} else {
		return nil, false
	}
}

// HasFilterSelectors returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasFilterSelectors() bool {
	type getResult interface {
		HasFilterSelectors() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFilterSelectors()
	} else {
		return false
	}
}

// SetFilterSelectors gets a reference to the given []string and assigns it to the FilterSelectors field.
func (o *BTFeatureSpec129) SetFilterSelectors(v []string) {
	type getResult interface {
		SetFilterSelectors(v []string)
	}

	o.GetActualInstance().(getResult).SetFilterSelectors(v)
}

// GetFullFeatureType returns the FullFeatureType field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetFullFeatureType() string {
	type getResult interface {
		GetFullFeatureType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFullFeatureType()
	} else {
		var de string
		return de
	}
}

// GetFullFeatureTypeOk returns a tuple with the FullFeatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetFullFeatureTypeOk() (*string, bool) {
	type getResult interface {
		GetFullFeatureTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFullFeatureTypeOk()
	} else {
		return nil, false
	}
}

// HasFullFeatureType returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasFullFeatureType() bool {
	type getResult interface {
		HasFullFeatureType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFullFeatureType()
	} else {
		return false
	}
}

// SetFullFeatureType gets a reference to the given string and assigns it to the FullFeatureType field.
func (o *BTFeatureSpec129) SetFullFeatureType(v string) {
	type getResult interface {
		SetFullFeatureType(v string)
	}

	o.GetActualInstance().(getResult).SetFullFeatureType(v)
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetGroups() []BTParameterGroupSpec3469 {
	type getResult interface {
		GetGroups() []BTParameterGroupSpec3469
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetGroups()
	} else {
		var de []BTParameterGroupSpec3469
		return de
	}
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetGroupsOk() ([]BTParameterGroupSpec3469, bool) {
	type getResult interface {
		GetGroupsOk() ([]BTParameterGroupSpec3469, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetGroupsOk()
	} else {
		return nil, false
	}
}

// HasGroups returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasGroups() bool {
	type getResult interface {
		HasGroups() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasGroups()
	} else {
		return false
	}
}

// SetGroups gets a reference to the given []BTParameterGroupSpec3469 and assigns it to the Groups field.
func (o *BTFeatureSpec129) SetGroups(v []BTParameterGroupSpec3469) {
	type getResult interface {
		SetGroups(v []BTParameterGroupSpec3469)
	}

	o.GetActualInstance().(getResult).SetGroups(v)
}

// GetIconUri returns the IconUri field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetIconUri() string {
	type getResult interface {
		GetIconUri() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIconUri()
	} else {
		var de string
		return de
	}
}

// GetIconUriOk returns a tuple with the IconUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetIconUriOk() (*string, bool) {
	type getResult interface {
		GetIconUriOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIconUriOk()
	} else {
		return nil, false
	}
}

// HasIconUri returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasIconUri() bool {
	type getResult interface {
		HasIconUri() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIconUri()
	} else {
		return false
	}
}

// SetIconUri gets a reference to the given string and assigns it to the IconUri field.
func (o *BTFeatureSpec129) SetIconUri(v string) {
	type getResult interface {
		SetIconUri(v string)
	}

	o.GetActualInstance().(getResult).SetIconUri(v)
}

// GetLanguageVersion returns the LanguageVersion field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetLanguageVersion() int32 {
	type getResult interface {
		GetLanguageVersion() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLanguageVersion()
	} else {
		var de int32
		return de
	}
}

// GetLanguageVersionOk returns a tuple with the LanguageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetLanguageVersionOk() (*int32, bool) {
	type getResult interface {
		GetLanguageVersionOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLanguageVersionOk()
	} else {
		return nil, false
	}
}

// HasLanguageVersion returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasLanguageVersion() bool {
	type getResult interface {
		HasLanguageVersion() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLanguageVersion()
	} else {
		return false
	}
}

// SetLanguageVersion gets a reference to the given int32 and assigns it to the LanguageVersion field.
func (o *BTFeatureSpec129) SetLanguageVersion(v int32) {
	type getResult interface {
		SetLanguageVersion(v int32)
	}

	o.GetActualInstance().(getResult).SetLanguageVersion(v)
}

// GetLinkedLocationName returns the LinkedLocationName field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetLinkedLocationName() string {
	type getResult interface {
		GetLinkedLocationName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLinkedLocationName()
	} else {
		var de string
		return de
	}
}

// GetLinkedLocationNameOk returns a tuple with the LinkedLocationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetLinkedLocationNameOk() (*string, bool) {
	type getResult interface {
		GetLinkedLocationNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLinkedLocationNameOk()
	} else {
		return nil, false
	}
}

// HasLinkedLocationName returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasLinkedLocationName() bool {
	type getResult interface {
		HasLinkedLocationName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLinkedLocationName()
	} else {
		return false
	}
}

// SetLinkedLocationName gets a reference to the given string and assigns it to the LinkedLocationName field.
func (o *BTFeatureSpec129) SetLinkedLocationName(v string) {
	type getResult interface {
		SetLinkedLocationName(v string)
	}

	o.GetActualInstance().(getResult).SetLinkedLocationName(v)
}

// GetLocalizableName returns the LocalizableName field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetLocalizableName() string {
	type getResult interface {
		GetLocalizableName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocalizableName()
	} else {
		var de string
		return de
	}
}

// GetLocalizableNameOk returns a tuple with the LocalizableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetLocalizableNameOk() (*string, bool) {
	type getResult interface {
		GetLocalizableNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocalizableNameOk()
	} else {
		return nil, false
	}
}

// HasLocalizableName returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasLocalizableName() bool {
	type getResult interface {
		HasLocalizableName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLocalizableName()
	} else {
		return false
	}
}

// SetLocalizableName gets a reference to the given string and assigns it to the LocalizableName field.
func (o *BTFeatureSpec129) SetLocalizableName(v string) {
	type getResult interface {
		SetLocalizableName(v string)
	}

	o.GetActualInstance().(getResult).SetLocalizableName(v)
}

// GetLocalizedName returns the LocalizedName field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetLocalizedName() string {
	type getResult interface {
		GetLocalizedName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocalizedName()
	} else {
		var de string
		return de
	}
}

// GetLocalizedNameOk returns a tuple with the LocalizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetLocalizedNameOk() (*string, bool) {
	type getResult interface {
		GetLocalizedNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocalizedNameOk()
	} else {
		return nil, false
	}
}

// HasLocalizedName returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasLocalizedName() bool {
	type getResult interface {
		HasLocalizedName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLocalizedName()
	} else {
		return false
	}
}

// SetLocalizedName gets a reference to the given string and assigns it to the LocalizedName field.
func (o *BTFeatureSpec129) SetLocalizedName(v string) {
	type getResult interface {
		SetLocalizedName(v string)
	}

	o.GetActualInstance().(getResult).SetLocalizedName(v)
}

// GetLocationInfos returns the LocationInfos field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetLocationInfos() []BTLocationInfo226 {
	type getResult interface {
		GetLocationInfos() []BTLocationInfo226
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocationInfos()
	} else {
		var de []BTLocationInfo226
		return de
	}
}

// GetLocationInfosOk returns a tuple with the LocationInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetLocationInfosOk() ([]BTLocationInfo226, bool) {
	type getResult interface {
		GetLocationInfosOk() ([]BTLocationInfo226, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLocationInfosOk()
	} else {
		return nil, false
	}
}

// HasLocationInfos returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasLocationInfos() bool {
	type getResult interface {
		HasLocationInfos() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLocationInfos()
	} else {
		return false
	}
}

// SetLocationInfos gets a reference to the given []BTLocationInfo226 and assigns it to the LocationInfos field.
func (o *BTFeatureSpec129) SetLocationInfos(v []BTLocationInfo226) {
	type getResult interface {
		SetLocationInfos(v []BTLocationInfo226)
	}

	o.GetActualInstance().(getResult).SetLocationInfos(v)
}

// GetManipulatorChangeFunction returns the ManipulatorChangeFunction field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetManipulatorChangeFunction() string {
	type getResult interface {
		GetManipulatorChangeFunction() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetManipulatorChangeFunction()
	} else {
		var de string
		return de
	}
}

// GetManipulatorChangeFunctionOk returns a tuple with the ManipulatorChangeFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetManipulatorChangeFunctionOk() (*string, bool) {
	type getResult interface {
		GetManipulatorChangeFunctionOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetManipulatorChangeFunctionOk()
	} else {
		return nil, false
	}
}

// HasManipulatorChangeFunction returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasManipulatorChangeFunction() bool {
	type getResult interface {
		HasManipulatorChangeFunction() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasManipulatorChangeFunction()
	} else {
		return false
	}
}

// SetManipulatorChangeFunction gets a reference to the given string and assigns it to the ManipulatorChangeFunction field.
func (o *BTFeatureSpec129) SetManipulatorChangeFunction(v string) {
	type getResult interface {
		SetManipulatorChangeFunction(v string)
	}

	o.GetActualInstance().(getResult).SetManipulatorChangeFunction(v)
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetNamespace() string {
	type getResult interface {
		GetNamespace() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespace()
	} else {
		var de string
		return de
	}
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetNamespaceOk() (*string, bool) {
	type getResult interface {
		GetNamespaceOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespaceOk()
	} else {
		return nil, false
	}
}

// HasNamespace returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasNamespace() bool {
	type getResult interface {
		HasNamespace() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNamespace()
	} else {
		return false
	}
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *BTFeatureSpec129) SetNamespace(v string) {
	type getResult interface {
		SetNamespace(v string)
	}

	o.GetActualInstance().(getResult).SetNamespace(v)
}

// GetNamespaceIncludingEnums returns the NamespaceIncludingEnums field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetNamespaceIncludingEnums() string {
	type getResult interface {
		GetNamespaceIncludingEnums() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespaceIncludingEnums()
	} else {
		var de string
		return de
	}
}

// GetNamespaceIncludingEnumsOk returns a tuple with the NamespaceIncludingEnums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetNamespaceIncludingEnumsOk() (*string, bool) {
	type getResult interface {
		GetNamespaceIncludingEnumsOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespaceIncludingEnumsOk()
	} else {
		return nil, false
	}
}

// HasNamespaceIncludingEnums returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasNamespaceIncludingEnums() bool {
	type getResult interface {
		HasNamespaceIncludingEnums() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNamespaceIncludingEnums()
	} else {
		return false
	}
}

// SetNamespaceIncludingEnums gets a reference to the given string and assigns it to the NamespaceIncludingEnums field.
func (o *BTFeatureSpec129) SetNamespaceIncludingEnums(v string) {
	type getResult interface {
		SetNamespaceIncludingEnums(v string)
	}

	o.GetActualInstance().(getResult).SetNamespaceIncludingEnums(v)
}

// GetNamespaceTheSource returns the NamespaceTheSource field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetNamespaceTheSource() bool {
	type getResult interface {
		GetNamespaceTheSource() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespaceTheSource()
	} else {
		var de bool
		return de
	}
}

// GetNamespaceTheSourceOk returns a tuple with the NamespaceTheSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetNamespaceTheSourceOk() (*bool, bool) {
	type getResult interface {
		GetNamespaceTheSourceOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespaceTheSourceOk()
	} else {
		return nil, false
	}
}

// HasNamespaceTheSource returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasNamespaceTheSource() bool {
	type getResult interface {
		HasNamespaceTheSource() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNamespaceTheSource()
	} else {
		return false
	}
}

// SetNamespaceTheSource gets a reference to the given bool and assigns it to the NamespaceTheSource field.
func (o *BTFeatureSpec129) SetNamespaceTheSource(v bool) {
	type getResult interface {
		SetNamespaceTheSource(v bool)
	}

	o.GetActualInstance().(getResult).SetNamespaceTheSource(v)
}

// GetParameterIdToSpec returns the ParameterIdToSpec field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetParameterIdToSpec() map[string]BTParameterSpec6 {
	type getResult interface {
		GetParameterIdToSpec() map[string]BTParameterSpec6
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterIdToSpec()
	} else {
		var de map[string]BTParameterSpec6
		return de
	}
}

// GetParameterIdToSpecOk returns a tuple with the ParameterIdToSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetParameterIdToSpecOk() (*map[string]BTParameterSpec6, bool) {
	type getResult interface {
		GetParameterIdToSpecOk() (*map[string]BTParameterSpec6, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameterIdToSpecOk()
	} else {
		return nil, false
	}
}

// HasParameterIdToSpec returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasParameterIdToSpec() bool {
	type getResult interface {
		HasParameterIdToSpec() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasParameterIdToSpec()
	} else {
		return false
	}
}

// SetParameterIdToSpec gets a reference to the given map[string]BTParameterSpec6 and assigns it to the ParameterIdToSpec field.
func (o *BTFeatureSpec129) SetParameterIdToSpec(v map[string]BTParameterSpec6) {
	type getResult interface {
		SetParameterIdToSpec(v map[string]BTParameterSpec6)
	}

	o.GetActualInstance().(getResult).SetParameterIdToSpec(v)
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetParameters() []BTParameterSpec6 {
	type getResult interface {
		GetParameters() []BTParameterSpec6
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameters()
	} else {
		var de []BTParameterSpec6
		return de
	}
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetParametersOk() ([]BTParameterSpec6, bool) {
	type getResult interface {
		GetParametersOk() ([]BTParameterSpec6, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParametersOk()
	} else {
		return nil, false
	}
}

// HasParameters returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasParameters() bool {
	type getResult interface {
		HasParameters() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasParameters()
	} else {
		return false
	}
}

// SetParameters gets a reference to the given []BTParameterSpec6 and assigns it to the Parameters field.
func (o *BTFeatureSpec129) SetParameters(v []BTParameterSpec6) {
	type getResult interface {
		SetParameters(v []BTParameterSpec6)
	}

	o.GetActualInstance().(getResult).SetParameters(v)
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetSignature() string {
	type getResult interface {
		GetSignature() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSignature()
	} else {
		var de string
		return de
	}
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetSignatureOk() (*string, bool) {
	type getResult interface {
		GetSignatureOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSignatureOk()
	} else {
		return nil, false
	}
}

// HasSignature returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasSignature() bool {
	type getResult interface {
		HasSignature() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSignature()
	} else {
		return false
	}
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *BTFeatureSpec129) SetSignature(v string) {
	type getResult interface {
		SetSignature(v string)
	}

	o.GetActualInstance().(getResult).SetSignature(v)
}

// GetSourceLocation returns the SourceLocation field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetSourceLocation() BTLocationInfo226 {
	type getResult interface {
		GetSourceLocation() BTLocationInfo226
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSourceLocation()
	} else {
		var de BTLocationInfo226
		return de
	}
}

// GetSourceLocationOk returns a tuple with the SourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetSourceLocationOk() (*BTLocationInfo226, bool) {
	type getResult interface {
		GetSourceLocationOk() (*BTLocationInfo226, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSourceLocationOk()
	} else {
		return nil, false
	}
}

// HasSourceLocation returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasSourceLocation() bool {
	type getResult interface {
		HasSourceLocation() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSourceLocation()
	} else {
		return false
	}
}

// SetSourceLocation gets a reference to the given BTLocationInfo226 and assigns it to the SourceLocation field.
func (o *BTFeatureSpec129) SetSourceLocation(v BTLocationInfo226) {
	type getResult interface {
		SetSourceLocation(v BTLocationInfo226)
	}

	o.GetActualInstance().(getResult).SetSourceLocation(v)
}

// GetSourceMicroversionId returns the SourceMicroversionId field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetSourceMicroversionId() string {
	type getResult interface {
		GetSourceMicroversionId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSourceMicroversionId()
	} else {
		var de string
		return de
	}
}

// GetSourceMicroversionIdOk returns a tuple with the SourceMicroversionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetSourceMicroversionIdOk() (*string, bool) {
	type getResult interface {
		GetSourceMicroversionIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSourceMicroversionIdOk()
	} else {
		return nil, false
	}
}

// HasSourceMicroversionId returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasSourceMicroversionId() bool {
	type getResult interface {
		HasSourceMicroversionId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSourceMicroversionId()
	} else {
		return false
	}
}

// SetSourceMicroversionId gets a reference to the given string and assigns it to the SourceMicroversionId field.
func (o *BTFeatureSpec129) SetSourceMicroversionId(v string) {
	type getResult interface {
		SetSourceMicroversionId(v string)
	}

	o.GetActualInstance().(getResult).SetSourceMicroversionId(v)
}

// GetStringsToLocalize returns the StringsToLocalize field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetStringsToLocalize() []string {
	type getResult interface {
		GetStringsToLocalize() []string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStringsToLocalize()
	} else {
		var de []string
		return de
	}
}

// GetStringsToLocalizeOk returns a tuple with the StringsToLocalize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetStringsToLocalizeOk() ([]string, bool) {
	type getResult interface {
		GetStringsToLocalizeOk() ([]string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStringsToLocalizeOk()
	} else {
		return nil, false
	}
}

// HasStringsToLocalize returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasStringsToLocalize() bool {
	type getResult interface {
		HasStringsToLocalize() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasStringsToLocalize()
	} else {
		return false
	}
}

// SetStringsToLocalize gets a reference to the given []string and assigns it to the StringsToLocalize field.
func (o *BTFeatureSpec129) SetStringsToLocalize(v []string) {
	type getResult interface {
		SetStringsToLocalize(v []string)
	}

	o.GetActualInstance().(getResult).SetStringsToLocalize(v)
}

// GetTableSpec returns the TableSpec field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetTableSpec() bool {
	type getResult interface {
		GetTableSpec() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetTableSpec()
	} else {
		var de bool
		return de
	}
}

// GetTableSpecOk returns a tuple with the TableSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetTableSpecOk() (*bool, bool) {
	type getResult interface {
		GetTableSpecOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetTableSpecOk()
	} else {
		return nil, false
	}
}

// HasTableSpec returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasTableSpec() bool {
	type getResult interface {
		HasTableSpec() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasTableSpec()
	} else {
		return false
	}
}

// SetTableSpec gets a reference to the given bool and assigns it to the TableSpec field.
func (o *BTFeatureSpec129) SetTableSpec(v bool) {
	type getResult interface {
		SetTableSpec(v bool)
	}

	o.GetActualInstance().(getResult).SetTableSpec(v)
}

// GetTooltipTemplate returns the TooltipTemplate field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetTooltipTemplate() string {
	type getResult interface {
		GetTooltipTemplate() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetTooltipTemplate()
	} else {
		var de string
		return de
	}
}

// GetTooltipTemplateOk returns a tuple with the TooltipTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetTooltipTemplateOk() (*string, bool) {
	type getResult interface {
		GetTooltipTemplateOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetTooltipTemplateOk()
	} else {
		return nil, false
	}
}

// HasTooltipTemplate returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasTooltipTemplate() bool {
	type getResult interface {
		HasTooltipTemplate() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasTooltipTemplate()
	} else {
		return false
	}
}

// SetTooltipTemplate gets a reference to the given string and assigns it to the TooltipTemplate field.
func (o *BTFeatureSpec129) SetTooltipTemplate(v string) {
	type getResult interface {
		SetTooltipTemplate(v string)
	}

	o.GetActualInstance().(getResult).SetTooltipTemplate(v)
}

// GetUiHints returns the UiHints field value if set, zero value otherwise.
func (o *BTFeatureSpec129) GetUiHints() []GBTUIHint {
	type getResult interface {
		GetUiHints() []GBTUIHint
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetUiHints()
	} else {
		var de []GBTUIHint
		return de
	}
}

// GetUiHintsOk returns a tuple with the UiHints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureSpec129) GetUiHintsOk() ([]GBTUIHint, bool) {
	type getResult interface {
		GetUiHintsOk() ([]GBTUIHint, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetUiHintsOk()
	} else {
		return nil, false
	}
}

// HasUiHints returns a boolean if a field has been set.
func (o *BTFeatureSpec129) HasUiHints() bool {
	type getResult interface {
		HasUiHints() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasUiHints()
	} else {
		return false
	}
}

// SetUiHints gets a reference to the given []GBTUIHint and assigns it to the UiHints field.
func (o *BTFeatureSpec129) SetUiHints(v []GBTUIHint) {
	type getResult interface {
		SetUiHints(v []GBTUIHint)
	}

	o.GetActualInstance().(getResult).SetUiHints(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTFeatureSpec129) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'BTComputedPartPropertySpec-1746'
	if jsonDict["btType"] == "BTComputedPartPropertySpec-1746" {
		// try to unmarshal JSON data into BTComputedPartPropertySpec1746
		var qr *BTComputedPartPropertySpec1746
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTFeatureSpec129 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTFeatureSpec129 = nil
			return fmt.Errorf("Failed to unmarshal BTFeatureSpec129 as BTComputedPartPropertySpec1746: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTTableSpec-915'
	if jsonDict["btType"] == "BTTableSpec-915" {
		// try to unmarshal JSON data into BTTableSpec915
		var qr *BTTableSpec915
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTFeatureSpec129 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTFeatureSpec129 = nil
			return fmt.Errorf("Failed to unmarshal BTFeatureSpec129 as BTTableSpec915: %s", err.Error())
		}
	}

	var qtx *base_BTFeatureSpec129
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTFeatureSpec129 = qtx
		return nil // data stored in dst.base_BTFeatureSpec129, return on the first match
	} else {
		dst.implBTFeatureSpec129 = nil
		return fmt.Errorf("Failed to unmarshal BTFeatureSpec129 as base_BTFeatureSpec129: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTFeatureSpec129) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTFeatureSpec129) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTFeatureSpec129
}

type NullableBTFeatureSpec129 struct {
	value *BTFeatureSpec129
	isSet bool
}

func (v NullableBTFeatureSpec129) Get() *BTFeatureSpec129 {
	return v.value
}

func (v *NullableBTFeatureSpec129) Set(val *BTFeatureSpec129) {
	v.value = val
	v.isSet = true
}

func (v NullableBTFeatureSpec129) IsSet() bool {
	return v.isSet
}

func (v *NullableBTFeatureSpec129) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTFeatureSpec129(val *BTFeatureSpec129) *NullableBTFeatureSpec129 {
	return &NullableBTFeatureSpec129{value: val, isSet: true}
}

func (v NullableBTFeatureSpec129) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTFeatureSpec129) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTFeatureSpec129 struct {
	AdditionalLocalizedStrings *int32                       `json:"additionalLocalizedStrings,omitempty"`
	AllParameters              []BTParameterSpec6           `json:"allParameters,omitempty"`
	BtType                     *string                      `json:"btType,omitempty"`
	ComputedPartPropertySpec   *bool                        `json:"computedPartPropertySpec,omitempty"`
	DescriptionImageUri        *string                      `json:"descriptionImageUri,omitempty"`
	EditingLogic               *BTEditingLogic2350          `json:"editingLogic,omitempty"`
	FeatureNameTemplate        *string                      `json:"featureNameTemplate,omitempty"`
	FeatureType                *string                      `json:"featureType,omitempty"`
	FeatureTypeDescription     *string                      `json:"featureTypeDescription,omitempty"`
	FeatureTypeName            *string                      `json:"featureTypeName,omitempty"`
	FilterSelectors            []string                     `json:"filterSelectors,omitempty"`
	FullFeatureType            *string                      `json:"fullFeatureType,omitempty"`
	Groups                     []BTParameterGroupSpec3469   `json:"groups,omitempty"`
	IconUri                    *string                      `json:"iconUri,omitempty"`
	LanguageVersion            *int32                       `json:"languageVersion,omitempty"`
	LinkedLocationName         *string                      `json:"linkedLocationName,omitempty"`
	LocalizableName            *string                      `json:"localizableName,omitempty"`
	LocalizedName              *string                      `json:"localizedName,omitempty"`
	LocationInfos              []BTLocationInfo226          `json:"locationInfos,omitempty"`
	ManipulatorChangeFunction  *string                      `json:"manipulatorChangeFunction,omitempty"`
	Namespace                  *string                      `json:"namespace,omitempty"`
	NamespaceIncludingEnums    *string                      `json:"namespaceIncludingEnums,omitempty"`
	NamespaceTheSource         *bool                        `json:"namespaceTheSource,omitempty"`
	ParameterIdToSpec          *map[string]BTParameterSpec6 `json:"parameterIdToSpec,omitempty"`
	Parameters                 []BTParameterSpec6           `json:"parameters,omitempty"`
	Signature                  *string                      `json:"signature,omitempty"`
	SourceLocation             *BTLocationInfo226           `json:"sourceLocation,omitempty"`
	SourceMicroversionId       *string                      `json:"sourceMicroversionId,omitempty"`
	StringsToLocalize          []string                     `json:"stringsToLocalize,omitempty"`
	TableSpec                  *bool                        `json:"tableSpec,omitempty"`
	TooltipTemplate            *string                      `json:"tooltipTemplate,omitempty"`
	UiHints                    []GBTUIHint                  `json:"uiHints,omitempty"`
}

// Newbase_BTFeatureSpec129 instantiates a new base_BTFeatureSpec129 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTFeatureSpec129() *base_BTFeatureSpec129 {
	this := base_BTFeatureSpec129{}
	return &this
}

// Newbase_BTFeatureSpec129WithDefaults instantiates a new base_BTFeatureSpec129 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTFeatureSpec129WithDefaults() *base_BTFeatureSpec129 {
	this := base_BTFeatureSpec129{}
	return &this
}

// GetAdditionalLocalizedStrings returns the AdditionalLocalizedStrings field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetAdditionalLocalizedStrings() int32 {
	if o == nil || o.AdditionalLocalizedStrings == nil {
		var ret int32
		return ret
	}
	return *o.AdditionalLocalizedStrings
}

// GetAdditionalLocalizedStringsOk returns a tuple with the AdditionalLocalizedStrings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetAdditionalLocalizedStringsOk() (*int32, bool) {
	if o == nil || o.AdditionalLocalizedStrings == nil {
		return nil, false
	}
	return o.AdditionalLocalizedStrings, true
}

// HasAdditionalLocalizedStrings returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasAdditionalLocalizedStrings() bool {
	if o != nil && o.AdditionalLocalizedStrings != nil {
		return true
	}

	return false
}

// SetAdditionalLocalizedStrings gets a reference to the given int32 and assigns it to the AdditionalLocalizedStrings field.
func (o *base_BTFeatureSpec129) SetAdditionalLocalizedStrings(v int32) {
	o.AdditionalLocalizedStrings = &v
}

// GetAllParameters returns the AllParameters field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetAllParameters() []BTParameterSpec6 {
	if o == nil || o.AllParameters == nil {
		var ret []BTParameterSpec6
		return ret
	}
	return o.AllParameters
}

// GetAllParametersOk returns a tuple with the AllParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetAllParametersOk() ([]BTParameterSpec6, bool) {
	if o == nil || o.AllParameters == nil {
		return nil, false
	}
	return o.AllParameters, true
}

// HasAllParameters returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasAllParameters() bool {
	if o != nil && o.AllParameters != nil {
		return true
	}

	return false
}

// SetAllParameters gets a reference to the given []BTParameterSpec6 and assigns it to the AllParameters field.
func (o *base_BTFeatureSpec129) SetAllParameters(v []BTParameterSpec6) {
	o.AllParameters = v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTFeatureSpec129) SetBtType(v string) {
	o.BtType = &v
}

// GetComputedPartPropertySpec returns the ComputedPartPropertySpec field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetComputedPartPropertySpec() bool {
	if o == nil || o.ComputedPartPropertySpec == nil {
		var ret bool
		return ret
	}
	return *o.ComputedPartPropertySpec
}

// GetComputedPartPropertySpecOk returns a tuple with the ComputedPartPropertySpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetComputedPartPropertySpecOk() (*bool, bool) {
	if o == nil || o.ComputedPartPropertySpec == nil {
		return nil, false
	}
	return o.ComputedPartPropertySpec, true
}

// HasComputedPartPropertySpec returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasComputedPartPropertySpec() bool {
	if o != nil && o.ComputedPartPropertySpec != nil {
		return true
	}

	return false
}

// SetComputedPartPropertySpec gets a reference to the given bool and assigns it to the ComputedPartPropertySpec field.
func (o *base_BTFeatureSpec129) SetComputedPartPropertySpec(v bool) {
	o.ComputedPartPropertySpec = &v
}

// GetDescriptionImageUri returns the DescriptionImageUri field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetDescriptionImageUri() string {
	if o == nil || o.DescriptionImageUri == nil {
		var ret string
		return ret
	}
	return *o.DescriptionImageUri
}

// GetDescriptionImageUriOk returns a tuple with the DescriptionImageUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetDescriptionImageUriOk() (*string, bool) {
	if o == nil || o.DescriptionImageUri == nil {
		return nil, false
	}
	return o.DescriptionImageUri, true
}

// HasDescriptionImageUri returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasDescriptionImageUri() bool {
	if o != nil && o.DescriptionImageUri != nil {
		return true
	}

	return false
}

// SetDescriptionImageUri gets a reference to the given string and assigns it to the DescriptionImageUri field.
func (o *base_BTFeatureSpec129) SetDescriptionImageUri(v string) {
	o.DescriptionImageUri = &v
}

// GetEditingLogic returns the EditingLogic field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetEditingLogic() BTEditingLogic2350 {
	if o == nil || o.EditingLogic == nil {
		var ret BTEditingLogic2350
		return ret
	}
	return *o.EditingLogic
}

// GetEditingLogicOk returns a tuple with the EditingLogic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetEditingLogicOk() (*BTEditingLogic2350, bool) {
	if o == nil || o.EditingLogic == nil {
		return nil, false
	}
	return o.EditingLogic, true
}

// HasEditingLogic returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasEditingLogic() bool {
	if o != nil && o.EditingLogic != nil {
		return true
	}

	return false
}

// SetEditingLogic gets a reference to the given BTEditingLogic2350 and assigns it to the EditingLogic field.
func (o *base_BTFeatureSpec129) SetEditingLogic(v BTEditingLogic2350) {
	o.EditingLogic = &v
}

// GetFeatureNameTemplate returns the FeatureNameTemplate field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetFeatureNameTemplate() string {
	if o == nil || o.FeatureNameTemplate == nil {
		var ret string
		return ret
	}
	return *o.FeatureNameTemplate
}

// GetFeatureNameTemplateOk returns a tuple with the FeatureNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetFeatureNameTemplateOk() (*string, bool) {
	if o == nil || o.FeatureNameTemplate == nil {
		return nil, false
	}
	return o.FeatureNameTemplate, true
}

// HasFeatureNameTemplate returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasFeatureNameTemplate() bool {
	if o != nil && o.FeatureNameTemplate != nil {
		return true
	}

	return false
}

// SetFeatureNameTemplate gets a reference to the given string and assigns it to the FeatureNameTemplate field.
func (o *base_BTFeatureSpec129) SetFeatureNameTemplate(v string) {
	o.FeatureNameTemplate = &v
}

// GetFeatureType returns the FeatureType field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetFeatureType() string {
	if o == nil || o.FeatureType == nil {
		var ret string
		return ret
	}
	return *o.FeatureType
}

// GetFeatureTypeOk returns a tuple with the FeatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetFeatureTypeOk() (*string, bool) {
	if o == nil || o.FeatureType == nil {
		return nil, false
	}
	return o.FeatureType, true
}

// HasFeatureType returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasFeatureType() bool {
	if o != nil && o.FeatureType != nil {
		return true
	}

	return false
}

// SetFeatureType gets a reference to the given string and assigns it to the FeatureType field.
func (o *base_BTFeatureSpec129) SetFeatureType(v string) {
	o.FeatureType = &v
}

// GetFeatureTypeDescription returns the FeatureTypeDescription field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetFeatureTypeDescription() string {
	if o == nil || o.FeatureTypeDescription == nil {
		var ret string
		return ret
	}
	return *o.FeatureTypeDescription
}

// GetFeatureTypeDescriptionOk returns a tuple with the FeatureTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetFeatureTypeDescriptionOk() (*string, bool) {
	if o == nil || o.FeatureTypeDescription == nil {
		return nil, false
	}
	return o.FeatureTypeDescription, true
}

// HasFeatureTypeDescription returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasFeatureTypeDescription() bool {
	if o != nil && o.FeatureTypeDescription != nil {
		return true
	}

	return false
}

// SetFeatureTypeDescription gets a reference to the given string and assigns it to the FeatureTypeDescription field.
func (o *base_BTFeatureSpec129) SetFeatureTypeDescription(v string) {
	o.FeatureTypeDescription = &v
}

// GetFeatureTypeName returns the FeatureTypeName field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetFeatureTypeName() string {
	if o == nil || o.FeatureTypeName == nil {
		var ret string
		return ret
	}
	return *o.FeatureTypeName
}

// GetFeatureTypeNameOk returns a tuple with the FeatureTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetFeatureTypeNameOk() (*string, bool) {
	if o == nil || o.FeatureTypeName == nil {
		return nil, false
	}
	return o.FeatureTypeName, true
}

// HasFeatureTypeName returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasFeatureTypeName() bool {
	if o != nil && o.FeatureTypeName != nil {
		return true
	}

	return false
}

// SetFeatureTypeName gets a reference to the given string and assigns it to the FeatureTypeName field.
func (o *base_BTFeatureSpec129) SetFeatureTypeName(v string) {
	o.FeatureTypeName = &v
}

// GetFilterSelectors returns the FilterSelectors field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetFilterSelectors() []string {
	if o == nil || o.FilterSelectors == nil {
		var ret []string
		return ret
	}
	return o.FilterSelectors
}

// GetFilterSelectorsOk returns a tuple with the FilterSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetFilterSelectorsOk() ([]string, bool) {
	if o == nil || o.FilterSelectors == nil {
		return nil, false
	}
	return o.FilterSelectors, true
}

// HasFilterSelectors returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasFilterSelectors() bool {
	if o != nil && o.FilterSelectors != nil {
		return true
	}

	return false
}

// SetFilterSelectors gets a reference to the given []string and assigns it to the FilterSelectors field.
func (o *base_BTFeatureSpec129) SetFilterSelectors(v []string) {
	o.FilterSelectors = v
}

// GetFullFeatureType returns the FullFeatureType field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetFullFeatureType() string {
	if o == nil || o.FullFeatureType == nil {
		var ret string
		return ret
	}
	return *o.FullFeatureType
}

// GetFullFeatureTypeOk returns a tuple with the FullFeatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetFullFeatureTypeOk() (*string, bool) {
	if o == nil || o.FullFeatureType == nil {
		return nil, false
	}
	return o.FullFeatureType, true
}

// HasFullFeatureType returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasFullFeatureType() bool {
	if o != nil && o.FullFeatureType != nil {
		return true
	}

	return false
}

// SetFullFeatureType gets a reference to the given string and assigns it to the FullFeatureType field.
func (o *base_BTFeatureSpec129) SetFullFeatureType(v string) {
	o.FullFeatureType = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetGroups() []BTParameterGroupSpec3469 {
	if o == nil || o.Groups == nil {
		var ret []BTParameterGroupSpec3469
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetGroupsOk() ([]BTParameterGroupSpec3469, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []BTParameterGroupSpec3469 and assigns it to the Groups field.
func (o *base_BTFeatureSpec129) SetGroups(v []BTParameterGroupSpec3469) {
	o.Groups = v
}

// GetIconUri returns the IconUri field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetIconUri() string {
	if o == nil || o.IconUri == nil {
		var ret string
		return ret
	}
	return *o.IconUri
}

// GetIconUriOk returns a tuple with the IconUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetIconUriOk() (*string, bool) {
	if o == nil || o.IconUri == nil {
		return nil, false
	}
	return o.IconUri, true
}

// HasIconUri returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasIconUri() bool {
	if o != nil && o.IconUri != nil {
		return true
	}

	return false
}

// SetIconUri gets a reference to the given string and assigns it to the IconUri field.
func (o *base_BTFeatureSpec129) SetIconUri(v string) {
	o.IconUri = &v
}

// GetLanguageVersion returns the LanguageVersion field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetLanguageVersion() int32 {
	if o == nil || o.LanguageVersion == nil {
		var ret int32
		return ret
	}
	return *o.LanguageVersion
}

// GetLanguageVersionOk returns a tuple with the LanguageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetLanguageVersionOk() (*int32, bool) {
	if o == nil || o.LanguageVersion == nil {
		return nil, false
	}
	return o.LanguageVersion, true
}

// HasLanguageVersion returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasLanguageVersion() bool {
	if o != nil && o.LanguageVersion != nil {
		return true
	}

	return false
}

// SetLanguageVersion gets a reference to the given int32 and assigns it to the LanguageVersion field.
func (o *base_BTFeatureSpec129) SetLanguageVersion(v int32) {
	o.LanguageVersion = &v
}

// GetLinkedLocationName returns the LinkedLocationName field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetLinkedLocationName() string {
	if o == nil || o.LinkedLocationName == nil {
		var ret string
		return ret
	}
	return *o.LinkedLocationName
}

// GetLinkedLocationNameOk returns a tuple with the LinkedLocationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetLinkedLocationNameOk() (*string, bool) {
	if o == nil || o.LinkedLocationName == nil {
		return nil, false
	}
	return o.LinkedLocationName, true
}

// HasLinkedLocationName returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasLinkedLocationName() bool {
	if o != nil && o.LinkedLocationName != nil {
		return true
	}

	return false
}

// SetLinkedLocationName gets a reference to the given string and assigns it to the LinkedLocationName field.
func (o *base_BTFeatureSpec129) SetLinkedLocationName(v string) {
	o.LinkedLocationName = &v
}

// GetLocalizableName returns the LocalizableName field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetLocalizableName() string {
	if o == nil || o.LocalizableName == nil {
		var ret string
		return ret
	}
	return *o.LocalizableName
}

// GetLocalizableNameOk returns a tuple with the LocalizableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetLocalizableNameOk() (*string, bool) {
	if o == nil || o.LocalizableName == nil {
		return nil, false
	}
	return o.LocalizableName, true
}

// HasLocalizableName returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasLocalizableName() bool {
	if o != nil && o.LocalizableName != nil {
		return true
	}

	return false
}

// SetLocalizableName gets a reference to the given string and assigns it to the LocalizableName field.
func (o *base_BTFeatureSpec129) SetLocalizableName(v string) {
	o.LocalizableName = &v
}

// GetLocalizedName returns the LocalizedName field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetLocalizedName() string {
	if o == nil || o.LocalizedName == nil {
		var ret string
		return ret
	}
	return *o.LocalizedName
}

// GetLocalizedNameOk returns a tuple with the LocalizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetLocalizedNameOk() (*string, bool) {
	if o == nil || o.LocalizedName == nil {
		return nil, false
	}
	return o.LocalizedName, true
}

// HasLocalizedName returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasLocalizedName() bool {
	if o != nil && o.LocalizedName != nil {
		return true
	}

	return false
}

// SetLocalizedName gets a reference to the given string and assigns it to the LocalizedName field.
func (o *base_BTFeatureSpec129) SetLocalizedName(v string) {
	o.LocalizedName = &v
}

// GetLocationInfos returns the LocationInfos field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetLocationInfos() []BTLocationInfo226 {
	if o == nil || o.LocationInfos == nil {
		var ret []BTLocationInfo226
		return ret
	}
	return o.LocationInfos
}

// GetLocationInfosOk returns a tuple with the LocationInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetLocationInfosOk() ([]BTLocationInfo226, bool) {
	if o == nil || o.LocationInfos == nil {
		return nil, false
	}
	return o.LocationInfos, true
}

// HasLocationInfos returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasLocationInfos() bool {
	if o != nil && o.LocationInfos != nil {
		return true
	}

	return false
}

// SetLocationInfos gets a reference to the given []BTLocationInfo226 and assigns it to the LocationInfos field.
func (o *base_BTFeatureSpec129) SetLocationInfos(v []BTLocationInfo226) {
	o.LocationInfos = v
}

// GetManipulatorChangeFunction returns the ManipulatorChangeFunction field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetManipulatorChangeFunction() string {
	if o == nil || o.ManipulatorChangeFunction == nil {
		var ret string
		return ret
	}
	return *o.ManipulatorChangeFunction
}

// GetManipulatorChangeFunctionOk returns a tuple with the ManipulatorChangeFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetManipulatorChangeFunctionOk() (*string, bool) {
	if o == nil || o.ManipulatorChangeFunction == nil {
		return nil, false
	}
	return o.ManipulatorChangeFunction, true
}

// HasManipulatorChangeFunction returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasManipulatorChangeFunction() bool {
	if o != nil && o.ManipulatorChangeFunction != nil {
		return true
	}

	return false
}

// SetManipulatorChangeFunction gets a reference to the given string and assigns it to the ManipulatorChangeFunction field.
func (o *base_BTFeatureSpec129) SetManipulatorChangeFunction(v string) {
	o.ManipulatorChangeFunction = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *base_BTFeatureSpec129) SetNamespace(v string) {
	o.Namespace = &v
}

// GetNamespaceIncludingEnums returns the NamespaceIncludingEnums field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetNamespaceIncludingEnums() string {
	if o == nil || o.NamespaceIncludingEnums == nil {
		var ret string
		return ret
	}
	return *o.NamespaceIncludingEnums
}

// GetNamespaceIncludingEnumsOk returns a tuple with the NamespaceIncludingEnums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetNamespaceIncludingEnumsOk() (*string, bool) {
	if o == nil || o.NamespaceIncludingEnums == nil {
		return nil, false
	}
	return o.NamespaceIncludingEnums, true
}

// HasNamespaceIncludingEnums returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasNamespaceIncludingEnums() bool {
	if o != nil && o.NamespaceIncludingEnums != nil {
		return true
	}

	return false
}

// SetNamespaceIncludingEnums gets a reference to the given string and assigns it to the NamespaceIncludingEnums field.
func (o *base_BTFeatureSpec129) SetNamespaceIncludingEnums(v string) {
	o.NamespaceIncludingEnums = &v
}

// GetNamespaceTheSource returns the NamespaceTheSource field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetNamespaceTheSource() bool {
	if o == nil || o.NamespaceTheSource == nil {
		var ret bool
		return ret
	}
	return *o.NamespaceTheSource
}

// GetNamespaceTheSourceOk returns a tuple with the NamespaceTheSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetNamespaceTheSourceOk() (*bool, bool) {
	if o == nil || o.NamespaceTheSource == nil {
		return nil, false
	}
	return o.NamespaceTheSource, true
}

// HasNamespaceTheSource returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasNamespaceTheSource() bool {
	if o != nil && o.NamespaceTheSource != nil {
		return true
	}

	return false
}

// SetNamespaceTheSource gets a reference to the given bool and assigns it to the NamespaceTheSource field.
func (o *base_BTFeatureSpec129) SetNamespaceTheSource(v bool) {
	o.NamespaceTheSource = &v
}

// GetParameterIdToSpec returns the ParameterIdToSpec field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetParameterIdToSpec() map[string]BTParameterSpec6 {
	if o == nil || o.ParameterIdToSpec == nil {
		var ret map[string]BTParameterSpec6
		return ret
	}
	return *o.ParameterIdToSpec
}

// GetParameterIdToSpecOk returns a tuple with the ParameterIdToSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetParameterIdToSpecOk() (*map[string]BTParameterSpec6, bool) {
	if o == nil || o.ParameterIdToSpec == nil {
		return nil, false
	}
	return o.ParameterIdToSpec, true
}

// HasParameterIdToSpec returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasParameterIdToSpec() bool {
	if o != nil && o.ParameterIdToSpec != nil {
		return true
	}

	return false
}

// SetParameterIdToSpec gets a reference to the given map[string]BTParameterSpec6 and assigns it to the ParameterIdToSpec field.
func (o *base_BTFeatureSpec129) SetParameterIdToSpec(v map[string]BTParameterSpec6) {
	o.ParameterIdToSpec = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetParameters() []BTParameterSpec6 {
	if o == nil || o.Parameters == nil {
		var ret []BTParameterSpec6
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetParametersOk() ([]BTParameterSpec6, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []BTParameterSpec6 and assigns it to the Parameters field.
func (o *base_BTFeatureSpec129) SetParameters(v []BTParameterSpec6) {
	o.Parameters = v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetSignature() string {
	if o == nil || o.Signature == nil {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetSignatureOk() (*string, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *base_BTFeatureSpec129) SetSignature(v string) {
	o.Signature = &v
}

// GetSourceLocation returns the SourceLocation field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetSourceLocation() BTLocationInfo226 {
	if o == nil || o.SourceLocation == nil {
		var ret BTLocationInfo226
		return ret
	}
	return *o.SourceLocation
}

// GetSourceLocationOk returns a tuple with the SourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetSourceLocationOk() (*BTLocationInfo226, bool) {
	if o == nil || o.SourceLocation == nil {
		return nil, false
	}
	return o.SourceLocation, true
}

// HasSourceLocation returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasSourceLocation() bool {
	if o != nil && o.SourceLocation != nil {
		return true
	}

	return false
}

// SetSourceLocation gets a reference to the given BTLocationInfo226 and assigns it to the SourceLocation field.
func (o *base_BTFeatureSpec129) SetSourceLocation(v BTLocationInfo226) {
	o.SourceLocation = &v
}

// GetSourceMicroversionId returns the SourceMicroversionId field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetSourceMicroversionId() string {
	if o == nil || o.SourceMicroversionId == nil {
		var ret string
		return ret
	}
	return *o.SourceMicroversionId
}

// GetSourceMicroversionIdOk returns a tuple with the SourceMicroversionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetSourceMicroversionIdOk() (*string, bool) {
	if o == nil || o.SourceMicroversionId == nil {
		return nil, false
	}
	return o.SourceMicroversionId, true
}

// HasSourceMicroversionId returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasSourceMicroversionId() bool {
	if o != nil && o.SourceMicroversionId != nil {
		return true
	}

	return false
}

// SetSourceMicroversionId gets a reference to the given string and assigns it to the SourceMicroversionId field.
func (o *base_BTFeatureSpec129) SetSourceMicroversionId(v string) {
	o.SourceMicroversionId = &v
}

// GetStringsToLocalize returns the StringsToLocalize field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetStringsToLocalize() []string {
	if o == nil || o.StringsToLocalize == nil {
		var ret []string
		return ret
	}
	return o.StringsToLocalize
}

// GetStringsToLocalizeOk returns a tuple with the StringsToLocalize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetStringsToLocalizeOk() ([]string, bool) {
	if o == nil || o.StringsToLocalize == nil {
		return nil, false
	}
	return o.StringsToLocalize, true
}

// HasStringsToLocalize returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasStringsToLocalize() bool {
	if o != nil && o.StringsToLocalize != nil {
		return true
	}

	return false
}

// SetStringsToLocalize gets a reference to the given []string and assigns it to the StringsToLocalize field.
func (o *base_BTFeatureSpec129) SetStringsToLocalize(v []string) {
	o.StringsToLocalize = v
}

// GetTableSpec returns the TableSpec field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetTableSpec() bool {
	if o == nil || o.TableSpec == nil {
		var ret bool
		return ret
	}
	return *o.TableSpec
}

// GetTableSpecOk returns a tuple with the TableSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetTableSpecOk() (*bool, bool) {
	if o == nil || o.TableSpec == nil {
		return nil, false
	}
	return o.TableSpec, true
}

// HasTableSpec returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasTableSpec() bool {
	if o != nil && o.TableSpec != nil {
		return true
	}

	return false
}

// SetTableSpec gets a reference to the given bool and assigns it to the TableSpec field.
func (o *base_BTFeatureSpec129) SetTableSpec(v bool) {
	o.TableSpec = &v
}

// GetTooltipTemplate returns the TooltipTemplate field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetTooltipTemplate() string {
	if o == nil || o.TooltipTemplate == nil {
		var ret string
		return ret
	}
	return *o.TooltipTemplate
}

// GetTooltipTemplateOk returns a tuple with the TooltipTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetTooltipTemplateOk() (*string, bool) {
	if o == nil || o.TooltipTemplate == nil {
		return nil, false
	}
	return o.TooltipTemplate, true
}

// HasTooltipTemplate returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasTooltipTemplate() bool {
	if o != nil && o.TooltipTemplate != nil {
		return true
	}

	return false
}

// SetTooltipTemplate gets a reference to the given string and assigns it to the TooltipTemplate field.
func (o *base_BTFeatureSpec129) SetTooltipTemplate(v string) {
	o.TooltipTemplate = &v
}

// GetUiHints returns the UiHints field value if set, zero value otherwise.
func (o *base_BTFeatureSpec129) GetUiHints() []GBTUIHint {
	if o == nil || o.UiHints == nil {
		var ret []GBTUIHint
		return ret
	}
	return o.UiHints
}

// GetUiHintsOk returns a tuple with the UiHints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTFeatureSpec129) GetUiHintsOk() ([]GBTUIHint, bool) {
	if o == nil || o.UiHints == nil {
		return nil, false
	}
	return o.UiHints, true
}

// HasUiHints returns a boolean if a field has been set.
func (o *base_BTFeatureSpec129) HasUiHints() bool {
	if o != nil && o.UiHints != nil {
		return true
	}

	return false
}

// SetUiHints gets a reference to the given []GBTUIHint and assigns it to the UiHints field.
func (o *base_BTFeatureSpec129) SetUiHints(v []GBTUIHint) {
	o.UiHints = v
}

func (o base_BTFeatureSpec129) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalLocalizedStrings != nil {
		toSerialize["additionalLocalizedStrings"] = o.AdditionalLocalizedStrings
	}
	if o.AllParameters != nil {
		toSerialize["allParameters"] = o.AllParameters
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.ComputedPartPropertySpec != nil {
		toSerialize["computedPartPropertySpec"] = o.ComputedPartPropertySpec
	}
	if o.DescriptionImageUri != nil {
		toSerialize["descriptionImageUri"] = o.DescriptionImageUri
	}
	if o.EditingLogic != nil {
		toSerialize["editingLogic"] = o.EditingLogic
	}
	if o.FeatureNameTemplate != nil {
		toSerialize["featureNameTemplate"] = o.FeatureNameTemplate
	}
	if o.FeatureType != nil {
		toSerialize["featureType"] = o.FeatureType
	}
	if o.FeatureTypeDescription != nil {
		toSerialize["featureTypeDescription"] = o.FeatureTypeDescription
	}
	if o.FeatureTypeName != nil {
		toSerialize["featureTypeName"] = o.FeatureTypeName
	}
	if o.FilterSelectors != nil {
		toSerialize["filterSelectors"] = o.FilterSelectors
	}
	if o.FullFeatureType != nil {
		toSerialize["fullFeatureType"] = o.FullFeatureType
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.IconUri != nil {
		toSerialize["iconUri"] = o.IconUri
	}
	if o.LanguageVersion != nil {
		toSerialize["languageVersion"] = o.LanguageVersion
	}
	if o.LinkedLocationName != nil {
		toSerialize["linkedLocationName"] = o.LinkedLocationName
	}
	if o.LocalizableName != nil {
		toSerialize["localizableName"] = o.LocalizableName
	}
	if o.LocalizedName != nil {
		toSerialize["localizedName"] = o.LocalizedName
	}
	if o.LocationInfos != nil {
		toSerialize["locationInfos"] = o.LocationInfos
	}
	if o.ManipulatorChangeFunction != nil {
		toSerialize["manipulatorChangeFunction"] = o.ManipulatorChangeFunction
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.NamespaceIncludingEnums != nil {
		toSerialize["namespaceIncludingEnums"] = o.NamespaceIncludingEnums
	}
	if o.NamespaceTheSource != nil {
		toSerialize["namespaceTheSource"] = o.NamespaceTheSource
	}
	if o.ParameterIdToSpec != nil {
		toSerialize["parameterIdToSpec"] = o.ParameterIdToSpec
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Signature != nil {
		toSerialize["signature"] = o.Signature
	}
	if o.SourceLocation != nil {
		toSerialize["sourceLocation"] = o.SourceLocation
	}
	if o.SourceMicroversionId != nil {
		toSerialize["sourceMicroversionId"] = o.SourceMicroversionId
	}
	if o.StringsToLocalize != nil {
		toSerialize["stringsToLocalize"] = o.StringsToLocalize
	}
	if o.TableSpec != nil {
		toSerialize["tableSpec"] = o.TableSpec
	}
	if o.TooltipTemplate != nil {
		toSerialize["tooltipTemplate"] = o.TooltipTemplate
	}
	if o.UiHints != nil {
		toSerialize["uiHints"] = o.UiHints
	}
	return json.Marshal(toSerialize)
}

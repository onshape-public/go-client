/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTMSketchCurve4 - struct for BTMSketchCurve4
type BTMSketchCurve4 struct {
	implBTMSketchCurve4 interface{}
}

// BTMSketchCurveSegment155AsBTMSketchCurve4 is a convenience function that returns BTMSketchCurveSegment155 wrapped in BTMSketchCurve4
func (o *BTMSketchCurveSegment155) AsBTMSketchCurve4() *BTMSketchCurve4 {
	return &BTMSketchCurve4{o}
}

// NewBTMSketchCurve4 instantiates a new BTMSketchCurve4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMSketchCurve4() *BTMSketchCurve4 {
	this := BTMSketchCurve4{Newbase_BTMSketchCurve4()}
	return &this
}

// NewBTMSketchCurve4WithDefaults instantiates a new BTMSketchCurve4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMSketchCurve4WithDefaults() *BTMSketchCurve4 {
	this := BTMSketchCurve4{Newbase_BTMSketchCurve4WithDefaults()}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMSketchCurve4) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetImportMicroversion returns the ImportMicroversion field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetImportMicroversion() string {
	type getResult interface {
		GetImportMicroversion() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetImportMicroversion()
	} else {
		var de string
		return de
	}
}

// GetImportMicroversionOk returns a tuple with the ImportMicroversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetImportMicroversionOk() (*string, bool) {
	type getResult interface {
		GetImportMicroversionOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetImportMicroversionOk()
	} else {
		return nil, false
	}
}

// HasImportMicroversion returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasImportMicroversion() bool {
	type getResult interface {
		HasImportMicroversion() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasImportMicroversion()
	} else {
		return false
	}
}

// SetImportMicroversion gets a reference to the given string and assigns it to the ImportMicroversion field.
func (o *BTMSketchCurve4) SetImportMicroversion(v string) {
	type getResult interface {
		SetImportMicroversion(v string)
	}

	o.GetActualInstance().(getResult).SetImportMicroversion(v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetNodeId() string {
	type getResult interface {
		GetNodeId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeId()
	} else {
		var de string
		return de
	}
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetNodeIdOk() (*string, bool) {
	type getResult interface {
		GetNodeIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeIdOk()
	} else {
		return nil, false
	}
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasNodeId() bool {
	type getResult interface {
		HasNodeId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNodeId()
	} else {
		return false
	}
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTMSketchCurve4) SetNodeId(v string) {
	type getResult interface {
		SetNodeId(v string)
	}

	o.GetActualInstance().(getResult).SetNodeId(v)
}

// GetCombinedSketchEntityType returns the CombinedSketchEntityType field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetCombinedSketchEntityType() CombinedSketchEntityType {
	type getResult interface {
		GetCombinedSketchEntityType() CombinedSketchEntityType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCombinedSketchEntityType()
	} else {
		var de CombinedSketchEntityType
		return de
	}
}

// GetCombinedSketchEntityTypeOk returns a tuple with the CombinedSketchEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetCombinedSketchEntityTypeOk() (*CombinedSketchEntityType, bool) {
	type getResult interface {
		GetCombinedSketchEntityTypeOk() (*CombinedSketchEntityType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCombinedSketchEntityTypeOk()
	} else {
		return nil, false
	}
}

// HasCombinedSketchEntityType returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasCombinedSketchEntityType() bool {
	type getResult interface {
		HasCombinedSketchEntityType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasCombinedSketchEntityType()
	} else {
		return false
	}
}

// SetCombinedSketchEntityType gets a reference to the given CombinedSketchEntityType and assigns it to the CombinedSketchEntityType field.
func (o *BTMSketchCurve4) SetCombinedSketchEntityType(v CombinedSketchEntityType) {
	type getResult interface {
		SetCombinedSketchEntityType(v CombinedSketchEntityType)
	}

	o.GetActualInstance().(getResult).SetCombinedSketchEntityType(v)
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetEntityId() string {
	type getResult interface {
		GetEntityId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEntityId()
	} else {
		var de string
		return de
	}
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetEntityIdOk() (*string, bool) {
	type getResult interface {
		GetEntityIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEntityIdOk()
	} else {
		return nil, false
	}
}

// HasEntityId returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasEntityId() bool {
	type getResult interface {
		HasEntityId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEntityId()
	} else {
		return false
	}
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *BTMSketchCurve4) SetEntityId(v string) {
	type getResult interface {
		SetEntityId(v string)
	}

	o.GetActualInstance().(getResult).SetEntityId(v)
}

// GetEntityIdAndReplaceInDependentFields returns the EntityIdAndReplaceInDependentFields field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetEntityIdAndReplaceInDependentFields() string {
	type getResult interface {
		GetEntityIdAndReplaceInDependentFields() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEntityIdAndReplaceInDependentFields()
	} else {
		var de string
		return de
	}
}

// GetEntityIdAndReplaceInDependentFieldsOk returns a tuple with the EntityIdAndReplaceInDependentFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetEntityIdAndReplaceInDependentFieldsOk() (*string, bool) {
	type getResult interface {
		GetEntityIdAndReplaceInDependentFieldsOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEntityIdAndReplaceInDependentFieldsOk()
	} else {
		return nil, false
	}
}

// HasEntityIdAndReplaceInDependentFields returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasEntityIdAndReplaceInDependentFields() bool {
	type getResult interface {
		HasEntityIdAndReplaceInDependentFields() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEntityIdAndReplaceInDependentFields()
	} else {
		return false
	}
}

// SetEntityIdAndReplaceInDependentFields gets a reference to the given string and assigns it to the EntityIdAndReplaceInDependentFields field.
func (o *BTMSketchCurve4) SetEntityIdAndReplaceInDependentFields(v string) {
	type getResult interface {
		SetEntityIdAndReplaceInDependentFields(v string)
	}

	o.GetActualInstance().(getResult).SetEntityIdAndReplaceInDependentFields(v)
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetIndex() int32 {
	type getResult interface {
		GetIndex() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIndex()
	} else {
		var de int32
		return de
	}
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetIndexOk() (*int32, bool) {
	type getResult interface {
		GetIndexOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIndexOk()
	} else {
		return nil, false
	}
}

// HasIndex returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasIndex() bool {
	type getResult interface {
		HasIndex() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIndex()
	} else {
		return false
	}
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *BTMSketchCurve4) SetIndex(v int32) {
	type getResult interface {
		SetIndex(v int32)
	}

	o.GetActualInstance().(getResult).SetIndex(v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetName() string {
	type getResult interface {
		GetName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetName()
	} else {
		var de string
		return de
	}
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetNameOk() (*string, bool) {
	type getResult interface {
		GetNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNameOk()
	} else {
		return nil, false
	}
}

// HasName returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasName() bool {
	type getResult interface {
		HasName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasName()
	} else {
		return false
	}
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BTMSketchCurve4) SetName(v string) {
	type getResult interface {
		SetName(v string)
	}

	o.GetActualInstance().(getResult).SetName(v)
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetNamespace() string {
	type getResult interface {
		GetNamespace() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespace()
	} else {
		var de string
		return de
	}
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetNamespaceOk() (*string, bool) {
	type getResult interface {
		GetNamespaceOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespaceOk()
	} else {
		return nil, false
	}
}

// HasNamespace returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasNamespace() bool {
	type getResult interface {
		HasNamespace() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNamespace()
	} else {
		return false
	}
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *BTMSketchCurve4) SetNamespace(v string) {
	type getResult interface {
		SetNamespace(v string)
	}

	o.GetActualInstance().(getResult).SetNamespace(v)
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetParameters() []BTMParameter1 {
	type getResult interface {
		GetParameters() []BTMParameter1
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameters()
	} else {
		var de []BTMParameter1
		return de
	}
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetParametersOk() ([]BTMParameter1, bool) {
	type getResult interface {
		GetParametersOk() ([]BTMParameter1, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParametersOk()
	} else {
		return nil, false
	}
}

// HasParameters returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasParameters() bool {
	type getResult interface {
		HasParameters() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasParameters()
	} else {
		return false
	}
}

// SetParameters gets a reference to the given []BTMParameter1 and assigns it to the Parameters field.
func (o *BTMSketchCurve4) SetParameters(v []BTMParameter1) {
	type getResult interface {
		SetParameters(v []BTMParameter1)
	}

	o.GetActualInstance().(getResult).SetParameters(v)
}

// GetControlBoxIds returns the ControlBoxIds field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetControlBoxIds() []string {
	type getResult interface {
		GetControlBoxIds() []string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetControlBoxIds()
	} else {
		var de []string
		return de
	}
}

// GetControlBoxIdsOk returns a tuple with the ControlBoxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetControlBoxIdsOk() ([]string, bool) {
	type getResult interface {
		GetControlBoxIdsOk() ([]string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetControlBoxIdsOk()
	} else {
		return nil, false
	}
}

// HasControlBoxIds returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasControlBoxIds() bool {
	type getResult interface {
		HasControlBoxIds() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasControlBoxIds()
	} else {
		return false
	}
}

// SetControlBoxIds gets a reference to the given []string and assigns it to the ControlBoxIds field.
func (o *BTMSketchCurve4) SetControlBoxIds(v []string) {
	type getResult interface {
		SetControlBoxIds(v []string)
	}

	o.GetActualInstance().(getResult).SetControlBoxIds(v)
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetEntityType() GBTSketchEntityType {
	type getResult interface {
		GetEntityType() GBTSketchEntityType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEntityType()
	} else {
		var de GBTSketchEntityType
		return de
	}
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetEntityTypeOk() (*GBTSketchEntityType, bool) {
	type getResult interface {
		GetEntityTypeOk() (*GBTSketchEntityType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEntityTypeOk()
	} else {
		return nil, false
	}
}

// HasEntityType returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasEntityType() bool {
	type getResult interface {
		HasEntityType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEntityType()
	} else {
		return false
	}
}

// SetEntityType gets a reference to the given GBTSketchEntityType and assigns it to the EntityType field.
func (o *BTMSketchCurve4) SetEntityType(v GBTSketchEntityType) {
	type getResult interface {
		SetEntityType(v GBTSketchEntityType)
	}

	o.GetActualInstance().(getResult).SetEntityType(v)
}

// GetFunctionName returns the FunctionName field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetFunctionName() string {
	type getResult interface {
		GetFunctionName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFunctionName()
	} else {
		var de string
		return de
	}
}

// GetFunctionNameOk returns a tuple with the FunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetFunctionNameOk() (*string, bool) {
	type getResult interface {
		GetFunctionNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFunctionNameOk()
	} else {
		return nil, false
	}
}

// HasFunctionName returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasFunctionName() bool {
	type getResult interface {
		HasFunctionName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFunctionName()
	} else {
		return false
	}
}

// SetFunctionName gets a reference to the given string and assigns it to the FunctionName field.
func (o *BTMSketchCurve4) SetFunctionName(v string) {
	type getResult interface {
		SetFunctionName(v string)
	}

	o.GetActualInstance().(getResult).SetFunctionName(v)
}

// GetIsConstruction returns the IsConstruction field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetIsConstruction() bool {
	type getResult interface {
		GetIsConstruction() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsConstruction()
	} else {
		var de bool
		return de
	}
}

// GetIsConstructionOk returns a tuple with the IsConstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetIsConstructionOk() (*bool, bool) {
	type getResult interface {
		GetIsConstructionOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsConstructionOk()
	} else {
		return nil, false
	}
}

// HasIsConstruction returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasIsConstruction() bool {
	type getResult interface {
		HasIsConstruction() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsConstruction()
	} else {
		return false
	}
}

// SetIsConstruction gets a reference to the given bool and assigns it to the IsConstruction field.
func (o *BTMSketchCurve4) SetIsConstruction(v bool) {
	type getResult interface {
		SetIsConstruction(v bool)
	}

	o.GetActualInstance().(getResult).SetIsConstruction(v)
}

// GetIsFromEndpointSplineHandle returns the IsFromEndpointSplineHandle field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetIsFromEndpointSplineHandle() bool {
	type getResult interface {
		GetIsFromEndpointSplineHandle() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsFromEndpointSplineHandle()
	} else {
		var de bool
		return de
	}
}

// GetIsFromEndpointSplineHandleOk returns a tuple with the IsFromEndpointSplineHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetIsFromEndpointSplineHandleOk() (*bool, bool) {
	type getResult interface {
		GetIsFromEndpointSplineHandleOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsFromEndpointSplineHandleOk()
	} else {
		return nil, false
	}
}

// HasIsFromEndpointSplineHandle returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasIsFromEndpointSplineHandle() bool {
	type getResult interface {
		HasIsFromEndpointSplineHandle() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsFromEndpointSplineHandle()
	} else {
		return false
	}
}

// SetIsFromEndpointSplineHandle gets a reference to the given bool and assigns it to the IsFromEndpointSplineHandle field.
func (o *BTMSketchCurve4) SetIsFromEndpointSplineHandle(v bool) {
	type getResult interface {
		SetIsFromEndpointSplineHandle(v bool)
	}

	o.GetActualInstance().(getResult).SetIsFromEndpointSplineHandle(v)
}

// GetIsFromSplineControlPolygon returns the IsFromSplineControlPolygon field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetIsFromSplineControlPolygon() bool {
	type getResult interface {
		GetIsFromSplineControlPolygon() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsFromSplineControlPolygon()
	} else {
		var de bool
		return de
	}
}

// GetIsFromSplineControlPolygonOk returns a tuple with the IsFromSplineControlPolygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetIsFromSplineControlPolygonOk() (*bool, bool) {
	type getResult interface {
		GetIsFromSplineControlPolygonOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsFromSplineControlPolygonOk()
	} else {
		return nil, false
	}
}

// HasIsFromSplineControlPolygon returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasIsFromSplineControlPolygon() bool {
	type getResult interface {
		HasIsFromSplineControlPolygon() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsFromSplineControlPolygon()
	} else {
		return false
	}
}

// SetIsFromSplineControlPolygon gets a reference to the given bool and assigns it to the IsFromSplineControlPolygon field.
func (o *BTMSketchCurve4) SetIsFromSplineControlPolygon(v bool) {
	type getResult interface {
		SetIsFromSplineControlPolygon(v bool)
	}

	o.GetActualInstance().(getResult).SetIsFromSplineControlPolygon(v)
}

// GetIsFromSplineHandle returns the IsFromSplineHandle field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetIsFromSplineHandle() bool {
	type getResult interface {
		GetIsFromSplineHandle() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsFromSplineHandle()
	} else {
		var de bool
		return de
	}
}

// GetIsFromSplineHandleOk returns a tuple with the IsFromSplineHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetIsFromSplineHandleOk() (*bool, bool) {
	type getResult interface {
		GetIsFromSplineHandleOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsFromSplineHandleOk()
	} else {
		return nil, false
	}
}

// HasIsFromSplineHandle returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasIsFromSplineHandle() bool {
	type getResult interface {
		HasIsFromSplineHandle() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsFromSplineHandle()
	} else {
		return false
	}
}

// SetIsFromSplineHandle gets a reference to the given bool and assigns it to the IsFromSplineHandle field.
func (o *BTMSketchCurve4) SetIsFromSplineHandle(v bool) {
	type getResult interface {
		SetIsFromSplineHandle(v bool)
	}

	o.GetActualInstance().(getResult).SetIsFromSplineHandle(v)
}

// GetCenterId returns the CenterId field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetCenterId() string {
	type getResult interface {
		GetCenterId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCenterId()
	} else {
		var de string
		return de
	}
}

// GetCenterIdOk returns a tuple with the CenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetCenterIdOk() (*string, bool) {
	type getResult interface {
		GetCenterIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCenterIdOk()
	} else {
		return nil, false
	}
}

// HasCenterId returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasCenterId() bool {
	type getResult interface {
		HasCenterId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasCenterId()
	} else {
		return false
	}
}

// SetCenterId gets a reference to the given string and assigns it to the CenterId field.
func (o *BTMSketchCurve4) SetCenterId(v string) {
	type getResult interface {
		SetCenterId(v string)
	}

	o.GetActualInstance().(getResult).SetCenterId(v)
}

// GetInternalIds returns the InternalIds field value if set, zero value otherwise.
func (o *BTMSketchCurve4) GetInternalIds() []string {
	type getResult interface {
		GetInternalIds() []string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetInternalIds()
	} else {
		var de []string
		return de
	}
}

// GetInternalIdsOk returns a tuple with the InternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketchCurve4) GetInternalIdsOk() ([]string, bool) {
	type getResult interface {
		GetInternalIdsOk() ([]string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetInternalIdsOk()
	} else {
		return nil, false
	}
}

// HasInternalIds returns a boolean if a field has been set.
func (o *BTMSketchCurve4) HasInternalIds() bool {
	type getResult interface {
		HasInternalIds() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasInternalIds()
	} else {
		return false
	}
}

// SetInternalIds gets a reference to the given []string and assigns it to the InternalIds field.
func (o *BTMSketchCurve4) SetInternalIds(v []string) {
	type getResult interface {
		SetInternalIds(v []string)
	}

	o.GetActualInstance().(getResult).SetInternalIds(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTMSketchCurve4) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTMSketchCurveSegment-155'
	if jsonDict["btType"] == "BTMSketchCurveSegment-155" {
		// try to unmarshal JSON data into BTMSketchCurveSegment155
		var qr *BTMSketchCurveSegment155
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMSketchCurve4 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMSketchCurve4 = nil
			return fmt.Errorf("failed to unmarshal BTMSketchCurve4 as BTMSketchCurveSegment155: %s", err.Error())
		}
	}

	var qtx *base_BTMSketchCurve4
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTMSketchCurve4 = qtx
		return nil // data stored in dst.base_BTMSketchCurve4, return on the first match
	} else {
		dst.implBTMSketchCurve4 = nil
		return fmt.Errorf("failed to unmarshal BTMSketchCurve4 as base_BTMSketchCurve4: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTMSketchCurve4) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTMSketchCurve4) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTMSketchCurve4
}

type NullableBTMSketchCurve4 struct {
	value *BTMSketchCurve4
	isSet bool
}

func (v NullableBTMSketchCurve4) Get() *BTMSketchCurve4 {
	return v.value
}

func (v *NullableBTMSketchCurve4) Set(val *BTMSketchCurve4) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMSketchCurve4) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMSketchCurve4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMSketchCurve4(val *BTMSketchCurve4) *NullableBTMSketchCurve4 {
	return &NullableBTMSketchCurve4{value: val, isSet: true}
}

func (v NullableBTMSketchCurve4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMSketchCurve4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTMSketchCurve4 struct {
	BTMSketchGeomEntity5
	BtType *string `json:"btType,omitempty"`
	// Element microversion that is being imported.
	ImportMicroversion                  *string                   `json:"importMicroversion,omitempty"`
	NodeId                              *string                   `json:"nodeId,omitempty"`
	CombinedSketchEntityType            *CombinedSketchEntityType `json:"combinedSketchEntityType,omitempty"`
	EntityId                            *string                   `json:"entityId,omitempty"`
	EntityIdAndReplaceInDependentFields *string                   `json:"entityIdAndReplaceInDependentFields,omitempty"`
	Index                               *int32                    `json:"index,omitempty"`
	Name                                *string                   `json:"name,omitempty"`
	Namespace                           *string                   `json:"namespace,omitempty"`
	Parameters                          []BTMParameter1           `json:"parameters,omitempty"`
	ControlBoxIds                       []string                  `json:"controlBoxIds,omitempty"`
	EntityType                          *GBTSketchEntityType      `json:"entityType,omitempty"`
	FunctionName                        *string                   `json:"functionName,omitempty"`
	IsConstruction                      *bool                     `json:"isConstruction,omitempty"`
	IsFromEndpointSplineHandle          *bool                     `json:"isFromEndpointSplineHandle,omitempty"`
	IsFromSplineControlPolygon          *bool                     `json:"isFromSplineControlPolygon,omitempty"`
	IsFromSplineHandle                  *bool                     `json:"isFromSplineHandle,omitempty"`
	CenterId                            *string                   `json:"centerId,omitempty"`
	InternalIds                         []string                  `json:"internalIds,omitempty"`
}

// Newbase_BTMSketchCurve4 instantiates a new base_BTMSketchCurve4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTMSketchCurve4() *base_BTMSketchCurve4 {
	this := base_BTMSketchCurve4{}
	return &this
}

// Newbase_BTMSketchCurve4WithDefaults instantiates a new base_BTMSketchCurve4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTMSketchCurve4WithDefaults() *base_BTMSketchCurve4 {
	this := base_BTMSketchCurve4{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTMSketchCurve4) SetBtType(v string) {
	o.BtType = &v
}

// GetImportMicroversion returns the ImportMicroversion field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetImportMicroversion() string {
	if o == nil || o.ImportMicroversion == nil {
		var ret string
		return ret
	}
	return *o.ImportMicroversion
}

// GetImportMicroversionOk returns a tuple with the ImportMicroversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetImportMicroversionOk() (*string, bool) {
	if o == nil || o.ImportMicroversion == nil {
		return nil, false
	}
	return o.ImportMicroversion, true
}

// HasImportMicroversion returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasImportMicroversion() bool {
	if o != nil && o.ImportMicroversion != nil {
		return true
	}

	return false
}

// SetImportMicroversion gets a reference to the given string and assigns it to the ImportMicroversion field.
func (o *base_BTMSketchCurve4) SetImportMicroversion(v string) {
	o.ImportMicroversion = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *base_BTMSketchCurve4) SetNodeId(v string) {
	o.NodeId = &v
}

// GetCombinedSketchEntityType returns the CombinedSketchEntityType field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetCombinedSketchEntityType() CombinedSketchEntityType {
	if o == nil || o.CombinedSketchEntityType == nil {
		var ret CombinedSketchEntityType
		return ret
	}
	return *o.CombinedSketchEntityType
}

// GetCombinedSketchEntityTypeOk returns a tuple with the CombinedSketchEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetCombinedSketchEntityTypeOk() (*CombinedSketchEntityType, bool) {
	if o == nil || o.CombinedSketchEntityType == nil {
		return nil, false
	}
	return o.CombinedSketchEntityType, true
}

// HasCombinedSketchEntityType returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasCombinedSketchEntityType() bool {
	if o != nil && o.CombinedSketchEntityType != nil {
		return true
	}

	return false
}

// SetCombinedSketchEntityType gets a reference to the given CombinedSketchEntityType and assigns it to the CombinedSketchEntityType field.
func (o *base_BTMSketchCurve4) SetCombinedSketchEntityType(v CombinedSketchEntityType) {
	o.CombinedSketchEntityType = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetEntityId() string {
	if o == nil || o.EntityId == nil {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetEntityIdOk() (*string, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *base_BTMSketchCurve4) SetEntityId(v string) {
	o.EntityId = &v
}

// GetEntityIdAndReplaceInDependentFields returns the EntityIdAndReplaceInDependentFields field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetEntityIdAndReplaceInDependentFields() string {
	if o == nil || o.EntityIdAndReplaceInDependentFields == nil {
		var ret string
		return ret
	}
	return *o.EntityIdAndReplaceInDependentFields
}

// GetEntityIdAndReplaceInDependentFieldsOk returns a tuple with the EntityIdAndReplaceInDependentFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetEntityIdAndReplaceInDependentFieldsOk() (*string, bool) {
	if o == nil || o.EntityIdAndReplaceInDependentFields == nil {
		return nil, false
	}
	return o.EntityIdAndReplaceInDependentFields, true
}

// HasEntityIdAndReplaceInDependentFields returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasEntityIdAndReplaceInDependentFields() bool {
	if o != nil && o.EntityIdAndReplaceInDependentFields != nil {
		return true
	}

	return false
}

// SetEntityIdAndReplaceInDependentFields gets a reference to the given string and assigns it to the EntityIdAndReplaceInDependentFields field.
func (o *base_BTMSketchCurve4) SetEntityIdAndReplaceInDependentFields(v string) {
	o.EntityIdAndReplaceInDependentFields = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetIndexOk() (*int32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *base_BTMSketchCurve4) SetIndex(v int32) {
	o.Index = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *base_BTMSketchCurve4) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *base_BTMSketchCurve4) SetNamespace(v string) {
	o.Namespace = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetParameters() []BTMParameter1 {
	if o == nil || o.Parameters == nil {
		var ret []BTMParameter1
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetParametersOk() ([]BTMParameter1, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []BTMParameter1 and assigns it to the Parameters field.
func (o *base_BTMSketchCurve4) SetParameters(v []BTMParameter1) {
	o.Parameters = v
}

// GetControlBoxIds returns the ControlBoxIds field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetControlBoxIds() []string {
	if o == nil || o.ControlBoxIds == nil {
		var ret []string
		return ret
	}
	return o.ControlBoxIds
}

// GetControlBoxIdsOk returns a tuple with the ControlBoxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetControlBoxIdsOk() ([]string, bool) {
	if o == nil || o.ControlBoxIds == nil {
		return nil, false
	}
	return o.ControlBoxIds, true
}

// HasControlBoxIds returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasControlBoxIds() bool {
	if o != nil && o.ControlBoxIds != nil {
		return true
	}

	return false
}

// SetControlBoxIds gets a reference to the given []string and assigns it to the ControlBoxIds field.
func (o *base_BTMSketchCurve4) SetControlBoxIds(v []string) {
	o.ControlBoxIds = v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetEntityType() GBTSketchEntityType {
	if o == nil || o.EntityType == nil {
		var ret GBTSketchEntityType
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetEntityTypeOk() (*GBTSketchEntityType, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given GBTSketchEntityType and assigns it to the EntityType field.
func (o *base_BTMSketchCurve4) SetEntityType(v GBTSketchEntityType) {
	o.EntityType = &v
}

// GetFunctionName returns the FunctionName field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetFunctionName() string {
	if o == nil || o.FunctionName == nil {
		var ret string
		return ret
	}
	return *o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetFunctionNameOk() (*string, bool) {
	if o == nil || o.FunctionName == nil {
		return nil, false
	}
	return o.FunctionName, true
}

// HasFunctionName returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasFunctionName() bool {
	if o != nil && o.FunctionName != nil {
		return true
	}

	return false
}

// SetFunctionName gets a reference to the given string and assigns it to the FunctionName field.
func (o *base_BTMSketchCurve4) SetFunctionName(v string) {
	o.FunctionName = &v
}

// GetIsConstruction returns the IsConstruction field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetIsConstruction() bool {
	if o == nil || o.IsConstruction == nil {
		var ret bool
		return ret
	}
	return *o.IsConstruction
}

// GetIsConstructionOk returns a tuple with the IsConstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetIsConstructionOk() (*bool, bool) {
	if o == nil || o.IsConstruction == nil {
		return nil, false
	}
	return o.IsConstruction, true
}

// HasIsConstruction returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasIsConstruction() bool {
	if o != nil && o.IsConstruction != nil {
		return true
	}

	return false
}

// SetIsConstruction gets a reference to the given bool and assigns it to the IsConstruction field.
func (o *base_BTMSketchCurve4) SetIsConstruction(v bool) {
	o.IsConstruction = &v
}

// GetIsFromEndpointSplineHandle returns the IsFromEndpointSplineHandle field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetIsFromEndpointSplineHandle() bool {
	if o == nil || o.IsFromEndpointSplineHandle == nil {
		var ret bool
		return ret
	}
	return *o.IsFromEndpointSplineHandle
}

// GetIsFromEndpointSplineHandleOk returns a tuple with the IsFromEndpointSplineHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetIsFromEndpointSplineHandleOk() (*bool, bool) {
	if o == nil || o.IsFromEndpointSplineHandle == nil {
		return nil, false
	}
	return o.IsFromEndpointSplineHandle, true
}

// HasIsFromEndpointSplineHandle returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasIsFromEndpointSplineHandle() bool {
	if o != nil && o.IsFromEndpointSplineHandle != nil {
		return true
	}

	return false
}

// SetIsFromEndpointSplineHandle gets a reference to the given bool and assigns it to the IsFromEndpointSplineHandle field.
func (o *base_BTMSketchCurve4) SetIsFromEndpointSplineHandle(v bool) {
	o.IsFromEndpointSplineHandle = &v
}

// GetIsFromSplineControlPolygon returns the IsFromSplineControlPolygon field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetIsFromSplineControlPolygon() bool {
	if o == nil || o.IsFromSplineControlPolygon == nil {
		var ret bool
		return ret
	}
	return *o.IsFromSplineControlPolygon
}

// GetIsFromSplineControlPolygonOk returns a tuple with the IsFromSplineControlPolygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetIsFromSplineControlPolygonOk() (*bool, bool) {
	if o == nil || o.IsFromSplineControlPolygon == nil {
		return nil, false
	}
	return o.IsFromSplineControlPolygon, true
}

// HasIsFromSplineControlPolygon returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasIsFromSplineControlPolygon() bool {
	if o != nil && o.IsFromSplineControlPolygon != nil {
		return true
	}

	return false
}

// SetIsFromSplineControlPolygon gets a reference to the given bool and assigns it to the IsFromSplineControlPolygon field.
func (o *base_BTMSketchCurve4) SetIsFromSplineControlPolygon(v bool) {
	o.IsFromSplineControlPolygon = &v
}

// GetIsFromSplineHandle returns the IsFromSplineHandle field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetIsFromSplineHandle() bool {
	if o == nil || o.IsFromSplineHandle == nil {
		var ret bool
		return ret
	}
	return *o.IsFromSplineHandle
}

// GetIsFromSplineHandleOk returns a tuple with the IsFromSplineHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetIsFromSplineHandleOk() (*bool, bool) {
	if o == nil || o.IsFromSplineHandle == nil {
		return nil, false
	}
	return o.IsFromSplineHandle, true
}

// HasIsFromSplineHandle returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasIsFromSplineHandle() bool {
	if o != nil && o.IsFromSplineHandle != nil {
		return true
	}

	return false
}

// SetIsFromSplineHandle gets a reference to the given bool and assigns it to the IsFromSplineHandle field.
func (o *base_BTMSketchCurve4) SetIsFromSplineHandle(v bool) {
	o.IsFromSplineHandle = &v
}

// GetCenterId returns the CenterId field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetCenterId() string {
	if o == nil || o.CenterId == nil {
		var ret string
		return ret
	}
	return *o.CenterId
}

// GetCenterIdOk returns a tuple with the CenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetCenterIdOk() (*string, bool) {
	if o == nil || o.CenterId == nil {
		return nil, false
	}
	return o.CenterId, true
}

// HasCenterId returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasCenterId() bool {
	if o != nil && o.CenterId != nil {
		return true
	}

	return false
}

// SetCenterId gets a reference to the given string and assigns it to the CenterId field.
func (o *base_BTMSketchCurve4) SetCenterId(v string) {
	o.CenterId = &v
}

// GetInternalIds returns the InternalIds field value if set, zero value otherwise.
func (o *base_BTMSketchCurve4) GetInternalIds() []string {
	if o == nil || o.InternalIds == nil {
		var ret []string
		return ret
	}
	return o.InternalIds
}

// GetInternalIdsOk returns a tuple with the InternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMSketchCurve4) GetInternalIdsOk() ([]string, bool) {
	if o == nil || o.InternalIds == nil {
		return nil, false
	}
	return o.InternalIds, true
}

// HasInternalIds returns a boolean if a field has been set.
func (o *base_BTMSketchCurve4) HasInternalIds() bool {
	if o != nil && o.InternalIds != nil {
		return true
	}

	return false
}

// SetInternalIds gets a reference to the given []string and assigns it to the InternalIds field.
func (o *base_BTMSketchCurve4) SetInternalIds(v []string) {
	o.InternalIds = v
}

func (o base_BTMSketchCurve4) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMSketchGeomEntity5, errBTMSketchGeomEntity5 := json.Marshal(o.BTMSketchGeomEntity5)
	if errBTMSketchGeomEntity5 != nil {
		return []byte{}, errBTMSketchGeomEntity5
	}
	errBTMSketchGeomEntity5 = json.Unmarshal([]byte(serializedBTMSketchGeomEntity5), &toSerialize)
	if errBTMSketchGeomEntity5 != nil {
		return []byte{}, errBTMSketchGeomEntity5
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.ImportMicroversion != nil {
		toSerialize["importMicroversion"] = o.ImportMicroversion
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.CombinedSketchEntityType != nil {
		toSerialize["combinedSketchEntityType"] = o.CombinedSketchEntityType
	}
	if o.EntityId != nil {
		toSerialize["entityId"] = o.EntityId
	}
	if o.EntityIdAndReplaceInDependentFields != nil {
		toSerialize["entityIdAndReplaceInDependentFields"] = o.EntityIdAndReplaceInDependentFields
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.ControlBoxIds != nil {
		toSerialize["controlBoxIds"] = o.ControlBoxIds
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.FunctionName != nil {
		toSerialize["functionName"] = o.FunctionName
	}
	if o.IsConstruction != nil {
		toSerialize["isConstruction"] = o.IsConstruction
	}
	if o.IsFromEndpointSplineHandle != nil {
		toSerialize["isFromEndpointSplineHandle"] = o.IsFromEndpointSplineHandle
	}
	if o.IsFromSplineControlPolygon != nil {
		toSerialize["isFromSplineControlPolygon"] = o.IsFromSplineControlPolygon
	}
	if o.IsFromSplineHandle != nil {
		toSerialize["isFromSplineHandle"] = o.IsFromSplineHandle
	}
	if o.CenterId != nil {
		toSerialize["centerId"] = o.CenterId
	}
	if o.InternalIds != nil {
		toSerialize["internalIds"] = o.InternalIds
	}
	return json.Marshal(toSerialize)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTMFeature134 - struct for BTMFeature134
type BTMFeature134 struct {
	implBTMFeature134 interface{}
}

// BTMSketch151AsBTMFeature134 is a convenience function that returns BTMSketch151 wrapped in BTMFeature134
func (o *BTMSketch151) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMAssemblyFeatureFolder2543AsBTMFeature134 is a convenience function that returns BTMAssemblyFeatureFolder2543 wrapped in BTMFeature134
func (o *BTMAssemblyFeatureFolder2543) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMMateConnector66AsBTMFeature134 is a convenience function that returns BTMMateConnector66 wrapped in BTMFeature134
func (o *BTMMateConnector66) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTAssemblySimulation2246AsBTMFeature134 is a convenience function that returns BTAssemblySimulation2246 wrapped in BTMFeature134
func (o *BTAssemblySimulation2246) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMAssemblyFeature21022AsBTMFeature134 is a convenience function that returns BTMAssemblyFeature21022 wrapped in BTMFeature134
func (o *BTMAssemblyFeature21022) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMMate64AsBTMFeature134 is a convenience function that returns BTMMate64 wrapped in BTMFeature134
func (o *BTMMate64) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMAssemblyFeature12218AsBTMFeature134 is a convenience function that returns BTMAssemblyFeature12218 wrapped in BTMFeature134
func (o *BTMAssemblyFeature12218) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMMateRelation1412AsBTMFeature134 is a convenience function that returns BTMMateRelation1412 wrapped in BTMFeature134
func (o *BTMMateRelation1412) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMVariableStudioReference2764AsBTMFeature134 is a convenience function that returns BTMVariableStudioReference2764 wrapped in BTMFeature134
func (o *BTMVariableStudioReference2764) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMFeatureInvalid1031AsBTMFeature134 is a convenience function that returns BTMFeatureInvalid1031 wrapped in BTMFeature134
func (o *BTMFeatureInvalid1031) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTExplosion2754AsBTMFeature134 is a convenience function that returns BTExplosion2754 wrapped in BTMFeature134
func (o *BTExplosion2754) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTExplosionStepFeature3008AsBTMFeature134 is a convenience function that returns BTExplosionStepFeature3008 wrapped in BTMFeature134
func (o *BTExplosionStepFeature3008) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMGenerativeDesignFeature3195AsBTMFeature134 is a convenience function that returns BTMGenerativeDesignFeature3195 wrapped in BTMFeature134
func (o *BTMGenerativeDesignFeature3195) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMAssemblyFeature887AsBTMFeature134 is a convenience function that returns BTMAssemblyFeature887 wrapped in BTMFeature134
func (o *BTMAssemblyFeature887) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMLoad3538AsBTMFeature134 is a convenience function that returns BTMLoad3538 wrapped in BTMFeature134
func (o *BTMLoad3538) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMMateGroup65AsBTMFeature134 is a convenience function that returns BTMMateGroup65 wrapped in BTMFeature134
func (o *BTMMateGroup65) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMNonGeometricItem1864AsBTMFeature134 is a convenience function that returns BTMNonGeometricItem1864 wrapped in BTMFeature134
func (o *BTMNonGeometricItem1864) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// BTMGeometryMate1260AsBTMFeature134 is a convenience function that returns BTMGeometryMate1260 wrapped in BTMFeature134
func (o *BTMGeometryMate1260) AsBTMFeature134() *BTMFeature134 {
	return &BTMFeature134{o}
}

// NewBTMFeature134 instantiates a new BTMFeature134 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMFeature134() *BTMFeature134 {
	this := BTMFeature134{Newbase_BTMFeature134()}
	return &this
}

// NewBTMFeature134WithDefaults instantiates a new BTMFeature134 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMFeature134WithDefaults() *BTMFeature134 {
	this := BTMFeature134{Newbase_BTMFeature134WithDefaults()}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMFeature134) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMFeature134) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMFeature134) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *BTMFeature134) GetFeatureId() string {
	type getResult interface {
		GetFeatureId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureId()
	} else {
		var de string
		return de
	}
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetFeatureIdOk() (*string, bool) {
	type getResult interface {
		GetFeatureIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureIdOk()
	} else {
		return nil, false
	}
}

// HasFeatureId returns a boolean if a field has been set.
func (o *BTMFeature134) HasFeatureId() bool {
	type getResult interface {
		HasFeatureId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFeatureId()
	} else {
		return false
	}
}

// SetFeatureId gets a reference to the given string and assigns it to the FeatureId field.
func (o *BTMFeature134) SetFeatureId(v string) {
	type getResult interface {
		SetFeatureId(v string)
	}

	o.GetActualInstance().(getResult).SetFeatureId(v)
}

// GetFeatureType returns the FeatureType field value if set, zero value otherwise.
func (o *BTMFeature134) GetFeatureType() string {
	type getResult interface {
		GetFeatureType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureType()
	} else {
		var de string
		return de
	}
}

// GetFeatureTypeOk returns a tuple with the FeatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetFeatureTypeOk() (*string, bool) {
	type getResult interface {
		GetFeatureTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFeatureTypeOk()
	} else {
		return nil, false
	}
}

// HasFeatureType returns a boolean if a field has been set.
func (o *BTMFeature134) HasFeatureType() bool {
	type getResult interface {
		HasFeatureType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFeatureType()
	} else {
		return false
	}
}

// SetFeatureType gets a reference to the given string and assigns it to the FeatureType field.
func (o *BTMFeature134) SetFeatureType(v string) {
	type getResult interface {
		SetFeatureType(v string)
	}

	o.GetActualInstance().(getResult).SetFeatureType(v)
}

// GetImportMicroversion returns the ImportMicroversion field value if set, zero value otherwise.
func (o *BTMFeature134) GetImportMicroversion() string {
	type getResult interface {
		GetImportMicroversion() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetImportMicroversion()
	} else {
		var de string
		return de
	}
}

// GetImportMicroversionOk returns a tuple with the ImportMicroversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetImportMicroversionOk() (*string, bool) {
	type getResult interface {
		GetImportMicroversionOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetImportMicroversionOk()
	} else {
		return nil, false
	}
}

// HasImportMicroversion returns a boolean if a field has been set.
func (o *BTMFeature134) HasImportMicroversion() bool {
	type getResult interface {
		HasImportMicroversion() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasImportMicroversion()
	} else {
		return false
	}
}

// SetImportMicroversion gets a reference to the given string and assigns it to the ImportMicroversion field.
func (o *BTMFeature134) SetImportMicroversion(v string) {
	type getResult interface {
		SetImportMicroversion(v string)
	}

	o.GetActualInstance().(getResult).SetImportMicroversion(v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTMFeature134) GetName() string {
	type getResult interface {
		GetName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetName()
	} else {
		var de string
		return de
	}
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetNameOk() (*string, bool) {
	type getResult interface {
		GetNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNameOk()
	} else {
		return nil, false
	}
}

// HasName returns a boolean if a field has been set.
func (o *BTMFeature134) HasName() bool {
	type getResult interface {
		HasName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasName()
	} else {
		return false
	}
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BTMFeature134) SetName(v string) {
	type getResult interface {
		SetName(v string)
	}

	o.GetActualInstance().(getResult).SetName(v)
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *BTMFeature134) GetNamespace() string {
	type getResult interface {
		GetNamespace() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespace()
	} else {
		var de string
		return de
	}
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetNamespaceOk() (*string, bool) {
	type getResult interface {
		GetNamespaceOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNamespaceOk()
	} else {
		return nil, false
	}
}

// HasNamespace returns a boolean if a field has been set.
func (o *BTMFeature134) HasNamespace() bool {
	type getResult interface {
		HasNamespace() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNamespace()
	} else {
		return false
	}
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *BTMFeature134) SetNamespace(v string) {
	type getResult interface {
		SetNamespace(v string)
	}

	o.GetActualInstance().(getResult).SetNamespace(v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTMFeature134) GetNodeId() string {
	type getResult interface {
		GetNodeId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeId()
	} else {
		var de string
		return de
	}
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetNodeIdOk() (*string, bool) {
	type getResult interface {
		GetNodeIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeIdOk()
	} else {
		return nil, false
	}
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTMFeature134) HasNodeId() bool {
	type getResult interface {
		HasNodeId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNodeId()
	} else {
		return false
	}
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTMFeature134) SetNodeId(v string) {
	type getResult interface {
		SetNodeId(v string)
	}

	o.GetActualInstance().(getResult).SetNodeId(v)
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *BTMFeature134) GetParameters() []BTMParameter1 {
	type getResult interface {
		GetParameters() []BTMParameter1
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParameters()
	} else {
		var de []BTMParameter1
		return de
	}
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetParametersOk() ([]BTMParameter1, bool) {
	type getResult interface {
		GetParametersOk() ([]BTMParameter1, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetParametersOk()
	} else {
		return nil, false
	}
}

// HasParameters returns a boolean if a field has been set.
func (o *BTMFeature134) HasParameters() bool {
	type getResult interface {
		HasParameters() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasParameters()
	} else {
		return false
	}
}

// SetParameters gets a reference to the given []BTMParameter1 and assigns it to the Parameters field.
func (o *BTMFeature134) SetParameters(v []BTMParameter1) {
	type getResult interface {
		SetParameters(v []BTMParameter1)
	}

	o.GetActualInstance().(getResult).SetParameters(v)
}

// GetReturnAfterSubfeatures returns the ReturnAfterSubfeatures field value if set, zero value otherwise.
func (o *BTMFeature134) GetReturnAfterSubfeatures() bool {
	type getResult interface {
		GetReturnAfterSubfeatures() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetReturnAfterSubfeatures()
	} else {
		var de bool
		return de
	}
}

// GetReturnAfterSubfeaturesOk returns a tuple with the ReturnAfterSubfeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetReturnAfterSubfeaturesOk() (*bool, bool) {
	type getResult interface {
		GetReturnAfterSubfeaturesOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetReturnAfterSubfeaturesOk()
	} else {
		return nil, false
	}
}

// HasReturnAfterSubfeatures returns a boolean if a field has been set.
func (o *BTMFeature134) HasReturnAfterSubfeatures() bool {
	type getResult interface {
		HasReturnAfterSubfeatures() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasReturnAfterSubfeatures()
	} else {
		return false
	}
}

// SetReturnAfterSubfeatures gets a reference to the given bool and assigns it to the ReturnAfterSubfeatures field.
func (o *BTMFeature134) SetReturnAfterSubfeatures(v bool) {
	type getResult interface {
		SetReturnAfterSubfeatures(v bool)
	}

	o.GetActualInstance().(getResult).SetReturnAfterSubfeatures(v)
}

// GetSubFeatures returns the SubFeatures field value if set, zero value otherwise.
func (o *BTMFeature134) GetSubFeatures() []BTMFeature134 {
	type getResult interface {
		GetSubFeatures() []BTMFeature134
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSubFeatures()
	} else {
		var de []BTMFeature134
		return de
	}
}

// GetSubFeaturesOk returns a tuple with the SubFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetSubFeaturesOk() ([]BTMFeature134, bool) {
	type getResult interface {
		GetSubFeaturesOk() ([]BTMFeature134, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSubFeaturesOk()
	} else {
		return nil, false
	}
}

// HasSubFeatures returns a boolean if a field has been set.
func (o *BTMFeature134) HasSubFeatures() bool {
	type getResult interface {
		HasSubFeatures() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSubFeatures()
	} else {
		return false
	}
}

// SetSubFeatures gets a reference to the given []BTMFeature134 and assigns it to the SubFeatures field.
func (o *BTMFeature134) SetSubFeatures(v []BTMFeature134) {
	type getResult interface {
		SetSubFeatures(v []BTMFeature134)
	}

	o.GetActualInstance().(getResult).SetSubFeatures(v)
}

// GetSuppressed returns the Suppressed field value if set, zero value otherwise.
func (o *BTMFeature134) GetSuppressed() bool {
	type getResult interface {
		GetSuppressed() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSuppressed()
	} else {
		var de bool
		return de
	}
}

// GetSuppressedOk returns a tuple with the Suppressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetSuppressedOk() (*bool, bool) {
	type getResult interface {
		GetSuppressedOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSuppressedOk()
	} else {
		return nil, false
	}
}

// HasSuppressed returns a boolean if a field has been set.
func (o *BTMFeature134) HasSuppressed() bool {
	type getResult interface {
		HasSuppressed() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSuppressed()
	} else {
		return false
	}
}

// SetSuppressed gets a reference to the given bool and assigns it to the Suppressed field.
func (o *BTMFeature134) SetSuppressed(v bool) {
	type getResult interface {
		SetSuppressed(v bool)
	}

	o.GetActualInstance().(getResult).SetSuppressed(v)
}

// GetSuppressionConfigured returns the SuppressionConfigured field value if set, zero value otherwise.
func (o *BTMFeature134) GetSuppressionConfigured() bool {
	type getResult interface {
		GetSuppressionConfigured() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSuppressionConfigured()
	} else {
		var de bool
		return de
	}
}

// GetSuppressionConfiguredOk returns a tuple with the SuppressionConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetSuppressionConfiguredOk() (*bool, bool) {
	type getResult interface {
		GetSuppressionConfiguredOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSuppressionConfiguredOk()
	} else {
		return nil, false
	}
}

// HasSuppressionConfigured returns a boolean if a field has been set.
func (o *BTMFeature134) HasSuppressionConfigured() bool {
	type getResult interface {
		HasSuppressionConfigured() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSuppressionConfigured()
	} else {
		return false
	}
}

// SetSuppressionConfigured gets a reference to the given bool and assigns it to the SuppressionConfigured field.
func (o *BTMFeature134) SetSuppressionConfigured(v bool) {
	type getResult interface {
		SetSuppressionConfigured(v bool)
	}

	o.GetActualInstance().(getResult).SetSuppressionConfigured(v)
}

// GetVariableStudioReference returns the VariableStudioReference field value if set, zero value otherwise.
func (o *BTMFeature134) GetVariableStudioReference() bool {
	type getResult interface {
		GetVariableStudioReference() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetVariableStudioReference()
	} else {
		var de bool
		return de
	}
}

// GetVariableStudioReferenceOk returns a tuple with the VariableStudioReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeature134) GetVariableStudioReferenceOk() (*bool, bool) {
	type getResult interface {
		GetVariableStudioReferenceOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetVariableStudioReferenceOk()
	} else {
		return nil, false
	}
}

// HasVariableStudioReference returns a boolean if a field has been set.
func (o *BTMFeature134) HasVariableStudioReference() bool {
	type getResult interface {
		HasVariableStudioReference() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasVariableStudioReference()
	} else {
		return false
	}
}

// SetVariableStudioReference gets a reference to the given bool and assigns it to the VariableStudioReference field.
func (o *BTMFeature134) SetVariableStudioReference(v bool) {
	type getResult interface {
		SetVariableStudioReference(v bool)
	}

	o.GetActualInstance().(getResult).SetVariableStudioReference(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTMFeature134) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTMAssemblyFeature-887'
	if jsonDict["btType"] == "BTMAssemblyFeature-887" {
		// try to unmarshal JSON data into BTMAssemblyFeature887
		var qr *BTMAssemblyFeature887
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMAssemblyFeature887: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMFeatureInvalid-1031'
	if jsonDict["btType"] == "BTMFeatureInvalid-1031" {
		// try to unmarshal JSON data into BTMFeatureInvalid1031
		var qr *BTMFeatureInvalid1031
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMFeatureInvalid1031: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMSketch-151'
	if jsonDict["btType"] == "BTMSketch-151" {
		// try to unmarshal JSON data into BTMSketch151
		var qr *BTMSketch151
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMSketch151: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMVariableStudioReference-2764'
	if jsonDict["btType"] == "BTMVariableStudioReference-2764" {
		// try to unmarshal JSON data into BTMVariableStudioReference2764
		var qr *BTMVariableStudioReference2764
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMVariableStudioReference2764: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTAssemblySimulation-2246'
	if jsonDict["btType"] == "BTAssemblySimulation-2246" {
		// try to unmarshal JSON data into BTAssemblySimulation2246
		var qr *BTAssemblySimulation2246
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTAssemblySimulation2246: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTExplosion-2754'
	if jsonDict["btType"] == "BTExplosion-2754" {
		// try to unmarshal JSON data into BTExplosion2754
		var qr *BTExplosion2754
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTExplosion2754: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTExplosionStepFeature-3008'
	if jsonDict["btType"] == "BTExplosionStepFeature-3008" {
		// try to unmarshal JSON data into BTExplosionStepFeature3008
		var qr *BTExplosionStepFeature3008
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTExplosionStepFeature3008: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMAssemblyFeature1-2218'
	if jsonDict["btType"] == "BTMAssemblyFeature1-2218" {
		// try to unmarshal JSON data into BTMAssemblyFeature12218
		var qr *BTMAssemblyFeature12218
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMAssemblyFeature12218: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMAssemblyFeature2-1022'
	if jsonDict["btType"] == "BTMAssemblyFeature2-1022" {
		// try to unmarshal JSON data into BTMAssemblyFeature21022
		var qr *BTMAssemblyFeature21022
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMAssemblyFeature21022: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMAssemblyFeatureFolder-2543'
	if jsonDict["btType"] == "BTMAssemblyFeatureFolder-2543" {
		// try to unmarshal JSON data into BTMAssemblyFeatureFolder2543
		var qr *BTMAssemblyFeatureFolder2543
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMAssemblyFeatureFolder2543: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMGenerativeDesignFeature-3195'
	if jsonDict["btType"] == "BTMGenerativeDesignFeature-3195" {
		// try to unmarshal JSON data into BTMGenerativeDesignFeature3195
		var qr *BTMGenerativeDesignFeature3195
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMGenerativeDesignFeature3195: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMGeometryMate-1260'
	if jsonDict["btType"] == "BTMGeometryMate-1260" {
		// try to unmarshal JSON data into BTMGeometryMate1260
		var qr *BTMGeometryMate1260
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMGeometryMate1260: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMLoad-3538'
	if jsonDict["btType"] == "BTMLoad-3538" {
		// try to unmarshal JSON data into BTMLoad3538
		var qr *BTMLoad3538
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMLoad3538: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMMate-64'
	if jsonDict["btType"] == "BTMMate-64" {
		// try to unmarshal JSON data into BTMMate64
		var qr *BTMMate64
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMMate64: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMMateConnector-66'
	if jsonDict["btType"] == "BTMMateConnector-66" {
		// try to unmarshal JSON data into BTMMateConnector66
		var qr *BTMMateConnector66
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMMateConnector66: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMMateGroup-65'
	if jsonDict["btType"] == "BTMMateGroup-65" {
		// try to unmarshal JSON data into BTMMateGroup65
		var qr *BTMMateGroup65
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMMateGroup65: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMMateRelation-1412'
	if jsonDict["btType"] == "BTMMateRelation-1412" {
		// try to unmarshal JSON data into BTMMateRelation1412
		var qr *BTMMateRelation1412
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMMateRelation1412: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTMNonGeometricItem-1864'
	if jsonDict["btType"] == "BTMNonGeometricItem-1864" {
		// try to unmarshal JSON data into BTMNonGeometricItem1864
		var qr *BTMNonGeometricItem1864
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTMFeature134 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTMFeature134 = nil
			return fmt.Errorf("failed to unmarshal BTMFeature134 as BTMNonGeometricItem1864: %s", err.Error())
		}
	}

	var qtx *base_BTMFeature134
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTMFeature134 = qtx
		return nil // data stored in dst.base_BTMFeature134, return on the first match
	} else {
		dst.implBTMFeature134 = nil
		return fmt.Errorf("failed to unmarshal BTMFeature134 as base_BTMFeature134: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTMFeature134) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTMFeature134) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTMFeature134
}

type NullableBTMFeature134 struct {
	value *BTMFeature134
	isSet bool
}

func (v NullableBTMFeature134) Get() *BTMFeature134 {
	return v.value
}

func (v *NullableBTMFeature134) Set(val *BTMFeature134) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMFeature134) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMFeature134) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMFeature134(val *BTMFeature134) *NullableBTMFeature134 {
	return &NullableBTMFeature134{value: val, isSet: true}
}

func (v NullableBTMFeature134) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMFeature134) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTMFeature134 struct {
	// Type of JSON object.
	BtType *string `json:"btType,omitempty"`
	// Unique ID of the feature instance within this Part Studio.
	FeatureId *string `json:"featureId,omitempty"`
	// The name of the feature spec that this feature instantiates.
	FeatureType *string `json:"featureType,omitempty"`
	// Element microversion that is being imported.
	ImportMicroversion *string `json:"importMicroversion,omitempty"`
	// User-visible name of the feature.
	Name *string `json:"name,omitempty"`
	// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
	Namespace *string `json:"namespace,omitempty"`
	// ID for the feature node.
	NodeId *string `json:"nodeId,omitempty"`
	// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
	Parameters []BTMParameter1 `json:"parameters,omitempty"`
	// For internal use only. Should always be `false`.
	ReturnAfterSubfeatures *bool `json:"returnAfterSubfeatures,omitempty"`
	// List of subfeatures belonging to the feature.
	SubFeatures []BTMFeature134 `json:"subFeatures,omitempty"`
	// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
	Suppressed *bool `json:"suppressed,omitempty"`
	// `true` if the suppression is configured in the Part Studio.
	SuppressionConfigured *bool `json:"suppressionConfigured,omitempty"`
	// If `true`, the feature references a Variable Studio.
	VariableStudioReference *bool `json:"variableStudioReference,omitempty"`
}

// Newbase_BTMFeature134 instantiates a new base_BTMFeature134 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTMFeature134() *base_BTMFeature134 {
	this := base_BTMFeature134{}
	return &this
}

// Newbase_BTMFeature134WithDefaults instantiates a new base_BTMFeature134 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTMFeature134WithDefaults() *base_BTMFeature134 {
	this := base_BTMFeature134{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTMFeature134) SetBtType(v string) {
	o.BtType = &v
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetFeatureId() string {
	if o == nil || o.FeatureId == nil {
		var ret string
		return ret
	}
	return *o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetFeatureIdOk() (*string, bool) {
	if o == nil || o.FeatureId == nil {
		return nil, false
	}
	return o.FeatureId, true
}

// HasFeatureId returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasFeatureId() bool {
	if o != nil && o.FeatureId != nil {
		return true
	}

	return false
}

// SetFeatureId gets a reference to the given string and assigns it to the FeatureId field.
func (o *base_BTMFeature134) SetFeatureId(v string) {
	o.FeatureId = &v
}

// GetFeatureType returns the FeatureType field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetFeatureType() string {
	if o == nil || o.FeatureType == nil {
		var ret string
		return ret
	}
	return *o.FeatureType
}

// GetFeatureTypeOk returns a tuple with the FeatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetFeatureTypeOk() (*string, bool) {
	if o == nil || o.FeatureType == nil {
		return nil, false
	}
	return o.FeatureType, true
}

// HasFeatureType returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasFeatureType() bool {
	if o != nil && o.FeatureType != nil {
		return true
	}

	return false
}

// SetFeatureType gets a reference to the given string and assigns it to the FeatureType field.
func (o *base_BTMFeature134) SetFeatureType(v string) {
	o.FeatureType = &v
}

// GetImportMicroversion returns the ImportMicroversion field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetImportMicroversion() string {
	if o == nil || o.ImportMicroversion == nil {
		var ret string
		return ret
	}
	return *o.ImportMicroversion
}

// GetImportMicroversionOk returns a tuple with the ImportMicroversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetImportMicroversionOk() (*string, bool) {
	if o == nil || o.ImportMicroversion == nil {
		return nil, false
	}
	return o.ImportMicroversion, true
}

// HasImportMicroversion returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasImportMicroversion() bool {
	if o != nil && o.ImportMicroversion != nil {
		return true
	}

	return false
}

// SetImportMicroversion gets a reference to the given string and assigns it to the ImportMicroversion field.
func (o *base_BTMFeature134) SetImportMicroversion(v string) {
	o.ImportMicroversion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *base_BTMFeature134) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *base_BTMFeature134) SetNamespace(v string) {
	o.Namespace = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *base_BTMFeature134) SetNodeId(v string) {
	o.NodeId = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetParameters() []BTMParameter1 {
	if o == nil || o.Parameters == nil {
		var ret []BTMParameter1
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetParametersOk() ([]BTMParameter1, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []BTMParameter1 and assigns it to the Parameters field.
func (o *base_BTMFeature134) SetParameters(v []BTMParameter1) {
	o.Parameters = v
}

// GetReturnAfterSubfeatures returns the ReturnAfterSubfeatures field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetReturnAfterSubfeatures() bool {
	if o == nil || o.ReturnAfterSubfeatures == nil {
		var ret bool
		return ret
	}
	return *o.ReturnAfterSubfeatures
}

// GetReturnAfterSubfeaturesOk returns a tuple with the ReturnAfterSubfeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetReturnAfterSubfeaturesOk() (*bool, bool) {
	if o == nil || o.ReturnAfterSubfeatures == nil {
		return nil, false
	}
	return o.ReturnAfterSubfeatures, true
}

// HasReturnAfterSubfeatures returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasReturnAfterSubfeatures() bool {
	if o != nil && o.ReturnAfterSubfeatures != nil {
		return true
	}

	return false
}

// SetReturnAfterSubfeatures gets a reference to the given bool and assigns it to the ReturnAfterSubfeatures field.
func (o *base_BTMFeature134) SetReturnAfterSubfeatures(v bool) {
	o.ReturnAfterSubfeatures = &v
}

// GetSubFeatures returns the SubFeatures field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetSubFeatures() []BTMFeature134 {
	if o == nil || o.SubFeatures == nil {
		var ret []BTMFeature134
		return ret
	}
	return o.SubFeatures
}

// GetSubFeaturesOk returns a tuple with the SubFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetSubFeaturesOk() ([]BTMFeature134, bool) {
	if o == nil || o.SubFeatures == nil {
		return nil, false
	}
	return o.SubFeatures, true
}

// HasSubFeatures returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasSubFeatures() bool {
	if o != nil && o.SubFeatures != nil {
		return true
	}

	return false
}

// SetSubFeatures gets a reference to the given []BTMFeature134 and assigns it to the SubFeatures field.
func (o *base_BTMFeature134) SetSubFeatures(v []BTMFeature134) {
	o.SubFeatures = v
}

// GetSuppressed returns the Suppressed field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetSuppressed() bool {
	if o == nil || o.Suppressed == nil {
		var ret bool
		return ret
	}
	return *o.Suppressed
}

// GetSuppressedOk returns a tuple with the Suppressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetSuppressedOk() (*bool, bool) {
	if o == nil || o.Suppressed == nil {
		return nil, false
	}
	return o.Suppressed, true
}

// HasSuppressed returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasSuppressed() bool {
	if o != nil && o.Suppressed != nil {
		return true
	}

	return false
}

// SetSuppressed gets a reference to the given bool and assigns it to the Suppressed field.
func (o *base_BTMFeature134) SetSuppressed(v bool) {
	o.Suppressed = &v
}

// GetSuppressionConfigured returns the SuppressionConfigured field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetSuppressionConfigured() bool {
	if o == nil || o.SuppressionConfigured == nil {
		var ret bool
		return ret
	}
	return *o.SuppressionConfigured
}

// GetSuppressionConfiguredOk returns a tuple with the SuppressionConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetSuppressionConfiguredOk() (*bool, bool) {
	if o == nil || o.SuppressionConfigured == nil {
		return nil, false
	}
	return o.SuppressionConfigured, true
}

// HasSuppressionConfigured returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasSuppressionConfigured() bool {
	if o != nil && o.SuppressionConfigured != nil {
		return true
	}

	return false
}

// SetSuppressionConfigured gets a reference to the given bool and assigns it to the SuppressionConfigured field.
func (o *base_BTMFeature134) SetSuppressionConfigured(v bool) {
	o.SuppressionConfigured = &v
}

// GetVariableStudioReference returns the VariableStudioReference field value if set, zero value otherwise.
func (o *base_BTMFeature134) GetVariableStudioReference() bool {
	if o == nil || o.VariableStudioReference == nil {
		var ret bool
		return ret
	}
	return *o.VariableStudioReference
}

// GetVariableStudioReferenceOk returns a tuple with the VariableStudioReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTMFeature134) GetVariableStudioReferenceOk() (*bool, bool) {
	if o == nil || o.VariableStudioReference == nil {
		return nil, false
	}
	return o.VariableStudioReference, true
}

// HasVariableStudioReference returns a boolean if a field has been set.
func (o *base_BTMFeature134) HasVariableStudioReference() bool {
	if o != nil && o.VariableStudioReference != nil {
		return true
	}

	return false
}

// SetVariableStudioReference gets a reference to the given bool and assigns it to the VariableStudioReference field.
func (o *base_BTMFeature134) SetVariableStudioReference(v bool) {
	o.VariableStudioReference = &v
}

func (o base_BTMFeature134) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.FeatureId != nil {
		toSerialize["featureId"] = o.FeatureId
	}
	if o.FeatureType != nil {
		toSerialize["featureType"] = o.FeatureType
	}
	if o.ImportMicroversion != nil {
		toSerialize["importMicroversion"] = o.ImportMicroversion
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.ReturnAfterSubfeatures != nil {
		toSerialize["returnAfterSubfeatures"] = o.ReturnAfterSubfeatures
	}
	if o.SubFeatures != nil {
		toSerialize["subFeatures"] = o.SubFeatures
	}
	if o.Suppressed != nil {
		toSerialize["suppressed"] = o.Suppressed
	}
	if o.SuppressionConfigured != nil {
		toSerialize["suppressionConfigured"] = o.SuppressionConfigured
	}
	if o.VariableStudioReference != nil {
		toSerialize["variableStudioReference"] = o.VariableStudioReference
	}
	return json.Marshal(toSerialize)
}

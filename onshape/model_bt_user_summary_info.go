/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTUserSummaryInfo - struct for BTUserSummaryInfo
type BTUserSummaryInfo struct {
	implBTUserSummaryInfo interface{}
}

// BTCompanyUserSummaryInfoAsBTUserSummaryInfo is a convenience function that returns BTCompanyUserSummaryInfo wrapped in BTUserSummaryInfo
func (o *BTCompanyUserSummaryInfo) AsBTUserSummaryInfo() *BTUserSummaryInfo {
	return &BTUserSummaryInfo{o}
}

// BTUserOAuth2SummaryInfoAsBTUserSummaryInfo is a convenience function that returns BTUserOAuth2SummaryInfo wrapped in BTUserSummaryInfo
func (o *BTUserOAuth2SummaryInfo) AsBTUserSummaryInfo() *BTUserSummaryInfo {
	return &BTUserSummaryInfo{o}
}

// BTCompanyUserSummaryAdminInfoAsBTUserSummaryInfo is a convenience function that returns BTCompanyUserSummaryAdminInfo wrapped in BTUserSummaryInfo
func (o *BTCompanyUserSummaryAdminInfo) AsBTUserSummaryInfo() *BTUserSummaryInfo {
	return &BTUserSummaryInfo{o}
}

// BTUserAdminSummaryInfoAsBTUserSummaryInfo is a convenience function that returns BTUserAdminSummaryInfo wrapped in BTUserSummaryInfo
func (o *BTUserAdminSummaryInfo) AsBTUserSummaryInfo() *BTUserSummaryInfo {
	return &BTUserSummaryInfo{o}
}

// BTUserInfoAsBTUserSummaryInfo is a convenience function that returns BTUserInfo wrapped in BTUserSummaryInfo
func (o *BTUserInfo) AsBTUserSummaryInfo() *BTUserSummaryInfo {
	return &BTUserSummaryInfo{o}
}

// BTUserAdminInfoAsBTUserSummaryInfo is a convenience function that returns BTUserAdminInfo wrapped in BTUserSummaryInfo
func (o *BTUserAdminInfo) AsBTUserSummaryInfo() *BTUserSummaryInfo {
	return &BTUserSummaryInfo{o}
}

// NewBTUserSummaryInfo instantiates a new BTUserSummaryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTUserSummaryInfo(jsonType string) *BTUserSummaryInfo {
	this := BTUserSummaryInfo{Newbase_BTUserSummaryInfo(jsonType)}
	return &this
}

// NewBTUserSummaryInfoWithDefaults instantiates a new BTUserSummaryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTUserSummaryInfoWithDefaults() *BTUserSummaryInfo {
	this := BTUserSummaryInfo{Newbase_BTUserSummaryInfoWithDefaults()}
	return &this
}

// GetJsonType returns the JsonType field value
func (o *BTUserSummaryInfo) GetJsonType() string {
	type getResult interface {
		GetJsonType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetJsonType()
	} else {
		var de string
		return de
	}
}

// GetJsonTypeOk returns a tuple with the JsonType field value
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetJsonTypeOk() (*string, bool) {
	type getResult interface {
		GetJsonTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetJsonTypeOk()
	} else {
		return nil, false
	}
}

// SetJsonType sets field value
func (o *BTUserSummaryInfo) SetJsonType(v string) {
	type getResult interface {
		SetJsonType(v string)
	}

	o.GetActualInstance().(getResult).SetJsonType(v)
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetHref() string {
	type getResult interface {
		GetHref() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetHref()
	} else {
		var de string
		return de
	}
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetHrefOk() (*string, bool) {
	type getResult interface {
		GetHrefOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetHrefOk()
	} else {
		return nil, false
	}
}

// HasHref returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasHref() bool {
	type getResult interface {
		HasHref() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasHref()
	} else {
		return false
	}
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *BTUserSummaryInfo) SetHref(v string) {
	type getResult interface {
		SetHref(v string)
	}

	o.GetActualInstance().(getResult).SetHref(v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetId() string {
	type getResult interface {
		GetId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetId()
	} else {
		var de string
		return de
	}
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetIdOk() (*string, bool) {
	type getResult interface {
		GetIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIdOk()
	} else {
		return nil, false
	}
}

// HasId returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasId() bool {
	type getResult interface {
		HasId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasId()
	} else {
		return false
	}
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BTUserSummaryInfo) SetId(v string) {
	type getResult interface {
		SetId(v string)
	}

	o.GetActualInstance().(getResult).SetId(v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetName() string {
	type getResult interface {
		GetName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetName()
	} else {
		var de string
		return de
	}
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetNameOk() (*string, bool) {
	type getResult interface {
		GetNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNameOk()
	} else {
		return nil, false
	}
}

// HasName returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasName() bool {
	type getResult interface {
		HasName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasName()
	} else {
		return false
	}
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BTUserSummaryInfo) SetName(v string) {
	type getResult interface {
		SetName(v string)
	}

	o.GetActualInstance().(getResult).SetName(v)
}

// GetViewRef returns the ViewRef field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetViewRef() string {
	type getResult interface {
		GetViewRef() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetViewRef()
	} else {
		var de string
		return de
	}
}

// GetViewRefOk returns a tuple with the ViewRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetViewRefOk() (*string, bool) {
	type getResult interface {
		GetViewRefOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetViewRefOk()
	} else {
		return nil, false
	}
}

// HasViewRef returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasViewRef() bool {
	type getResult interface {
		HasViewRef() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasViewRef()
	} else {
		return false
	}
}

// SetViewRef gets a reference to the given string and assigns it to the ViewRef field.
func (o *BTUserSummaryInfo) SetViewRef(v string) {
	type getResult interface {
		SetViewRef(v string)
	}

	o.GetActualInstance().(getResult).SetViewRef(v)
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetImage() string {
	type getResult interface {
		GetImage() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetImage()
	} else {
		var de string
		return de
	}
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetImageOk() (*string, bool) {
	type getResult interface {
		GetImageOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetImageOk()
	} else {
		return nil, false
	}
}

// HasImage returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasImage() bool {
	type getResult interface {
		HasImage() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasImage()
	} else {
		return false
	}
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *BTUserSummaryInfo) SetImage(v string) {
	type getResult interface {
		SetImage(v string)
	}

	o.GetActualInstance().(getResult).SetImage(v)
}

// GetIsOnshapeSupport returns the IsOnshapeSupport field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetIsOnshapeSupport() bool {
	type getResult interface {
		GetIsOnshapeSupport() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsOnshapeSupport()
	} else {
		var de bool
		return de
	}
}

// GetIsOnshapeSupportOk returns a tuple with the IsOnshapeSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetIsOnshapeSupportOk() (*bool, bool) {
	type getResult interface {
		GetIsOnshapeSupportOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsOnshapeSupportOk()
	} else {
		return nil, false
	}
}

// HasIsOnshapeSupport returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasIsOnshapeSupport() bool {
	type getResult interface {
		HasIsOnshapeSupport() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsOnshapeSupport()
	} else {
		return false
	}
}

// SetIsOnshapeSupport gets a reference to the given bool and assigns it to the IsOnshapeSupport field.
func (o *BTUserSummaryInfo) SetIsOnshapeSupport(v bool) {
	type getResult interface {
		SetIsOnshapeSupport(v bool)
	}

	o.GetActualInstance().(getResult).SetIsOnshapeSupport(v)
}

// GetState returns the State field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetState() int32 {
	type getResult interface {
		GetState() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetState()
	} else {
		var de int32
		return de
	}
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetStateOk() (*int32, bool) {
	type getResult interface {
		GetStateOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStateOk()
	} else {
		return nil, false
	}
}

// HasState returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasState() bool {
	type getResult interface {
		HasState() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasState()
	} else {
		return false
	}
}

// SetState gets a reference to the given int32 and assigns it to the State field.
func (o *BTUserSummaryInfo) SetState(v int32) {
	type getResult interface {
		SetState(v int32)
	}

	o.GetActualInstance().(getResult).SetState(v)
}

// GetDocumentationName returns the DocumentationName field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetDocumentationName() string {
	type getResult interface {
		GetDocumentationName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationName()
	} else {
		var de string
		return de
	}
}

// GetDocumentationNameOk returns a tuple with the DocumentationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetDocumentationNameOk() (*string, bool) {
	type getResult interface {
		GetDocumentationNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationNameOk()
	} else {
		return nil, false
	}
}

// HasDocumentationName returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasDocumentationName() bool {
	type getResult interface {
		HasDocumentationName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDocumentationName()
	} else {
		return false
	}
}

// SetDocumentationName gets a reference to the given string and assigns it to the DocumentationName field.
func (o *BTUserSummaryInfo) SetDocumentationName(v string) {
	type getResult interface {
		SetDocumentationName(v string)
	}

	o.GetActualInstance().(getResult).SetDocumentationName(v)
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetEmail() string {
	type getResult interface {
		GetEmail() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEmail()
	} else {
		var de string
		return de
	}
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetEmailOk() (*string, bool) {
	type getResult interface {
		GetEmailOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEmailOk()
	} else {
		return nil, false
	}
}

// HasEmail returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasEmail() bool {
	type getResult interface {
		HasEmail() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEmail()
	} else {
		return false
	}
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *BTUserSummaryInfo) SetEmail(v string) {
	type getResult interface {
		SetEmail(v string)
	}

	o.GetActualInstance().(getResult).SetEmail(v)
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetFirstName() string {
	type getResult interface {
		GetFirstName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFirstName()
	} else {
		var de string
		return de
	}
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetFirstNameOk() (*string, bool) {
	type getResult interface {
		GetFirstNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetFirstNameOk()
	} else {
		return nil, false
	}
}

// HasFirstName returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasFirstName() bool {
	type getResult interface {
		HasFirstName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasFirstName()
	} else {
		return false
	}
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *BTUserSummaryInfo) SetFirstName(v string) {
	type getResult interface {
		SetFirstName(v string)
	}

	o.GetActualInstance().(getResult).SetFirstName(v)
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetLastName() string {
	type getResult interface {
		GetLastName() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLastName()
	} else {
		var de string
		return de
	}
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetLastNameOk() (*string, bool) {
	type getResult interface {
		GetLastNameOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLastNameOk()
	} else {
		return nil, false
	}
}

// HasLastName returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasLastName() bool {
	type getResult interface {
		HasLastName() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLastName()
	} else {
		return false
	}
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *BTUserSummaryInfo) SetLastName(v string) {
	type getResult interface {
		SetLastName(v string)
	}

	o.GetActualInstance().(getResult).SetLastName(v)
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetCompany() BTCompanySummaryInfo {
	type getResult interface {
		GetCompany() BTCompanySummaryInfo
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCompany()
	} else {
		var de BTCompanySummaryInfo
		return de
	}
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetCompanyOk() (*BTCompanySummaryInfo, bool) {
	type getResult interface {
		GetCompanyOk() (*BTCompanySummaryInfo, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetCompanyOk()
	} else {
		return nil, false
	}
}

// HasCompany returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasCompany() bool {
	type getResult interface {
		HasCompany() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasCompany()
	} else {
		return false
	}
}

// SetCompany gets a reference to the given BTCompanySummaryInfo and assigns it to the Company field.
func (o *BTUserSummaryInfo) SetCompany(v BTCompanySummaryInfo) {
	type getResult interface {
		SetCompany(v BTCompanySummaryInfo)
	}

	o.GetActualInstance().(getResult).SetCompany(v)
}

// GetDocumentationNameOverride returns the DocumentationNameOverride field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetDocumentationNameOverride() string {
	type getResult interface {
		GetDocumentationNameOverride() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationNameOverride()
	} else {
		var de string
		return de
	}
}

// GetDocumentationNameOverrideOk returns a tuple with the DocumentationNameOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetDocumentationNameOverrideOk() (*string, bool) {
	type getResult interface {
		GetDocumentationNameOverrideOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationNameOverrideOk()
	} else {
		return nil, false
	}
}

// HasDocumentationNameOverride returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasDocumentationNameOverride() bool {
	type getResult interface {
		HasDocumentationNameOverride() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDocumentationNameOverride()
	} else {
		return false
	}
}

// SetDocumentationNameOverride gets a reference to the given string and assigns it to the DocumentationNameOverride field.
func (o *BTUserSummaryInfo) SetDocumentationNameOverride(v string) {
	type getResult interface {
		SetDocumentationNameOverride(v string)
	}

	o.GetActualInstance().(getResult).SetDocumentationNameOverride(v)
}

// GetGlobalPermissions returns the GlobalPermissions field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetGlobalPermissions() GlobalPermissionInfo {
	type getResult interface {
		GetGlobalPermissions() GlobalPermissionInfo
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetGlobalPermissions()
	} else {
		var de GlobalPermissionInfo
		return de
	}
}

// GetGlobalPermissionsOk returns a tuple with the GlobalPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetGlobalPermissionsOk() (*GlobalPermissionInfo, bool) {
	type getResult interface {
		GetGlobalPermissionsOk() (*GlobalPermissionInfo, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetGlobalPermissionsOk()
	} else {
		return nil, false
	}
}

// HasGlobalPermissions returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasGlobalPermissions() bool {
	type getResult interface {
		HasGlobalPermissions() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasGlobalPermissions()
	} else {
		return false
	}
}

// SetGlobalPermissions gets a reference to the given GlobalPermissionInfo and assigns it to the GlobalPermissions field.
func (o *BTUserSummaryInfo) SetGlobalPermissions(v GlobalPermissionInfo) {
	type getResult interface {
		SetGlobalPermissions(v GlobalPermissionInfo)
	}

	o.GetActualInstance().(getResult).SetGlobalPermissions(v)
}

// GetInvitationState returns the InvitationState field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetInvitationState() int32 {
	type getResult interface {
		GetInvitationState() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetInvitationState()
	} else {
		var de int32
		return de
	}
}

// GetInvitationStateOk returns a tuple with the InvitationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetInvitationStateOk() (*int32, bool) {
	type getResult interface {
		GetInvitationStateOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetInvitationStateOk()
	} else {
		return nil, false
	}
}

// HasInvitationState returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasInvitationState() bool {
	type getResult interface {
		HasInvitationState() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasInvitationState()
	} else {
		return false
	}
}

// SetInvitationState gets a reference to the given int32 and assigns it to the InvitationState field.
func (o *BTUserSummaryInfo) SetInvitationState(v int32) {
	type getResult interface {
		SetInvitationState(v int32)
	}

	o.GetActualInstance().(getResult).SetInvitationState(v)
}

// GetIsGuest returns the IsGuest field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetIsGuest() bool {
	type getResult interface {
		GetIsGuest() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsGuest()
	} else {
		var de bool
		return de
	}
}

// GetIsGuestOk returns a tuple with the IsGuest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetIsGuestOk() (*bool, bool) {
	type getResult interface {
		GetIsGuestOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsGuestOk()
	} else {
		return nil, false
	}
}

// HasIsGuest returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasIsGuest() bool {
	type getResult interface {
		HasIsGuest() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsGuest()
	} else {
		return false
	}
}

// SetIsGuest gets a reference to the given bool and assigns it to the IsGuest field.
func (o *BTUserSummaryInfo) SetIsGuest(v bool) {
	type getResult interface {
		SetIsGuest(v bool)
	}

	o.GetActualInstance().(getResult).SetIsGuest(v)
}

// GetIsLight returns the IsLight field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetIsLight() bool {
	type getResult interface {
		GetIsLight() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsLight()
	} else {
		var de bool
		return de
	}
}

// GetIsLightOk returns a tuple with the IsLight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetIsLightOk() (*bool, bool) {
	type getResult interface {
		GetIsLightOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetIsLightOk()
	} else {
		return nil, false
	}
}

// HasIsLight returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasIsLight() bool {
	type getResult interface {
		HasIsLight() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasIsLight()
	} else {
		return false
	}
}

// SetIsLight gets a reference to the given bool and assigns it to the IsLight field.
func (o *BTUserSummaryInfo) SetIsLight(v bool) {
	type getResult interface {
		SetIsLight(v bool)
	}

	o.GetActualInstance().(getResult).SetIsLight(v)
}

// GetLastLoginTime returns the LastLoginTime field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetLastLoginTime() JSONTime {
	type getResult interface {
		GetLastLoginTime() JSONTime
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLastLoginTime()
	} else {
		var de JSONTime
		return de
	}
}

// GetLastLoginTimeOk returns a tuple with the LastLoginTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetLastLoginTimeOk() (*JSONTime, bool) {
	type getResult interface {
		GetLastLoginTimeOk() (*JSONTime, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetLastLoginTimeOk()
	} else {
		return nil, false
	}
}

// HasLastLoginTime returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasLastLoginTime() bool {
	type getResult interface {
		HasLastLoginTime() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasLastLoginTime()
	} else {
		return false
	}
}

// SetLastLoginTime gets a reference to the given JSONTime and assigns it to the LastLoginTime field.
func (o *BTUserSummaryInfo) SetLastLoginTime(v JSONTime) {
	type getResult interface {
		SetLastLoginTime(v JSONTime)
	}

	o.GetActualInstance().(getResult).SetLastLoginTime(v)
}

// GetPersonalMessageAllowed returns the PersonalMessageAllowed field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetPersonalMessageAllowed() bool {
	type getResult interface {
		GetPersonalMessageAllowed() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetPersonalMessageAllowed()
	} else {
		var de bool
		return de
	}
}

// GetPersonalMessageAllowedOk returns a tuple with the PersonalMessageAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetPersonalMessageAllowedOk() (*bool, bool) {
	type getResult interface {
		GetPersonalMessageAllowedOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetPersonalMessageAllowedOk()
	} else {
		return nil, false
	}
}

// HasPersonalMessageAllowed returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasPersonalMessageAllowed() bool {
	type getResult interface {
		HasPersonalMessageAllowed() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasPersonalMessageAllowed()
	} else {
		return false
	}
}

// SetPersonalMessageAllowed gets a reference to the given bool and assigns it to the PersonalMessageAllowed field.
func (o *BTUserSummaryInfo) SetPersonalMessageAllowed(v bool) {
	type getResult interface {
		SetPersonalMessageAllowed(v bool)
	}

	o.GetActualInstance().(getResult).SetPersonalMessageAllowed(v)
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *BTUserSummaryInfo) GetSource() int32 {
	type getResult interface {
		GetSource() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSource()
	} else {
		var de int32
		return de
	}
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUserSummaryInfo) GetSourceOk() (*int32, bool) {
	type getResult interface {
		GetSourceOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSourceOk()
	} else {
		return nil, false
	}
}

// HasSource returns a boolean if a field has been set.
func (o *BTUserSummaryInfo) HasSource() bool {
	type getResult interface {
		HasSource() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSource()
	} else {
		return false
	}
}

// SetSource gets a reference to the given int32 and assigns it to the Source field.
func (o *BTUserSummaryInfo) SetSource(v int32) {
	type getResult interface {
		SetSource(v int32)
	}

	o.GetActualInstance().(getResult).SetSource(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTUserSummaryInfo) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTUserAdminSummaryInfo'
	if jsonDict["jsonType"] == "BTUserAdminSummaryInfo" {
		// try to unmarshal JSON data into BTUserAdminSummaryInfo
		var qr *BTUserAdminSummaryInfo
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTUserSummaryInfo = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTUserSummaryInfo = nil
			return fmt.Errorf("failed to unmarshal BTUserSummaryInfo as BTUserAdminSummaryInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTUserOAuth2SummaryInfo'
	if jsonDict["jsonType"] == "BTUserOAuth2SummaryInfo" {
		// try to unmarshal JSON data into BTUserOAuth2SummaryInfo
		var qr *BTUserOAuth2SummaryInfo
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTUserSummaryInfo = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTUserSummaryInfo = nil
			return fmt.Errorf("failed to unmarshal BTUserSummaryInfo as BTUserOAuth2SummaryInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'companyuser'
	if jsonDict["jsonType"] == "companyuser" {
		// try to unmarshal JSON data into BTCompanyUserSummaryInfo
		var qr *BTCompanyUserSummaryInfo
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTUserSummaryInfo = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTUserSummaryInfo = nil
			return fmt.Errorf("failed to unmarshal BTUserSummaryInfo as BTCompanyUserSummaryInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'userinfo'
	if jsonDict["jsonType"] == "userinfo" {
		// try to unmarshal JSON data into BTUserInfo
		var qr *BTUserInfo
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTUserSummaryInfo = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTUserSummaryInfo = nil
			return fmt.Errorf("failed to unmarshal BTUserSummaryInfo as BTUserInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTCompanyUserSummaryAdminInfo'
	if jsonDict["jsonType"] == "BTCompanyUserSummaryAdminInfo" {
		// try to unmarshal JSON data into BTCompanyUserSummaryAdminInfo
		var qr *BTCompanyUserSummaryAdminInfo
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTUserSummaryInfo = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTUserSummaryInfo = nil
			return fmt.Errorf("failed to unmarshal BTUserSummaryInfo as BTCompanyUserSummaryAdminInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTUserAdminInfo'
	if jsonDict["jsonType"] == "BTUserAdminInfo" {
		// try to unmarshal JSON data into BTUserAdminInfo
		var qr *BTUserAdminInfo
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTUserSummaryInfo = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTUserSummaryInfo = nil
			return fmt.Errorf("failed to unmarshal BTUserSummaryInfo as BTUserAdminInfo: %s", err.Error())
		}
	}

	var qtx *base_BTUserSummaryInfo
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTUserSummaryInfo = qtx
		return nil // data stored in dst.base_BTUserSummaryInfo, return on the first match
	} else {
		dst.implBTUserSummaryInfo = nil
		return fmt.Errorf("failed to unmarshal BTUserSummaryInfo as base_BTUserSummaryInfo: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTUserSummaryInfo) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTUserSummaryInfo) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTUserSummaryInfo
}

type NullableBTUserSummaryInfo struct {
	value *BTUserSummaryInfo
	isSet bool
}

func (v NullableBTUserSummaryInfo) Get() *BTUserSummaryInfo {
	return v.value
}

func (v *NullableBTUserSummaryInfo) Set(val *BTUserSummaryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTUserSummaryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTUserSummaryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTUserSummaryInfo(val *BTUserSummaryInfo) *NullableBTUserSummaryInfo {
	return &NullableBTUserSummaryInfo{value: val, isSet: true}
}

func (v NullableBTUserSummaryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTUserSummaryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTUserSummaryInfo struct {
	JsonType string `json:"jsonType"`
	// URI to fetch complete information of the resource.
	Href *string `json:"href,omitempty"`
	// Id of the resource.
	Id *string `json:"id,omitempty"`
	// Name of the resource.
	Name *string `json:"name,omitempty"`
	// URI to visualize the resource in a webclient if applicable.
	ViewRef                   *string               `json:"viewRef,omitempty"`
	Image                     *string               `json:"image,omitempty"`
	IsOnshapeSupport          *bool                 `json:"isOnshapeSupport,omitempty"`
	State                     *int32                `json:"state,omitempty"`
	DocumentationName         *string               `json:"documentationName,omitempty"`
	Email                     *string               `json:"email,omitempty"`
	FirstName                 *string               `json:"firstName,omitempty"`
	LastName                  *string               `json:"lastName,omitempty"`
	Company                   *BTCompanySummaryInfo `json:"company,omitempty"`
	DocumentationNameOverride *string               `json:"documentationNameOverride,omitempty"`
	GlobalPermissions         *GlobalPermissionInfo `json:"globalPermissions,omitempty"`
	InvitationState           *int32                `json:"invitationState,omitempty"`
	IsGuest                   *bool                 `json:"isGuest,omitempty"`
	IsLight                   *bool                 `json:"isLight,omitempty"`
	LastLoginTime             *JSONTime             `json:"lastLoginTime,omitempty"`
	PersonalMessageAllowed    *bool                 `json:"personalMessageAllowed,omitempty"`
	Source                    *int32                `json:"source,omitempty"`
}

// Newbase_BTUserSummaryInfo instantiates a new base_BTUserSummaryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTUserSummaryInfo(jsonType string) *base_BTUserSummaryInfo {
	this := base_BTUserSummaryInfo{}
	this.JsonType = jsonType
	return &this
}

// Newbase_BTUserSummaryInfoWithDefaults instantiates a new base_BTUserSummaryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTUserSummaryInfoWithDefaults() *base_BTUserSummaryInfo {
	this := base_BTUserSummaryInfo{}
	return &this
}

// GetJsonType returns the JsonType field value
func (o *base_BTUserSummaryInfo) GetJsonType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JsonType
}

// GetJsonTypeOk returns a tuple with the JsonType field value
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetJsonTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JsonType, true
}

// SetJsonType sets field value
func (o *base_BTUserSummaryInfo) SetJsonType(v string) {
	o.JsonType = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *base_BTUserSummaryInfo) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *base_BTUserSummaryInfo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *base_BTUserSummaryInfo) SetName(v string) {
	o.Name = &v
}

// GetViewRef returns the ViewRef field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetViewRef() string {
	if o == nil || o.ViewRef == nil {
		var ret string
		return ret
	}
	return *o.ViewRef
}

// GetViewRefOk returns a tuple with the ViewRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetViewRefOk() (*string, bool) {
	if o == nil || o.ViewRef == nil {
		return nil, false
	}
	return o.ViewRef, true
}

// HasViewRef returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasViewRef() bool {
	if o != nil && o.ViewRef != nil {
		return true
	}

	return false
}

// SetViewRef gets a reference to the given string and assigns it to the ViewRef field.
func (o *base_BTUserSummaryInfo) SetViewRef(v string) {
	o.ViewRef = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *base_BTUserSummaryInfo) SetImage(v string) {
	o.Image = &v
}

// GetIsOnshapeSupport returns the IsOnshapeSupport field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetIsOnshapeSupport() bool {
	if o == nil || o.IsOnshapeSupport == nil {
		var ret bool
		return ret
	}
	return *o.IsOnshapeSupport
}

// GetIsOnshapeSupportOk returns a tuple with the IsOnshapeSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetIsOnshapeSupportOk() (*bool, bool) {
	if o == nil || o.IsOnshapeSupport == nil {
		return nil, false
	}
	return o.IsOnshapeSupport, true
}

// HasIsOnshapeSupport returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasIsOnshapeSupport() bool {
	if o != nil && o.IsOnshapeSupport != nil {
		return true
	}

	return false
}

// SetIsOnshapeSupport gets a reference to the given bool and assigns it to the IsOnshapeSupport field.
func (o *base_BTUserSummaryInfo) SetIsOnshapeSupport(v bool) {
	o.IsOnshapeSupport = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetState() int32 {
	if o == nil || o.State == nil {
		var ret int32
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetStateOk() (*int32, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given int32 and assigns it to the State field.
func (o *base_BTUserSummaryInfo) SetState(v int32) {
	o.State = &v
}

// GetDocumentationName returns the DocumentationName field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetDocumentationName() string {
	if o == nil || o.DocumentationName == nil {
		var ret string
		return ret
	}
	return *o.DocumentationName
}

// GetDocumentationNameOk returns a tuple with the DocumentationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetDocumentationNameOk() (*string, bool) {
	if o == nil || o.DocumentationName == nil {
		return nil, false
	}
	return o.DocumentationName, true
}

// HasDocumentationName returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasDocumentationName() bool {
	if o != nil && o.DocumentationName != nil {
		return true
	}

	return false
}

// SetDocumentationName gets a reference to the given string and assigns it to the DocumentationName field.
func (o *base_BTUserSummaryInfo) SetDocumentationName(v string) {
	o.DocumentationName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *base_BTUserSummaryInfo) SetEmail(v string) {
	o.Email = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *base_BTUserSummaryInfo) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *base_BTUserSummaryInfo) SetLastName(v string) {
	o.LastName = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetCompany() BTCompanySummaryInfo {
	if o == nil || o.Company == nil {
		var ret BTCompanySummaryInfo
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetCompanyOk() (*BTCompanySummaryInfo, bool) {
	if o == nil || o.Company == nil {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasCompany() bool {
	if o != nil && o.Company != nil {
		return true
	}

	return false
}

// SetCompany gets a reference to the given BTCompanySummaryInfo and assigns it to the Company field.
func (o *base_BTUserSummaryInfo) SetCompany(v BTCompanySummaryInfo) {
	o.Company = &v
}

// GetDocumentationNameOverride returns the DocumentationNameOverride field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetDocumentationNameOverride() string {
	if o == nil || o.DocumentationNameOverride == nil {
		var ret string
		return ret
	}
	return *o.DocumentationNameOverride
}

// GetDocumentationNameOverrideOk returns a tuple with the DocumentationNameOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetDocumentationNameOverrideOk() (*string, bool) {
	if o == nil || o.DocumentationNameOverride == nil {
		return nil, false
	}
	return o.DocumentationNameOverride, true
}

// HasDocumentationNameOverride returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasDocumentationNameOverride() bool {
	if o != nil && o.DocumentationNameOverride != nil {
		return true
	}

	return false
}

// SetDocumentationNameOverride gets a reference to the given string and assigns it to the DocumentationNameOverride field.
func (o *base_BTUserSummaryInfo) SetDocumentationNameOverride(v string) {
	o.DocumentationNameOverride = &v
}

// GetGlobalPermissions returns the GlobalPermissions field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetGlobalPermissions() GlobalPermissionInfo {
	if o == nil || o.GlobalPermissions == nil {
		var ret GlobalPermissionInfo
		return ret
	}
	return *o.GlobalPermissions
}

// GetGlobalPermissionsOk returns a tuple with the GlobalPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetGlobalPermissionsOk() (*GlobalPermissionInfo, bool) {
	if o == nil || o.GlobalPermissions == nil {
		return nil, false
	}
	return o.GlobalPermissions, true
}

// HasGlobalPermissions returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasGlobalPermissions() bool {
	if o != nil && o.GlobalPermissions != nil {
		return true
	}

	return false
}

// SetGlobalPermissions gets a reference to the given GlobalPermissionInfo and assigns it to the GlobalPermissions field.
func (o *base_BTUserSummaryInfo) SetGlobalPermissions(v GlobalPermissionInfo) {
	o.GlobalPermissions = &v
}

// GetInvitationState returns the InvitationState field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetInvitationState() int32 {
	if o == nil || o.InvitationState == nil {
		var ret int32
		return ret
	}
	return *o.InvitationState
}

// GetInvitationStateOk returns a tuple with the InvitationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetInvitationStateOk() (*int32, bool) {
	if o == nil || o.InvitationState == nil {
		return nil, false
	}
	return o.InvitationState, true
}

// HasInvitationState returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasInvitationState() bool {
	if o != nil && o.InvitationState != nil {
		return true
	}

	return false
}

// SetInvitationState gets a reference to the given int32 and assigns it to the InvitationState field.
func (o *base_BTUserSummaryInfo) SetInvitationState(v int32) {
	o.InvitationState = &v
}

// GetIsGuest returns the IsGuest field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetIsGuest() bool {
	if o == nil || o.IsGuest == nil {
		var ret bool
		return ret
	}
	return *o.IsGuest
}

// GetIsGuestOk returns a tuple with the IsGuest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetIsGuestOk() (*bool, bool) {
	if o == nil || o.IsGuest == nil {
		return nil, false
	}
	return o.IsGuest, true
}

// HasIsGuest returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasIsGuest() bool {
	if o != nil && o.IsGuest != nil {
		return true
	}

	return false
}

// SetIsGuest gets a reference to the given bool and assigns it to the IsGuest field.
func (o *base_BTUserSummaryInfo) SetIsGuest(v bool) {
	o.IsGuest = &v
}

// GetIsLight returns the IsLight field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetIsLight() bool {
	if o == nil || o.IsLight == nil {
		var ret bool
		return ret
	}
	return *o.IsLight
}

// GetIsLightOk returns a tuple with the IsLight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetIsLightOk() (*bool, bool) {
	if o == nil || o.IsLight == nil {
		return nil, false
	}
	return o.IsLight, true
}

// HasIsLight returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasIsLight() bool {
	if o != nil && o.IsLight != nil {
		return true
	}

	return false
}

// SetIsLight gets a reference to the given bool and assigns it to the IsLight field.
func (o *base_BTUserSummaryInfo) SetIsLight(v bool) {
	o.IsLight = &v
}

// GetLastLoginTime returns the LastLoginTime field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetLastLoginTime() JSONTime {
	if o == nil || o.LastLoginTime == nil {
		var ret JSONTime
		return ret
	}
	return *o.LastLoginTime
}

// GetLastLoginTimeOk returns a tuple with the LastLoginTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetLastLoginTimeOk() (*JSONTime, bool) {
	if o == nil || o.LastLoginTime == nil {
		return nil, false
	}
	return o.LastLoginTime, true
}

// HasLastLoginTime returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasLastLoginTime() bool {
	if o != nil && o.LastLoginTime != nil {
		return true
	}

	return false
}

// SetLastLoginTime gets a reference to the given JSONTime and assigns it to the LastLoginTime field.
func (o *base_BTUserSummaryInfo) SetLastLoginTime(v JSONTime) {
	o.LastLoginTime = &v
}

// GetPersonalMessageAllowed returns the PersonalMessageAllowed field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetPersonalMessageAllowed() bool {
	if o == nil || o.PersonalMessageAllowed == nil {
		var ret bool
		return ret
	}
	return *o.PersonalMessageAllowed
}

// GetPersonalMessageAllowedOk returns a tuple with the PersonalMessageAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetPersonalMessageAllowedOk() (*bool, bool) {
	if o == nil || o.PersonalMessageAllowed == nil {
		return nil, false
	}
	return o.PersonalMessageAllowed, true
}

// HasPersonalMessageAllowed returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasPersonalMessageAllowed() bool {
	if o != nil && o.PersonalMessageAllowed != nil {
		return true
	}

	return false
}

// SetPersonalMessageAllowed gets a reference to the given bool and assigns it to the PersonalMessageAllowed field.
func (o *base_BTUserSummaryInfo) SetPersonalMessageAllowed(v bool) {
	o.PersonalMessageAllowed = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *base_BTUserSummaryInfo) GetSource() int32 {
	if o == nil || o.Source == nil {
		var ret int32
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTUserSummaryInfo) GetSourceOk() (*int32, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *base_BTUserSummaryInfo) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given int32 and assigns it to the Source field.
func (o *base_BTUserSummaryInfo) SetSource(v int32) {
	o.Source = &v
}

func (o base_BTUserSummaryInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["jsonType"] = o.JsonType
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ViewRef != nil {
		toSerialize["viewRef"] = o.ViewRef
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.IsOnshapeSupport != nil {
		toSerialize["isOnshapeSupport"] = o.IsOnshapeSupport
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.DocumentationName != nil {
		toSerialize["documentationName"] = o.DocumentationName
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if o.Company != nil {
		toSerialize["company"] = o.Company
	}
	if o.DocumentationNameOverride != nil {
		toSerialize["documentationNameOverride"] = o.DocumentationNameOverride
	}
	if o.GlobalPermissions != nil {
		toSerialize["globalPermissions"] = o.GlobalPermissions
	}
	if o.InvitationState != nil {
		toSerialize["invitationState"] = o.InvitationState
	}
	if o.IsGuest != nil {
		toSerialize["isGuest"] = o.IsGuest
	}
	if o.IsLight != nil {
		toSerialize["isLight"] = o.IsLight
	}
	if o.LastLoginTime != nil {
		toSerialize["lastLoginTime"] = o.LastLoginTime
	}
	if o.PersonalMessageAllowed != nil {
		toSerialize["personalMessageAllowed"] = o.PersonalMessageAllowed
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

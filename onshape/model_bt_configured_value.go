/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTConfiguredValue Configured variable description, if configured
type BTConfiguredValue struct {
	// The configuration parameter configuring this value, if configured
	ConfigurationParameterId *string `json:"configurationParameterId,omitempty"`
	// Configuration to value, required if configuration parameter id is specified
	ConfigurationToValue *map[string]string `json:"configurationToValue,omitempty"`
}

// NewBTConfiguredValue instantiates a new BTConfiguredValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTConfiguredValue() *BTConfiguredValue {
	this := BTConfiguredValue{}
	return &this
}

// NewBTConfiguredValueWithDefaults instantiates a new BTConfiguredValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTConfiguredValueWithDefaults() *BTConfiguredValue {
	this := BTConfiguredValue{}
	return &this
}

// GetConfigurationParameterId returns the ConfigurationParameterId field value if set, zero value otherwise.
func (o *BTConfiguredValue) GetConfigurationParameterId() string {
	if o == nil || o.ConfigurationParameterId == nil {
		var ret string
		return ret
	}
	return *o.ConfigurationParameterId
}

// GetConfigurationParameterIdOk returns a tuple with the ConfigurationParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTConfiguredValue) GetConfigurationParameterIdOk() (*string, bool) {
	if o == nil || o.ConfigurationParameterId == nil {
		return nil, false
	}
	return o.ConfigurationParameterId, true
}

// HasConfigurationParameterId returns a boolean if a field has been set.
func (o *BTConfiguredValue) HasConfigurationParameterId() bool {
	if o != nil && o.ConfigurationParameterId != nil {
		return true
	}

	return false
}

// SetConfigurationParameterId gets a reference to the given string and assigns it to the ConfigurationParameterId field.
func (o *BTConfiguredValue) SetConfigurationParameterId(v string) {
	o.ConfigurationParameterId = &v
}

// GetConfigurationToValue returns the ConfigurationToValue field value if set, zero value otherwise.
func (o *BTConfiguredValue) GetConfigurationToValue() map[string]string {
	if o == nil || o.ConfigurationToValue == nil {
		var ret map[string]string
		return ret
	}
	return *o.ConfigurationToValue
}

// GetConfigurationToValueOk returns a tuple with the ConfigurationToValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTConfiguredValue) GetConfigurationToValueOk() (*map[string]string, bool) {
	if o == nil || o.ConfigurationToValue == nil {
		return nil, false
	}
	return o.ConfigurationToValue, true
}

// HasConfigurationToValue returns a boolean if a field has been set.
func (o *BTConfiguredValue) HasConfigurationToValue() bool {
	if o != nil && o.ConfigurationToValue != nil {
		return true
	}

	return false
}

// SetConfigurationToValue gets a reference to the given map[string]string and assigns it to the ConfigurationToValue field.
func (o *BTConfiguredValue) SetConfigurationToValue(v map[string]string) {
	o.ConfigurationToValue = &v
}

func (o BTConfiguredValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigurationParameterId != nil {
		toSerialize["configurationParameterId"] = o.ConfigurationParameterId
	}
	if o.ConfigurationToValue != nil {
		toSerialize["configurationToValue"] = o.ConfigurationToValue
	}
	return json.Marshal(toSerialize)
}

type NullableBTConfiguredValue struct {
	value *BTConfiguredValue
	isSet bool
}

func (v NullableBTConfiguredValue) Get() *BTConfiguredValue {
	return v.value
}

func (v *NullableBTConfiguredValue) Set(val *BTConfiguredValue) {
	v.value = val
	v.isSet = true
}

func (v NullableBTConfiguredValue) IsSet() bool {
	return v.isSet
}

func (v *NullableBTConfiguredValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTConfiguredValue(val *BTConfiguredValue) *NullableBTConfiguredValue {
	return &NullableBTConfiguredValue{value: val, isSet: true}
}

func (v NullableBTConfiguredValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTConfiguredValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

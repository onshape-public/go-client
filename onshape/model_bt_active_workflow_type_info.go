/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTActiveWorkflowTypeInfo struct for BTActiveWorkflowTypeInfo
type BTActiveWorkflowTypeInfo struct {
	HasInactiveCustomWorkflows *bool                     `json:"hasInactiveCustomWorkflows,omitempty"`
	PickableWorkflows          []BTPublishedWorkflowInfo `json:"pickableWorkflows,omitempty"`
	Workflow                   *BTPublishedWorkflowInfo  `json:"workflow,omitempty"`
}

// NewBTActiveWorkflowTypeInfo instantiates a new BTActiveWorkflowTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTActiveWorkflowTypeInfo() *BTActiveWorkflowTypeInfo {
	this := BTActiveWorkflowTypeInfo{}
	return &this
}

// NewBTActiveWorkflowTypeInfoWithDefaults instantiates a new BTActiveWorkflowTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTActiveWorkflowTypeInfoWithDefaults() *BTActiveWorkflowTypeInfo {
	this := BTActiveWorkflowTypeInfo{}
	return &this
}

// GetHasInactiveCustomWorkflows returns the HasInactiveCustomWorkflows field value if set, zero value otherwise.
func (o *BTActiveWorkflowTypeInfo) GetHasInactiveCustomWorkflows() bool {
	if o == nil || o.HasInactiveCustomWorkflows == nil {
		var ret bool
		return ret
	}
	return *o.HasInactiveCustomWorkflows
}

// GetHasInactiveCustomWorkflowsOk returns a tuple with the HasInactiveCustomWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTActiveWorkflowTypeInfo) GetHasInactiveCustomWorkflowsOk() (*bool, bool) {
	if o == nil || o.HasInactiveCustomWorkflows == nil {
		return nil, false
	}
	return o.HasInactiveCustomWorkflows, true
}

// HasHasInactiveCustomWorkflows returns a boolean if a field has been set.
func (o *BTActiveWorkflowTypeInfo) HasHasInactiveCustomWorkflows() bool {
	if o != nil && o.HasInactiveCustomWorkflows != nil {
		return true
	}

	return false
}

// SetHasInactiveCustomWorkflows gets a reference to the given bool and assigns it to the HasInactiveCustomWorkflows field.
func (o *BTActiveWorkflowTypeInfo) SetHasInactiveCustomWorkflows(v bool) {
	o.HasInactiveCustomWorkflows = &v
}

// GetPickableWorkflows returns the PickableWorkflows field value if set, zero value otherwise.
func (o *BTActiveWorkflowTypeInfo) GetPickableWorkflows() []BTPublishedWorkflowInfo {
	if o == nil || o.PickableWorkflows == nil {
		var ret []BTPublishedWorkflowInfo
		return ret
	}
	return o.PickableWorkflows
}

// GetPickableWorkflowsOk returns a tuple with the PickableWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTActiveWorkflowTypeInfo) GetPickableWorkflowsOk() ([]BTPublishedWorkflowInfo, bool) {
	if o == nil || o.PickableWorkflows == nil {
		return nil, false
	}
	return o.PickableWorkflows, true
}

// HasPickableWorkflows returns a boolean if a field has been set.
func (o *BTActiveWorkflowTypeInfo) HasPickableWorkflows() bool {
	if o != nil && o.PickableWorkflows != nil {
		return true
	}

	return false
}

// SetPickableWorkflows gets a reference to the given []BTPublishedWorkflowInfo and assigns it to the PickableWorkflows field.
func (o *BTActiveWorkflowTypeInfo) SetPickableWorkflows(v []BTPublishedWorkflowInfo) {
	o.PickableWorkflows = v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *BTActiveWorkflowTypeInfo) GetWorkflow() BTPublishedWorkflowInfo {
	if o == nil || o.Workflow == nil {
		var ret BTPublishedWorkflowInfo
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTActiveWorkflowTypeInfo) GetWorkflowOk() (*BTPublishedWorkflowInfo, bool) {
	if o == nil || o.Workflow == nil {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *BTActiveWorkflowTypeInfo) HasWorkflow() bool {
	if o != nil && o.Workflow != nil {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given BTPublishedWorkflowInfo and assigns it to the Workflow field.
func (o *BTActiveWorkflowTypeInfo) SetWorkflow(v BTPublishedWorkflowInfo) {
	o.Workflow = &v
}

func (o BTActiveWorkflowTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HasInactiveCustomWorkflows != nil {
		toSerialize["hasInactiveCustomWorkflows"] = o.HasInactiveCustomWorkflows
	}
	if o.PickableWorkflows != nil {
		toSerialize["pickableWorkflows"] = o.PickableWorkflows
	}
	if o.Workflow != nil {
		toSerialize["workflow"] = o.Workflow
	}
	return json.Marshal(toSerialize)
}

type NullableBTActiveWorkflowTypeInfo struct {
	value *BTActiveWorkflowTypeInfo
	isSet bool
}

func (v NullableBTActiveWorkflowTypeInfo) Get() *BTActiveWorkflowTypeInfo {
	return v.value
}

func (v *NullableBTActiveWorkflowTypeInfo) Set(val *BTActiveWorkflowTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTActiveWorkflowTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTActiveWorkflowTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTActiveWorkflowTypeInfo(val *BTActiveWorkflowTypeInfo) *NullableBTActiveWorkflowTypeInfo {
	return &NullableBTActiveWorkflowTypeInfo{value: val, isSet: true}
}

func (v NullableBTActiveWorkflowTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTActiveWorkflowTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// Sampler struct for Sampler
type Sampler struct {
	Input         *AccessorModel `json:"input,omitempty"`
	Interpolation *Interpolation `json:"interpolation,omitempty"`
	Output        *AccessorModel `json:"output,omitempty"`
}

// NewSampler instantiates a new Sampler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSampler() *Sampler {
	this := Sampler{}
	return &this
}

// NewSamplerWithDefaults instantiates a new Sampler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamplerWithDefaults() *Sampler {
	this := Sampler{}
	return &this
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *Sampler) GetInput() AccessorModel {
	if o == nil || o.Input == nil {
		var ret AccessorModel
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sampler) GetInputOk() (*AccessorModel, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *Sampler) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given AccessorModel and assigns it to the Input field.
func (o *Sampler) SetInput(v AccessorModel) {
	o.Input = &v
}

// GetInterpolation returns the Interpolation field value if set, zero value otherwise.
func (o *Sampler) GetInterpolation() Interpolation {
	if o == nil || o.Interpolation == nil {
		var ret Interpolation
		return ret
	}
	return *o.Interpolation
}

// GetInterpolationOk returns a tuple with the Interpolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sampler) GetInterpolationOk() (*Interpolation, bool) {
	if o == nil || o.Interpolation == nil {
		return nil, false
	}
	return o.Interpolation, true
}

// HasInterpolation returns a boolean if a field has been set.
func (o *Sampler) HasInterpolation() bool {
	if o != nil && o.Interpolation != nil {
		return true
	}

	return false
}

// SetInterpolation gets a reference to the given Interpolation and assigns it to the Interpolation field.
func (o *Sampler) SetInterpolation(v Interpolation) {
	o.Interpolation = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *Sampler) GetOutput() AccessorModel {
	if o == nil || o.Output == nil {
		var ret AccessorModel
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sampler) GetOutputOk() (*AccessorModel, bool) {
	if o == nil || o.Output == nil {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *Sampler) HasOutput() bool {
	if o != nil && o.Output != nil {
		return true
	}

	return false
}

// SetOutput gets a reference to the given AccessorModel and assigns it to the Output field.
func (o *Sampler) SetOutput(v AccessorModel) {
	o.Output = &v
}

func (o Sampler) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if o.Interpolation != nil {
		toSerialize["interpolation"] = o.Interpolation
	}
	if o.Output != nil {
		toSerialize["output"] = o.Output
	}
	return json.Marshal(toSerialize)
}

type NullableSampler struct {
	value *Sampler
	isSet bool
}

func (v NullableSampler) Get() *Sampler {
	return v.value
}

func (v *NullableSampler) Set(val *Sampler) {
	v.value = val
	v.isSet = true
}

func (v NullableSampler) IsSet() bool {
	return v.isSet
}

func (v *NullableSampler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampler(val *Sampler) *NullableSampler {
	return &NullableSampler{value: val, isSet: true}
}

func (v NullableSampler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

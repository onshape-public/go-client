/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTGraphicsBuffer2668 struct for BTGraphicsBuffer2668
type BTGraphicsBuffer2668 struct {
	// Type of JSON object.
	BtType                               *string                  `json:"btType,omitempty"`
	BufferData                           *BTImmutableByteArray    `json:"bufferData,omitempty"`
	MapGraphicsAttributeToComponentCount *map[string]int32        `json:"mapGraphicsAttributeToComponentCount,omitempty"`
	Target                               *GBTGraphicsBufferTarget `json:"target,omitempty"`
}

// NewBTGraphicsBuffer2668 instantiates a new BTGraphicsBuffer2668 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTGraphicsBuffer2668() *BTGraphicsBuffer2668 {
	this := BTGraphicsBuffer2668{}
	return &this
}

// NewBTGraphicsBuffer2668WithDefaults instantiates a new BTGraphicsBuffer2668 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTGraphicsBuffer2668WithDefaults() *BTGraphicsBuffer2668 {
	this := BTGraphicsBuffer2668{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTGraphicsBuffer2668) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTGraphicsBuffer2668) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTGraphicsBuffer2668) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTGraphicsBuffer2668) SetBtType(v string) {
	o.BtType = &v
}

// GetBufferData returns the BufferData field value if set, zero value otherwise.
func (o *BTGraphicsBuffer2668) GetBufferData() BTImmutableByteArray {
	if o == nil || o.BufferData == nil {
		var ret BTImmutableByteArray
		return ret
	}
	return *o.BufferData
}

// GetBufferDataOk returns a tuple with the BufferData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTGraphicsBuffer2668) GetBufferDataOk() (*BTImmutableByteArray, bool) {
	if o == nil || o.BufferData == nil {
		return nil, false
	}
	return o.BufferData, true
}

// HasBufferData returns a boolean if a field has been set.
func (o *BTGraphicsBuffer2668) HasBufferData() bool {
	if o != nil && o.BufferData != nil {
		return true
	}

	return false
}

// SetBufferData gets a reference to the given BTImmutableByteArray and assigns it to the BufferData field.
func (o *BTGraphicsBuffer2668) SetBufferData(v BTImmutableByteArray) {
	o.BufferData = &v
}

// GetMapGraphicsAttributeToComponentCount returns the MapGraphicsAttributeToComponentCount field value if set, zero value otherwise.
func (o *BTGraphicsBuffer2668) GetMapGraphicsAttributeToComponentCount() map[string]int32 {
	if o == nil || o.MapGraphicsAttributeToComponentCount == nil {
		var ret map[string]int32
		return ret
	}
	return *o.MapGraphicsAttributeToComponentCount
}

// GetMapGraphicsAttributeToComponentCountOk returns a tuple with the MapGraphicsAttributeToComponentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTGraphicsBuffer2668) GetMapGraphicsAttributeToComponentCountOk() (*map[string]int32, bool) {
	if o == nil || o.MapGraphicsAttributeToComponentCount == nil {
		return nil, false
	}
	return o.MapGraphicsAttributeToComponentCount, true
}

// HasMapGraphicsAttributeToComponentCount returns a boolean if a field has been set.
func (o *BTGraphicsBuffer2668) HasMapGraphicsAttributeToComponentCount() bool {
	if o != nil && o.MapGraphicsAttributeToComponentCount != nil {
		return true
	}

	return false
}

// SetMapGraphicsAttributeToComponentCount gets a reference to the given map[string]int32 and assigns it to the MapGraphicsAttributeToComponentCount field.
func (o *BTGraphicsBuffer2668) SetMapGraphicsAttributeToComponentCount(v map[string]int32) {
	o.MapGraphicsAttributeToComponentCount = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *BTGraphicsBuffer2668) GetTarget() GBTGraphicsBufferTarget {
	if o == nil || o.Target == nil {
		var ret GBTGraphicsBufferTarget
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTGraphicsBuffer2668) GetTargetOk() (*GBTGraphicsBufferTarget, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *BTGraphicsBuffer2668) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given GBTGraphicsBufferTarget and assigns it to the Target field.
func (o *BTGraphicsBuffer2668) SetTarget(v GBTGraphicsBufferTarget) {
	o.Target = &v
}

func (o BTGraphicsBuffer2668) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.BufferData != nil {
		toSerialize["bufferData"] = o.BufferData
	}
	if o.MapGraphicsAttributeToComponentCount != nil {
		toSerialize["mapGraphicsAttributeToComponentCount"] = o.MapGraphicsAttributeToComponentCount
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	return json.Marshal(toSerialize)
}

type NullableBTGraphicsBuffer2668 struct {
	value *BTGraphicsBuffer2668
	isSet bool
}

func (v NullableBTGraphicsBuffer2668) Get() *BTGraphicsBuffer2668 {
	return v.value
}

func (v *NullableBTGraphicsBuffer2668) Set(val *BTGraphicsBuffer2668) {
	v.value = val
	v.isSet = true
}

func (v NullableBTGraphicsBuffer2668) IsSet() bool {
	return v.isSet
}

func (v *NullableBTGraphicsBuffer2668) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTGraphicsBuffer2668(val *BTGraphicsBuffer2668) *NullableBTGraphicsBuffer2668 {
	return &NullableBTGraphicsBuffer2668{value: val, isSet: true}
}

func (v NullableBTGraphicsBuffer2668) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTGraphicsBuffer2668) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

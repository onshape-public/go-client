/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
)

// BTElementGroup1458 struct for BTElementGroup1458
type BTElementGroup1458 struct {
	// Type of JSON object.
	BtType *string `json:"btType,omitempty"`
	// The name of the group (folder).
	GroupName *string `json:"groupName,omitempty"`
	// List of folders or elements in this group (folder).
	Groups []BTGroupOrElementReference2205 `json:"groups,omitempty"`
	// A unique identifier for this folder.
	NodeId *string `json:"nodeId,omitempty"`
}

// NewBTElementGroup1458 instantiates a new BTElementGroup1458 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTElementGroup1458() *BTElementGroup1458 {
	this := BTElementGroup1458{}
	return &this
}

// NewBTElementGroup1458WithDefaults instantiates a new BTElementGroup1458 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTElementGroup1458WithDefaults() *BTElementGroup1458 {
	this := BTElementGroup1458{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTElementGroup1458) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementGroup1458) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTElementGroup1458) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTElementGroup1458) SetBtType(v string) {
	o.BtType = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *BTElementGroup1458) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementGroup1458) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *BTElementGroup1458) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *BTElementGroup1458) SetGroupName(v string) {
	o.GroupName = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *BTElementGroup1458) GetGroups() []BTGroupOrElementReference2205 {
	if o == nil || o.Groups == nil {
		var ret []BTGroupOrElementReference2205
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementGroup1458) GetGroupsOk() ([]BTGroupOrElementReference2205, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *BTElementGroup1458) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []BTGroupOrElementReference2205 and assigns it to the Groups field.
func (o *BTElementGroup1458) SetGroups(v []BTGroupOrElementReference2205) {
	o.Groups = v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTElementGroup1458) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTElementGroup1458) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTElementGroup1458) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTElementGroup1458) SetNodeId(v string) {
	o.NodeId = &v
}

func (o BTElementGroup1458) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.GroupName != nil {
		toSerialize["groupName"] = o.GroupName
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	return json.Marshal(toSerialize)
}

type NullableBTElementGroup1458 struct {
	value *BTElementGroup1458
	isSet bool
}

func (v NullableBTElementGroup1458) Get() *BTElementGroup1458 {
	return v.value
}

func (v *NullableBTElementGroup1458) Set(val *BTElementGroup1458) {
	v.value = val
	v.isSet = true
}

func (v NullableBTElementGroup1458) IsSet() bool {
	return v.isSet
}

func (v *NullableBTElementGroup1458) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTElementGroup1458(val *BTElementGroup1458) *NullableBTElementGroup1458 {
	return &NullableBTElementGroup1458{value: val, isSet: true}
}

func (v NullableBTElementGroup1458) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTElementGroup1458) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

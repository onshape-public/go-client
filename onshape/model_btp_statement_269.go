/*
Onshape REST API

## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.

Contact: api-support@onshape.zendesk.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onshape

import (
	"encoding/json"
	"fmt"
)

// BTPStatement269 - struct for BTPStatement269
type BTPStatement269 struct {
	implBTPStatement269 interface{}
}

// BTPStatementThrow1080AsBTPStatement269 is a convenience function that returns BTPStatementThrow1080 wrapped in BTPStatement269
func (o *BTPStatementThrow1080) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementExpression275AsBTPStatement269 is a convenience function that returns BTPStatementExpression275 wrapped in BTPStatement269
func (o *BTPStatementExpression275) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementBreak272AsBTPStatement269 is a convenience function that returns BTPStatementBreak272 wrapped in BTPStatement269
func (o *BTPStatementBreak272) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementLoopForIn279AsBTPStatement269 is a convenience function that returns BTPStatementLoopForIn279 wrapped in BTPStatement269
func (o *BTPStatementLoopForIn279) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementLoopFor3278AsBTPStatement269 is a convenience function that returns BTPStatementLoopFor3278 wrapped in BTPStatement269
func (o *BTPStatementLoopFor3278) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementReturn281AsBTPStatement269 is a convenience function that returns BTPStatementReturn281 wrapped in BTPStatement269
func (o *BTPStatementReturn281) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementConstantDeclaration273AsBTPStatement269 is a convenience function that returns BTPStatementConstantDeclaration273 wrapped in BTPStatement269
func (o *BTPStatementConstantDeclaration273) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementLoop277AsBTPStatement269 is a convenience function that returns BTPStatementLoop277 wrapped in BTPStatement269
func (o *BTPStatementLoop277) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementBlock271AsBTPStatement269 is a convenience function that returns BTPStatementBlock271 wrapped in BTPStatement269
func (o *BTPStatementBlock271) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementAssignment270AsBTPStatement269 is a convenience function that returns BTPStatementAssignment270 wrapped in BTPStatement269
func (o *BTPStatementAssignment270) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementVarDeclaration282AsBTPStatement269 is a convenience function that returns BTPStatementVarDeclaration282 wrapped in BTPStatement269
func (o *BTPStatementVarDeclaration282) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementCompressedQuery1237AsBTPStatement269 is a convenience function that returns BTPStatementCompressedQuery1237 wrapped in BTPStatement269
func (o *BTPStatementCompressedQuery1237) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementContinue274AsBTPStatement269 is a convenience function that returns BTPStatementContinue274 wrapped in BTPStatement269
func (o *BTPStatementContinue274) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementIf276AsBTPStatement269 is a convenience function that returns BTPStatementIf276 wrapped in BTPStatement269
func (o *BTPStatementIf276) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementLoopWhile280AsBTPStatement269 is a convenience function that returns BTPStatementLoopWhile280 wrapped in BTPStatement269
func (o *BTPStatementLoopWhile280) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// BTPStatementTry1523AsBTPStatement269 is a convenience function that returns BTPStatementTry1523 wrapped in BTPStatement269
func (o *BTPStatementTry1523) AsBTPStatement269() *BTPStatement269 {
	return &BTPStatement269{o}
}

// NewBTPStatement269 instantiates a new BTPStatement269 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatement269() *BTPStatement269 {
	this := BTPStatement269{Newbase_BTPStatement269()}
	return &this
}

// NewBTPStatement269WithDefaults instantiates a new BTPStatement269 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatement269WithDefaults() *BTPStatement269 {
	this := BTPStatement269{Newbase_BTPStatement269WithDefaults()}
	return &this
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *BTPStatement269) GetAnnotation() BTPAnnotation231 {
	type getResult interface {
		GetAnnotation() BTPAnnotation231
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAnnotation()
	} else {
		var de BTPAnnotation231
		return de
	}
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetAnnotationOk() (*BTPAnnotation231, bool) {
	type getResult interface {
		GetAnnotationOk() (*BTPAnnotation231, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAnnotationOk()
	} else {
		return nil, false
	}
}

// HasAnnotation returns a boolean if a field has been set.
func (o *BTPStatement269) HasAnnotation() bool {
	type getResult interface {
		HasAnnotation() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasAnnotation()
	} else {
		return false
	}
}

// SetAnnotation gets a reference to the given BTPAnnotation231 and assigns it to the Annotation field.
func (o *BTPStatement269) SetAnnotation(v BTPAnnotation231) {
	type getResult interface {
		SetAnnotation(v BTPAnnotation231)
	}

	o.GetActualInstance().(getResult).SetAnnotation(v)
}

// GetAtomic returns the Atomic field value if set, zero value otherwise.
func (o *BTPStatement269) GetAtomic() bool {
	type getResult interface {
		GetAtomic() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAtomic()
	} else {
		var de bool
		return de
	}
}

// GetAtomicOk returns a tuple with the Atomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetAtomicOk() (*bool, bool) {
	type getResult interface {
		GetAtomicOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetAtomicOk()
	} else {
		return nil, false
	}
}

// HasAtomic returns a boolean if a field has been set.
func (o *BTPStatement269) HasAtomic() bool {
	type getResult interface {
		HasAtomic() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasAtomic()
	} else {
		return false
	}
}

// SetAtomic gets a reference to the given bool and assigns it to the Atomic field.
func (o *BTPStatement269) SetAtomic(v bool) {
	type getResult interface {
		SetAtomic(v bool)
	}

	o.GetActualInstance().(getResult).SetAtomic(v)
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatement269) GetBtType() string {
	type getResult interface {
		GetBtType() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtType()
	} else {
		var de string
		return de
	}
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetBtTypeOk() (*string, bool) {
	type getResult interface {
		GetBtTypeOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetBtTypeOk()
	} else {
		return nil, false
	}
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatement269) HasBtType() bool {
	type getResult interface {
		HasBtType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasBtType()
	} else {
		return false
	}
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatement269) SetBtType(v string) {
	type getResult interface {
		SetBtType(v string)
	}

	o.GetActualInstance().(getResult).SetBtType(v)
}

// GetDocumentationType returns the DocumentationType field value if set, zero value otherwise.
func (o *BTPStatement269) GetDocumentationType() GBTPDefinitionType {
	type getResult interface {
		GetDocumentationType() GBTPDefinitionType
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationType()
	} else {
		var de GBTPDefinitionType
		return de
	}
}

// GetDocumentationTypeOk returns a tuple with the DocumentationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetDocumentationTypeOk() (*GBTPDefinitionType, bool) {
	type getResult interface {
		GetDocumentationTypeOk() (*GBTPDefinitionType, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetDocumentationTypeOk()
	} else {
		return nil, false
	}
}

// HasDocumentationType returns a boolean if a field has been set.
func (o *BTPStatement269) HasDocumentationType() bool {
	type getResult interface {
		HasDocumentationType() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasDocumentationType()
	} else {
		return false
	}
}

// SetDocumentationType gets a reference to the given GBTPDefinitionType and assigns it to the DocumentationType field.
func (o *BTPStatement269) SetDocumentationType(v GBTPDefinitionType) {
	type getResult interface {
		SetDocumentationType(v GBTPDefinitionType)
	}

	o.GetActualInstance().(getResult).SetDocumentationType(v)
}

// GetEndSourceLocation returns the EndSourceLocation field value if set, zero value otherwise.
func (o *BTPStatement269) GetEndSourceLocation() int32 {
	type getResult interface {
		GetEndSourceLocation() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEndSourceLocation()
	} else {
		var de int32
		return de
	}
}

// GetEndSourceLocationOk returns a tuple with the EndSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetEndSourceLocationOk() (*int32, bool) {
	type getResult interface {
		GetEndSourceLocationOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetEndSourceLocationOk()
	} else {
		return nil, false
	}
}

// HasEndSourceLocation returns a boolean if a field has been set.
func (o *BTPStatement269) HasEndSourceLocation() bool {
	type getResult interface {
		HasEndSourceLocation() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasEndSourceLocation()
	} else {
		return false
	}
}

// SetEndSourceLocation gets a reference to the given int32 and assigns it to the EndSourceLocation field.
func (o *BTPStatement269) SetEndSourceLocation(v int32) {
	type getResult interface {
		SetEndSourceLocation(v int32)
	}

	o.GetActualInstance().(getResult).SetEndSourceLocation(v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *BTPStatement269) GetNodeId() string {
	type getResult interface {
		GetNodeId() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeId()
	} else {
		var de string
		return de
	}
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetNodeIdOk() (*string, bool) {
	type getResult interface {
		GetNodeIdOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetNodeIdOk()
	} else {
		return nil, false
	}
}

// HasNodeId returns a boolean if a field has been set.
func (o *BTPStatement269) HasNodeId() bool {
	type getResult interface {
		HasNodeId() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasNodeId()
	} else {
		return false
	}
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *BTPStatement269) SetNodeId(v string) {
	type getResult interface {
		SetNodeId(v string)
	}

	o.GetActualInstance().(getResult).SetNodeId(v)
}

// GetShortDescriptor returns the ShortDescriptor field value if set, zero value otherwise.
func (o *BTPStatement269) GetShortDescriptor() string {
	type getResult interface {
		GetShortDescriptor() string
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetShortDescriptor()
	} else {
		var de string
		return de
	}
}

// GetShortDescriptorOk returns a tuple with the ShortDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetShortDescriptorOk() (*string, bool) {
	type getResult interface {
		GetShortDescriptorOk() (*string, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetShortDescriptorOk()
	} else {
		return nil, false
	}
}

// HasShortDescriptor returns a boolean if a field has been set.
func (o *BTPStatement269) HasShortDescriptor() bool {
	type getResult interface {
		HasShortDescriptor() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasShortDescriptor()
	} else {
		return false
	}
}

// SetShortDescriptor gets a reference to the given string and assigns it to the ShortDescriptor field.
func (o *BTPStatement269) SetShortDescriptor(v string) {
	type getResult interface {
		SetShortDescriptor(v string)
	}

	o.GetActualInstance().(getResult).SetShortDescriptor(v)
}

// GetSpaceAfter returns the SpaceAfter field value if set, zero value otherwise.
func (o *BTPStatement269) GetSpaceAfter() BTPSpace10 {
	type getResult interface {
		GetSpaceAfter() BTPSpace10
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceAfter()
	} else {
		var de BTPSpace10
		return de
	}
}

// GetSpaceAfterOk returns a tuple with the SpaceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetSpaceAfterOk() (*BTPSpace10, bool) {
	type getResult interface {
		GetSpaceAfterOk() (*BTPSpace10, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceAfterOk()
	} else {
		return nil, false
	}
}

// HasSpaceAfter returns a boolean if a field has been set.
func (o *BTPStatement269) HasSpaceAfter() bool {
	type getResult interface {
		HasSpaceAfter() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceAfter()
	} else {
		return false
	}
}

// SetSpaceAfter gets a reference to the given BTPSpace10 and assigns it to the SpaceAfter field.
func (o *BTPStatement269) SetSpaceAfter(v BTPSpace10) {
	type getResult interface {
		SetSpaceAfter(v BTPSpace10)
	}

	o.GetActualInstance().(getResult).SetSpaceAfter(v)
}

// GetSpaceBefore returns the SpaceBefore field value if set, zero value otherwise.
func (o *BTPStatement269) GetSpaceBefore() BTPSpace10 {
	type getResult interface {
		GetSpaceBefore() BTPSpace10
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceBefore()
	} else {
		var de BTPSpace10
		return de
	}
}

// GetSpaceBeforeOk returns a tuple with the SpaceBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetSpaceBeforeOk() (*BTPSpace10, bool) {
	type getResult interface {
		GetSpaceBeforeOk() (*BTPSpace10, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceBeforeOk()
	} else {
		return nil, false
	}
}

// HasSpaceBefore returns a boolean if a field has been set.
func (o *BTPStatement269) HasSpaceBefore() bool {
	type getResult interface {
		HasSpaceBefore() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceBefore()
	} else {
		return false
	}
}

// SetSpaceBefore gets a reference to the given BTPSpace10 and assigns it to the SpaceBefore field.
func (o *BTPStatement269) SetSpaceBefore(v BTPSpace10) {
	type getResult interface {
		SetSpaceBefore(v BTPSpace10)
	}

	o.GetActualInstance().(getResult).SetSpaceBefore(v)
}

// GetSpaceDefault returns the SpaceDefault field value if set, zero value otherwise.
func (o *BTPStatement269) GetSpaceDefault() bool {
	type getResult interface {
		GetSpaceDefault() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceDefault()
	} else {
		var de bool
		return de
	}
}

// GetSpaceDefaultOk returns a tuple with the SpaceDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetSpaceDefaultOk() (*bool, bool) {
	type getResult interface {
		GetSpaceDefaultOk() (*bool, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetSpaceDefaultOk()
	} else {
		return nil, false
	}
}

// HasSpaceDefault returns a boolean if a field has been set.
func (o *BTPStatement269) HasSpaceDefault() bool {
	type getResult interface {
		HasSpaceDefault() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasSpaceDefault()
	} else {
		return false
	}
}

// SetSpaceDefault gets a reference to the given bool and assigns it to the SpaceDefault field.
func (o *BTPStatement269) SetSpaceDefault(v bool) {
	type getResult interface {
		SetSpaceDefault(v bool)
	}

	o.GetActualInstance().(getResult).SetSpaceDefault(v)
}

// GetStartSourceLocation returns the StartSourceLocation field value if set, zero value otherwise.
func (o *BTPStatement269) GetStartSourceLocation() int32 {
	type getResult interface {
		GetStartSourceLocation() int32
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStartSourceLocation()
	} else {
		var de int32
		return de
	}
}

// GetStartSourceLocationOk returns a tuple with the StartSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatement269) GetStartSourceLocationOk() (*int32, bool) {
	type getResult interface {
		GetStartSourceLocationOk() (*int32, bool)
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.GetStartSourceLocationOk()
	} else {
		return nil, false
	}
}

// HasStartSourceLocation returns a boolean if a field has been set.
func (o *BTPStatement269) HasStartSourceLocation() bool {
	type getResult interface {
		HasStartSourceLocation() bool
	}

	if tx, ok := o.GetActualInstance().(getResult); ok {
		return tx.HasStartSourceLocation()
	} else {
		return false
	}
}

// SetStartSourceLocation gets a reference to the given int32 and assigns it to the StartSourceLocation field.
func (o *BTPStatement269) SetStartSourceLocation(v int32) {
	type getResult interface {
		SetStartSourceLocation(v int32)
	}

	o.GetActualInstance().(getResult).SetStartSourceLocation(v)
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BTPStatement269) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'BTPStatementAssignment-270'
	if jsonDict["btType"] == "BTPStatementAssignment-270" {
		// try to unmarshal JSON data into BTPStatementAssignment270
		var qr *BTPStatementAssignment270
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementAssignment270: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementBlock-271'
	if jsonDict["btType"] == "BTPStatementBlock-271" {
		// try to unmarshal JSON data into BTPStatementBlock271
		var qr *BTPStatementBlock271
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementBlock271: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementBreak-272'
	if jsonDict["btType"] == "BTPStatementBreak-272" {
		// try to unmarshal JSON data into BTPStatementBreak272
		var qr *BTPStatementBreak272
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementBreak272: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementCompressedQuery-1237'
	if jsonDict["btType"] == "BTPStatementCompressedQuery-1237" {
		// try to unmarshal JSON data into BTPStatementCompressedQuery1237
		var qr *BTPStatementCompressedQuery1237
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementCompressedQuery1237: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementConstantDeclaration-273'
	if jsonDict["btType"] == "BTPStatementConstantDeclaration-273" {
		// try to unmarshal JSON data into BTPStatementConstantDeclaration273
		var qr *BTPStatementConstantDeclaration273
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementConstantDeclaration273: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementContinue-274'
	if jsonDict["btType"] == "BTPStatementContinue-274" {
		// try to unmarshal JSON data into BTPStatementContinue274
		var qr *BTPStatementContinue274
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementContinue274: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementExpression-275'
	if jsonDict["btType"] == "BTPStatementExpression-275" {
		// try to unmarshal JSON data into BTPStatementExpression275
		var qr *BTPStatementExpression275
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementExpression275: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementIf-276'
	if jsonDict["btType"] == "BTPStatementIf-276" {
		// try to unmarshal JSON data into BTPStatementIf276
		var qr *BTPStatementIf276
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementIf276: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementLoop-277'
	if jsonDict["btType"] == "BTPStatementLoop-277" {
		// try to unmarshal JSON data into BTPStatementLoop277
		var qr *BTPStatementLoop277
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementLoop277: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementLoopFor3-278'
	if jsonDict["btType"] == "BTPStatementLoopFor3-278" {
		// try to unmarshal JSON data into BTPStatementLoopFor3278
		var qr *BTPStatementLoopFor3278
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementLoopFor3278: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementLoopForIn-279'
	if jsonDict["btType"] == "BTPStatementLoopForIn-279" {
		// try to unmarshal JSON data into BTPStatementLoopForIn279
		var qr *BTPStatementLoopForIn279
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementLoopForIn279: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementLoopWhile-280'
	if jsonDict["btType"] == "BTPStatementLoopWhile-280" {
		// try to unmarshal JSON data into BTPStatementLoopWhile280
		var qr *BTPStatementLoopWhile280
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementLoopWhile280: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementReturn-281'
	if jsonDict["btType"] == "BTPStatementReturn-281" {
		// try to unmarshal JSON data into BTPStatementReturn281
		var qr *BTPStatementReturn281
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementReturn281: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementThrow-1080'
	if jsonDict["btType"] == "BTPStatementThrow-1080" {
		// try to unmarshal JSON data into BTPStatementThrow1080
		var qr *BTPStatementThrow1080
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementThrow1080: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementTry-1523'
	if jsonDict["btType"] == "BTPStatementTry-1523" {
		// try to unmarshal JSON data into BTPStatementTry1523
		var qr *BTPStatementTry1523
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementTry1523: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTPStatementVarDeclaration-282'
	if jsonDict["btType"] == "BTPStatementVarDeclaration-282" {
		// try to unmarshal JSON data into BTPStatementVarDeclaration282
		var qr *BTPStatementVarDeclaration282
		err = json.Unmarshal(data, &qr)
		if err == nil {
			dst.implBTPStatement269 = qr
			return nil // data stored, return on the first match
		} else {
			dst.implBTPStatement269 = nil
			return fmt.Errorf("Failed to unmarshal BTPStatement269 as BTPStatementVarDeclaration282: %s", err.Error())
		}
	}

	var qtx *base_BTPStatement269
	err = json.Unmarshal(data, &qtx)
	if err == nil {
		dst.implBTPStatement269 = qtx
		return nil // data stored in dst.base_BTPStatement269, return on the first match
	} else {
		dst.implBTPStatement269 = nil
		return fmt.Errorf("Failed to unmarshal BTPStatement269 as base_BTPStatement269: %s", err.Error())
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BTPStatement269) MarshalJSON() ([]byte, error) {
	ret := src.GetActualInstance()
	if ret == nil {
		return nil, nil // no data in oneOf schemas
	} else {
		return json.Marshal(&ret)
	}
}

// Get the actual instance
func (obj *BTPStatement269) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	return obj.implBTPStatement269
}

type NullableBTPStatement269 struct {
	value *BTPStatement269
	isSet bool
}

func (v NullableBTPStatement269) Get() *BTPStatement269 {
	return v.value
}

func (v *NullableBTPStatement269) Set(val *BTPStatement269) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatement269) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatement269) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatement269(val *BTPStatement269) *NullableBTPStatement269 {
	return &NullableBTPStatement269{value: val, isSet: true}
}

func (v NullableBTPStatement269) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatement269) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type base_BTPStatement269 struct {
	Annotation          *BTPAnnotation231   `json:"annotation,omitempty"`
	Atomic              *bool               `json:"atomic,omitempty"`
	BtType              *string             `json:"btType,omitempty"`
	DocumentationType   *GBTPDefinitionType `json:"documentationType,omitempty"`
	EndSourceLocation   *int32              `json:"endSourceLocation,omitempty"`
	NodeId              *string             `json:"nodeId,omitempty"`
	ShortDescriptor     *string             `json:"shortDescriptor,omitempty"`
	SpaceAfter          *BTPSpace10         `json:"spaceAfter,omitempty"`
	SpaceBefore         *BTPSpace10         `json:"spaceBefore,omitempty"`
	SpaceDefault        *bool               `json:"spaceDefault,omitempty"`
	StartSourceLocation *int32              `json:"startSourceLocation,omitempty"`
}

// Newbase_BTPStatement269 instantiates a new base_BTPStatement269 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func Newbase_BTPStatement269() *base_BTPStatement269 {
	this := base_BTPStatement269{}
	return &this
}

// Newbase_BTPStatement269WithDefaults instantiates a new base_BTPStatement269 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func Newbase_BTPStatement269WithDefaults() *base_BTPStatement269 {
	this := base_BTPStatement269{}
	return &this
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetAnnotation() BTPAnnotation231 {
	if o == nil || o.Annotation == nil {
		var ret BTPAnnotation231
		return ret
	}
	return *o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetAnnotationOk() (*BTPAnnotation231, bool) {
	if o == nil || o.Annotation == nil {
		return nil, false
	}
	return o.Annotation, true
}

// HasAnnotation returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasAnnotation() bool {
	if o != nil && o.Annotation != nil {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given BTPAnnotation231 and assigns it to the Annotation field.
func (o *base_BTPStatement269) SetAnnotation(v BTPAnnotation231) {
	o.Annotation = &v
}

// GetAtomic returns the Atomic field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetAtomic() bool {
	if o == nil || o.Atomic == nil {
		var ret bool
		return ret
	}
	return *o.Atomic
}

// GetAtomicOk returns a tuple with the Atomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetAtomicOk() (*bool, bool) {
	if o == nil || o.Atomic == nil {
		return nil, false
	}
	return o.Atomic, true
}

// HasAtomic returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasAtomic() bool {
	if o != nil && o.Atomic != nil {
		return true
	}

	return false
}

// SetAtomic gets a reference to the given bool and assigns it to the Atomic field.
func (o *base_BTPStatement269) SetAtomic(v bool) {
	o.Atomic = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *base_BTPStatement269) SetBtType(v string) {
	o.BtType = &v
}

// GetDocumentationType returns the DocumentationType field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetDocumentationType() GBTPDefinitionType {
	if o == nil || o.DocumentationType == nil {
		var ret GBTPDefinitionType
		return ret
	}
	return *o.DocumentationType
}

// GetDocumentationTypeOk returns a tuple with the DocumentationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetDocumentationTypeOk() (*GBTPDefinitionType, bool) {
	if o == nil || o.DocumentationType == nil {
		return nil, false
	}
	return o.DocumentationType, true
}

// HasDocumentationType returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasDocumentationType() bool {
	if o != nil && o.DocumentationType != nil {
		return true
	}

	return false
}

// SetDocumentationType gets a reference to the given GBTPDefinitionType and assigns it to the DocumentationType field.
func (o *base_BTPStatement269) SetDocumentationType(v GBTPDefinitionType) {
	o.DocumentationType = &v
}

// GetEndSourceLocation returns the EndSourceLocation field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetEndSourceLocation() int32 {
	if o == nil || o.EndSourceLocation == nil {
		var ret int32
		return ret
	}
	return *o.EndSourceLocation
}

// GetEndSourceLocationOk returns a tuple with the EndSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetEndSourceLocationOk() (*int32, bool) {
	if o == nil || o.EndSourceLocation == nil {
		return nil, false
	}
	return o.EndSourceLocation, true
}

// HasEndSourceLocation returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasEndSourceLocation() bool {
	if o != nil && o.EndSourceLocation != nil {
		return true
	}

	return false
}

// SetEndSourceLocation gets a reference to the given int32 and assigns it to the EndSourceLocation field.
func (o *base_BTPStatement269) SetEndSourceLocation(v int32) {
	o.EndSourceLocation = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *base_BTPStatement269) SetNodeId(v string) {
	o.NodeId = &v
}

// GetShortDescriptor returns the ShortDescriptor field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetShortDescriptor() string {
	if o == nil || o.ShortDescriptor == nil {
		var ret string
		return ret
	}
	return *o.ShortDescriptor
}

// GetShortDescriptorOk returns a tuple with the ShortDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetShortDescriptorOk() (*string, bool) {
	if o == nil || o.ShortDescriptor == nil {
		return nil, false
	}
	return o.ShortDescriptor, true
}

// HasShortDescriptor returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasShortDescriptor() bool {
	if o != nil && o.ShortDescriptor != nil {
		return true
	}

	return false
}

// SetShortDescriptor gets a reference to the given string and assigns it to the ShortDescriptor field.
func (o *base_BTPStatement269) SetShortDescriptor(v string) {
	o.ShortDescriptor = &v
}

// GetSpaceAfter returns the SpaceAfter field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetSpaceAfter() BTPSpace10 {
	if o == nil || o.SpaceAfter == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfter
}

// GetSpaceAfterOk returns a tuple with the SpaceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetSpaceAfterOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfter == nil {
		return nil, false
	}
	return o.SpaceAfter, true
}

// HasSpaceAfter returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasSpaceAfter() bool {
	if o != nil && o.SpaceAfter != nil {
		return true
	}

	return false
}

// SetSpaceAfter gets a reference to the given BTPSpace10 and assigns it to the SpaceAfter field.
func (o *base_BTPStatement269) SetSpaceAfter(v BTPSpace10) {
	o.SpaceAfter = &v
}

// GetSpaceBefore returns the SpaceBefore field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetSpaceBefore() BTPSpace10 {
	if o == nil || o.SpaceBefore == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBefore
}

// GetSpaceBeforeOk returns a tuple with the SpaceBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetSpaceBeforeOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBefore == nil {
		return nil, false
	}
	return o.SpaceBefore, true
}

// HasSpaceBefore returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasSpaceBefore() bool {
	if o != nil && o.SpaceBefore != nil {
		return true
	}

	return false
}

// SetSpaceBefore gets a reference to the given BTPSpace10 and assigns it to the SpaceBefore field.
func (o *base_BTPStatement269) SetSpaceBefore(v BTPSpace10) {
	o.SpaceBefore = &v
}

// GetSpaceDefault returns the SpaceDefault field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetSpaceDefault() bool {
	if o == nil || o.SpaceDefault == nil {
		var ret bool
		return ret
	}
	return *o.SpaceDefault
}

// GetSpaceDefaultOk returns a tuple with the SpaceDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetSpaceDefaultOk() (*bool, bool) {
	if o == nil || o.SpaceDefault == nil {
		return nil, false
	}
	return o.SpaceDefault, true
}

// HasSpaceDefault returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasSpaceDefault() bool {
	if o != nil && o.SpaceDefault != nil {
		return true
	}

	return false
}

// SetSpaceDefault gets a reference to the given bool and assigns it to the SpaceDefault field.
func (o *base_BTPStatement269) SetSpaceDefault(v bool) {
	o.SpaceDefault = &v
}

// GetStartSourceLocation returns the StartSourceLocation field value if set, zero value otherwise.
func (o *base_BTPStatement269) GetStartSourceLocation() int32 {
	if o == nil || o.StartSourceLocation == nil {
		var ret int32
		return ret
	}
	return *o.StartSourceLocation
}

// GetStartSourceLocationOk returns a tuple with the StartSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *base_BTPStatement269) GetStartSourceLocationOk() (*int32, bool) {
	if o == nil || o.StartSourceLocation == nil {
		return nil, false
	}
	return o.StartSourceLocation, true
}

// HasStartSourceLocation returns a boolean if a field has been set.
func (o *base_BTPStatement269) HasStartSourceLocation() bool {
	if o != nil && o.StartSourceLocation != nil {
		return true
	}

	return false
}

// SetStartSourceLocation gets a reference to the given int32 and assigns it to the StartSourceLocation field.
func (o *base_BTPStatement269) SetStartSourceLocation(v int32) {
	o.StartSourceLocation = &v
}

func (o base_BTPStatement269) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Annotation != nil {
		toSerialize["annotation"] = o.Annotation
	}
	if o.Atomic != nil {
		toSerialize["atomic"] = o.Atomic
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.DocumentationType != nil {
		toSerialize["documentationType"] = o.DocumentationType
	}
	if o.EndSourceLocation != nil {
		toSerialize["endSourceLocation"] = o.EndSourceLocation
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.ShortDescriptor != nil {
		toSerialize["shortDescriptor"] = o.ShortDescriptor
	}
	if o.SpaceAfter != nil {
		toSerialize["spaceAfter"] = o.SpaceAfter
	}
	if o.SpaceBefore != nil {
		toSerialize["spaceBefore"] = o.SpaceBefore
	}
	if o.SpaceDefault != nil {
		toSerialize["spaceDefault"] = o.SpaceDefault
	}
	if o.StartSourceLocation != nil {
		toSerialize["startSourceLocation"] = o.StartSourceLocation
	}
	return json.Marshal(toSerialize)
}
